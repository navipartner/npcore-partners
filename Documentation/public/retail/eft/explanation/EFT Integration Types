# EFT Integration types
Each EFT integration subscribes to the framework and implements the necessary operations along with any integration-specific auxiliary operations that are not supported by default in the framework.

We group all EFT integrations into two categories:

1.	Integrations that require a client-side component since communication with locally connected hardware is necessary.

An example is a traditional EFT Pin pad connected to the local machine on COM, USB or ethernet.

2. Integrations that do not require any client-side component, since communication with the external system can be done fully from the NAV server using C/AL and DotNet interop

An example is a webservice API based integration that allows users to pay by some smartphone app via some intermediate server that links the POS and the end customer device.
It could also be an integration that communicates with a local POS hardware device via an external server instead of a direct local route through the POS machine.
The second type of integration is usually simpler to implement and maintain, as there are less parts involved from NPRetails point of view

## Client-side (Stargate) 

For client-side integrations we offer our hardware proxy (Stargate) to communicate back and forth between the NST and the local machine. Stargate works by building .NET dlls that extend our request/response .NET interface and uploading these .dll packages into the customers NAV database where needed.
Initial deployment of these assemblies to the local POS machines and any future assembly updates are handled by the stargate framework.

For stargate integrations, the best approach to integration specific GUI is usually to keep it local via .NET dialog(s) to prevent excessive ping-pongs between the client machine and the NAV server for each dialog update.
We have a "MOCK_CLIENT_SIDE" integration in NPR that can used as an example of how to develop a stargate EFT integration.
On the local machine, it uses a generic EFTDialog.dll to show a simple EFT dialog. This assembly can be re-
used by other integrations if needed â€“ source code will be supplied upon request. Stargate development is not explained further in this document.

## Server-side

For server-side integrations you should be able to use mostly standard C/AL development concepts to implement your webservice requests.
It uses transcendence to load HTML, CSS and JS at run-time and displays a dialog that continually updates every second by pinging back to the NST and invoking an external server to check the transaction status.
Your server-side integration will most likely be implemented via one of the following mechanism:

1.	Long polling HTTP request
2.	high frequency HTTP result check requests
3.	Callback response.

MOBILEPAY is an example of b).
Integrations following approach :
a) should also be straight forward using normal C/AL and DotNet interop.
c) poses a problem for NAV as it does not support the concept of an open API without protection on it.

If c) is the only option available for your server-side integration, you will most likely have to use an external system to expose a public API for the callback ie. an Azure Function or similar.


