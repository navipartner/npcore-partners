const __mockMenus = [
  {
    Id: "NPRE-WPAD",
    Caption: "NPRE WaiterPad Menu",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Split Bill",
        Tooltip: "",
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-file-dashed-line",
        Class: "",
        Bold: false,
        FontSize: 2,
        Enabled: 0,
        Action: {
          State: {},
          Workflow: {
            Name: "",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                const data = runtime.getData("BUILTIN_SALELINE");
                                const items = data.map(row => ({
                                    key: row._position,
                                    no: row[6],
                                    caption: row[10],
                                    qty: row[12]
                                }));
                                const bills = [];
                                alert(JSON.stringify(await popup.hospitality.splitBill({ caption: \"Please, enter your password\", items, bills })));
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {
            WaiterPadCode: "",
            SeatingCode: "",
            RestaurantCode: "",
          },
          Type: "Workflow",
          Content: {
            Description:
              "This is a built-in action for selecting and inserting a recommended item into the current transaction",
            param_option_TypeoriginalValue: "Online",
          },
        },
      },
      {
        Caption: "Large Draught",
        Tooltip: "",
        Action: {
          Code: "40004",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "bo-beer32",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 34,
        },
      },
      {
        Caption: "Special Beer",
        Tooltip: "",
        Action: {
          Code: "40005",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "bo-beer32",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 35,
        },
      },
      {
        Caption: "Small Draught",
        Tooltip: "",
        Action: {
          Code: "40003",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "bo-beer32",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 163,
        },
      },
    ],
  },
  {
    Id: "NPRE-TBL",
    Caption: "NPRE WaiterPad Menu",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Test",
        Tooltip: "",
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-bitbucket",
        Class: "",
        Bold: false,
        FontSize: 2,
        Enabled: 0,
        Action: {
          State: {},
          Workflow: {
            Name: "",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `alert(JSON.stringify($parameters))`,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {
            WaiterPadCode: "",
            SeatingCode: "",
            RestaurantCode: "",
          },
          Type: "Workflow",
          Content: {
            Description:
              "This is a built-in action for selecting and inserting a recommended item into the current transaction",
            param_option_TypeoriginalValue: "Online",
          },
        },
      },
    ],
  },
  {
    Id: "DEV-DESKTOP-LEFT",
    Caption: "Development mock menu - left",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Small Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40003",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug-empty",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 33,
        },
      },
      {
        Caption: "Large Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40004",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 34,
        },
      },
      {
        Caption: "White Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40010",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-champagne-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 37,
        },
      },
      {
        Caption: "Red Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40013",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 38,
        },
      },
      {
        Caption: "Red Wine Regular Bottle",
        Tooltip: "",
        Action: {
          Code: "40015",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-bottle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 45,
        },
      },
      {
        Caption: `Popup - double error`,
        Tooltip: "Show two error dialogs",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-06",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                    var data = popup.error({ title: "Oh, no (x1)!", caption: "Popup #1!" });
                    var dataTwo = popup.error({ title: "Oh, no (x2)!", caption: "Popup #2!" });
                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-exclamation",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - numpad`,
        Tooltip: "Show a numpad dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-01",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.numpad({ title: "We need some numbers", caption: "How many decimals of pi do you know?" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-dots",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - confirm`,
        Tooltip: "Show a confirm dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-02",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.confirm({ title: "Can you make up your mind?", caption: "Do you know how to make up your mind at this decisive moment?" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-question",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - error`,
        Tooltip: "Show an error dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-03",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.error({ title: "Oh, no!", caption: "Something went wrong. It's your fault, you miserable piece of crap you!" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-exclamation",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - input`,
        Tooltip: "Show an input dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-04",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.input({ title: "Tell me something...", caption: "Spill your guts, tell me what you know!", required: true });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-pen",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - configuration`,
        Tooltip: "Show a configuration dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-05",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                const result = await popup.configuration({
                                    caption: "Please, specify the following configuration settings", 
                                    title: "Item configuration",
                                    settings: [
                                        {
                                            caption: "Burger configuration",
                                            type: "group",
                                            expanded: true,
                                            settings: [
                                                {
                                                    type: "plusminus",
                                                    id: "burgers",
                                                    caption: "Burgers",
                                                    minValue: 1,
                                                    maxValue: 4,
                                                    value: 8
                                                },
                                                {
                                                    type: "switch",
                                                    id: "xl",
                                                    caption: "Extra large"
                                                },
                                                {
                                                    type: "switch",
                                                    id: "cheese",
                                                    caption: "Slice of cheese",
                                                    value: true
                                                }
                                            ]
                                        },
                                        {
                                            caption: "Sauces",
                                            type: "group",
                                            settings: [
                                                {
                                                    type: "plusminus",
                                                    id: "ketchup",
                                                    caption: "Ketchup",
                                                    value: 1
                                                },
                                                {
                                                    type: "plusminus",
                                                    id: "mayo",
                                                    caption: "Mayonnaise",
                                                    value: 0
                                                },
                                                {
                                                    type: "radio",
                                                    id: "sauce",
                                                    caption: "Special sauce",
                                                    options: [
                                                        { caption: "None", value: "none" },
                                                        { caption: "Barbecue", value: "bbq" },
                                                        { caption: "Bernaise", value: "bernaise" },
                                                        { caption: "Mushroom", value: "mushroom" }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            type: "switch",
                                            id: "takeaway",
                                            caption: "To take away"                                            
                                        },
                                        {
                                            type: "plusminus",
                                            id: "napkins",
                                            caption: "Extra napkins",
                                            minValue: 1,
                                            maxValue: 10
                                        },
                                        {
                                            type: "text",
                                            id: "text_value",
                                            caption: "Enter some text"
                                        },
                                        {
                                            type: "decimal",
                                            id: "decimal_value",
                                            caption: "Enter a decimal number"
                                        },
                                        {
                                            type: "integer",
                                            id: "integer_value",
                                            caption: "Enter an integer number"
                                        }
                                    ]
                                }
                                );
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-code",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
    ],
  },
  {
    Id: "DEV-MOBILE-DRAWER",
    Caption: "Development mock menu - left",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Small Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40003",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug-empty",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 33,
        },
      },
      {
        Caption: "Large Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40004",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 34,
        },
      },
      {
        Caption: "White Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40010",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-champagne-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 37,
        },
      },
      {
        Caption: "Red Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40013",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 38,
        },
      },
      {
        Caption: "Red Wine Regular Bottle",
        Tooltip: "",
        Action: {
          Code: "40015",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-bottle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 45,
        },
      },
      {
        Caption: `Popup - numpad`,
        Tooltip: "Show a numpad dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-01",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                var data = popup.numpad({ title: "We need some numbers", caption: "How many decimals of pi do you know?" });
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-dots",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - confirm`,
        Tooltip: "Show a confirm dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-02",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                var data = popup.confirm({ title: "Can you make up your mind?", caption: "Do you know how to make up your mind at this decisive moment?" });
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-question",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - error`,
        Tooltip: "Show an error dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-03",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                var data = popup.error({ title: "Oh, no!", caption: "Something went wrong. It's your fault, you miserable piece of crap you!" });
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-exclamation",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - input`,
        Tooltip: "Show an input dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-04",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                var data = popup.input({ title: "Tell me something...", caption: "Spill your guts, tell me what you know!", required: true });
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-pen",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - configuration`,
        Tooltip: "Show a configuration dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-05",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                            const result = await popup.configuration({
                                caption: "Please, specify the following configuration settings", 
                                title: "Item configuration",
                                settings: [
                                    {
                                        caption: "Burger configuration",
                                        type: "group",
                                        expanded: true,
                                        settings: [
                                            {
                                                type: "plusminus",
                                                id: "burgers",
                                                caption: "Burgers",
                                                minValue: 1,
                                                maxValue: 4,
                                                value: 8
                                            },
                                            {
                                                type: "switch",
                                                id: "xl",
                                                caption: "Extra large"
                                            },
                                            {
                                                type: "switch",
                                                id: "cheese",
                                                caption: "Slice of cheese",
                                                value: true
                                            }
                                        ]
                                    },
                                    {
                                        caption: "Sauces",
                                        type: "group",
                                        settings: [
                                            {
                                                type: "plusminus",
                                                id: "ketchup",
                                                caption: "Ketchup",
                                                value: 1
                                            },
                                            {
                                                type: "plusminus",
                                                id: "mayo",
                                                caption: "Mayonnaise",
                                                value: 0
                                            },
                                            {
                                                type: "radio",
                                                id: "sauce",
                                                caption: "Special sauce",
                                                options: [
                                                    { caption: "None", value: "none" },
                                                    { caption: "Barbecue", value: "bbq" },
                                                    { caption: "Bernaise", value: "bernaise" },
                                                    { caption: "Mushroom", value: "mushroom" }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        type: "switch",
                                        id: "takeaway",
                                        caption: "To take away"                                            
                                    },
                                    {
                                        type: "plusminus",
                                        id: "napkins",
                                        caption: "Extra napkins",
                                        minValue: 1,
                                        maxValue: 10
                                    },
                                    {
                                        type: "text",
                                        id: "text_value",
                                        caption: "Enter some text"
                                    },
                                    {
                                        type: "decimal",
                                        id: "decimal_value",
                                        caption: "Enter a decimal number"
                                    },
                                    {
                                        type: "integer",
                                        id: "integer_value",
                                        caption: "Enter an integer number"
                                    }
                                ]
                            }
                            );
                            `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-code",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
    ],
  },
  {
    Id: "CAFE-LEFT",
    Caption: "Cafe Menu",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Pastries & Cakes",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-birthday-cake",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [
          {
            Caption:
              'Chocolate Eclair <img src="http://frostingandasmile.com/wp-content/uploads/2014/04/horizontal-web.jpg" height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40120",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 80,
            },
          },
          {
            Caption:
              'Raspberry Cheesecake <img src= "https://www.driscolls.com/-/media/assets/recipes/raspberry-cheesecake-with-grand-marnier.ashx"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40111",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 81,
            },
          },
          {
            Caption:
              'Fresh Juice <img src= "https://www.wagamama.dk/-/media/WagamamaDKMainsite/hero-pod-images/juices.jpg"height="75">',
            Tooltip: "",
            Action: {
              Code: "40005",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 5,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 82,
            },
          },
          {
            Caption:
              'Fresh Fruit Flan <img src= "https://www.pastry.net//assets/upload/product/cached/390x246/5210126f8d8315f1a35931e8e0cba17a.jpg"height="85"> ',
            Tooltip: "",
            Action: {
              Code: "40104",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 83,
            },
          },
          {
            Caption:
              'Carrot Cake<img src= "https://i2.wp.com/www.danishpastryhouse.com/wp-content/uploads/carrot-cake-danish-pastry-house-1.jpg"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40110",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 84,
            },
          },
          {
            Caption:
              'Fizzy Drinks <img src= "https://www.kfc.com/assets/products/G15022_KFC_80-all-drinks-Enviro_1337_RGB-copy-4887e234506ef6a88d1a73c530235412e69e9cf4f1273a42ef4ec73775922da6.jpg"height="75">',
            Tooltip: "",
            Action: {
              Code: "40001",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 5,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 143,
            },
          },
          {
            Caption:
              'Lemon and Raspberry Eclair <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTiHSSGuvvDDBCHP1CVGkL79hUk9Eri2u1l3edUktZQjUlauwtZSA" height="75">',
            Tooltip: "",
            Action: {
              Code: "40122",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 144,
            },
          },
          {
            Caption:
              'Lemon and Orange Eclair<img src="http://www.butterbaking.com/wp-content/uploads/2014/07/passionfruit-eclair.jpg" height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40105",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 145,
            },
          },
          {
            Caption:
              'Chocolate Cupcakes <img src="http://www.yourcupofcake.com/wp-content/uploads/2014/08/Banana-Split-Cupcakes.jpg" height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40109",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 146,
            },
          },
          {
            Caption:
              'Raspberry Roulade Torte <img src= "http://img.taste.com.au/SQjlq5rt/taste/2016/11/pumpkin-and-walnut-roulade-71681-1.jpeg" height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40112",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 147,
            },
          },
          {
            Caption:
              '<img src= "https://www.splendidtable.org/sites/default/files/styles/lede_image/public/7115933903_a5cdff7c77_z.jpg?itok=d1S_d6O4"height="85"> Fresh White Bread',
            Tooltip: "",
            Action: {
              Code: "40136",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 4,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 148,
            },
          },
          {
            Caption:
              'Mince Beef Pie <img src= "http://cdn.recipes100.com/v/13c0e81dde1b1181f6ccdda63e653d72.jpg" height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40102",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 149,
            },
          },
          {
            Caption:
              'Chocolate Croissant <img src= "http://lesaffreyeast.com/wp-content/uploads/2016/08/CroissantFrozenFINAL.jpg"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40132",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 150,
            },
          },
          {
            Caption:
              'Bread <img src= "https://s3.amazonaws.com/secretsaucefiles/photos/images/000/074/242/large/DSC00272.JPG?1480800744"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40135",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 4,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 151,
            },
          },
          {
            Caption:
              'Fresh White Bread <img src= "https://www.splendidtable.org/sites/default/files/styles/lede_image/public/7115933903_a5cdff7c77_z.jpg?itok=d1S_d6O4"height="75">',
            Tooltip: "",
            Action: {
              Code: "40131",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 4,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 152,
            },
          },
          {
            Caption:
              'Danish Rye Bread <img src= "http://www.yourdanishlife.dk/wp-content/uploads/2017/03/Danish-Bread-Mayra-Navarrete-54.jpg"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40133",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 4,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 153,
            },
          },
          {
            Caption:
              'Coffee <img src= "https://www.nespresso.com/ncp/res/uploads/recipes/d546e52be719d6e0ed37a790282194a118e19b3f.jpg"height="75">',
            Tooltip: "",
            Action: {
              Code: "40002",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 5,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 154,
            },
          },
          {
            Caption:
              'Fruit Tea <img src= "https://www.motto.net.ua/old_site//img/beverages/1298908158_E0F0EEECE0F2EDFBE920E7E5EBE5EDFBE920F7E0E9.jpg"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40024",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 5,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 155,
            },
          },
          {
            Caption:
              '<img src="http://www.yourcupofcake.com/wp-content/uploads/2014/08/Banana-Split-Cupcakes.jpg" height="85"> Chocolate Cupcakes',
            Tooltip: "",
            Action: {
              Code: "40123",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 156,
            },
          },
          {
            Caption:
              '<img src="http://frostingandasmile.com/wp-content/uploads/2014/04/horizontal-web.jpg" height="85"> Chocolate Eclair',
            Tooltip: "",
            Action: {
              Code: "40120",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 157,
            },
          },
          {
            Caption:
              'Lemon Meringue Pie <img src= "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTEJ4EPO7s0IJlEmQQbVmMQ08GRWfWNU9NsVKCwZADJipZwYZf5LQ"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40121",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 158,
            },
          },
          {
            Caption:
              '<img src= "https://www.pastry.net//assets/upload/product/cached/270x245/1d3fe6cb0f5081617ce9b101d6c6093c.jpg"height="85"> Santa Surprise',
            Tooltip: "",
            Action: {
              Code: "40110",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 159,
            },
          },
          {
            Caption:
              'Apple Crumble Tart <img src= "https://lovethelittlebakery.files.wordpress.com/2016/05/img_1465.jpg?w=620"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40106",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 160,
            },
          },
          {
            Caption:
              'Danish Pastry <img src= "http://www.andrewingredients.co.uk/uploads/Danish_Pastry_Margarine.jpg"height="75"> ',
            Tooltip: "",
            Action: {
              Code: "40108",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 161,
            },
          },
          {
            Caption:
              'Liver Pie <img src= "http://pattismenu.com/wp/wp-content/uploads/2015/03/liver-pie-IMG_2462.jpg" height="75">',
            Tooltip: "",
            Action: {
              Code: "40106",
              Parameters: {
                _option_itemIdentifyerType: {
                  ItemNo: 0,
                  ItemCrossReference: 1,
                  ItemSearch: 2,
                },
                itemIdentifyerType: 0,
                itemNo: "",
                itemQuantity: 1,
              },
              Type: "Item",
              Content: {
                Metadata: {},
                param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 4,
            Column: 4,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 218,
            },
          },
        ],
        Content: {
          keyMenu: "CAFE-LEFT",
          keyId: 79,
        },
      },
      {
        Caption: "Hospitality",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-utensils-alt",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [
          {
            Caption: "Hospitality - Functions",
            Tooltip: "",
            Action: null,
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 0,
            MenuButtons: [
              {
                Caption: "Move full sale to waiter pad",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 1,
                Column: 1,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 167,
                },
              },
              {
                Caption: "Get sale from waiter pad",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 2,
                Column: 1,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 168,
                },
              },
              {
                Caption: "Add empty waiter pad (start bill)",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "NEW_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "confirmNewWaiterPad",
                        Code: 'if (context.confirmString) {confirm(labels["ConfirmLabel"], context.confirmString, true, true).no(abort);}',
                      },
                      {
                        Label: "newWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "actionMessage",
                        Code: 'if (context.actionMessage) { message(labels["ActionMessageLabel"], context.actionMessage);}',
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Create new Waiter Pad on Seating",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 3,
                Column: 1,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 169,
                },
              },
              {
                Caption: "Split bill",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SPLIT_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "splitWaiterPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Partially load Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 4,
                Column: 1,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 170,
                },
              },
              {
                Caption: "Show waiter pad (view bill for table)",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SHOW_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "showWaiterPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "This is a built in function for handling move between pos and waiter pad.",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 5,
                Column: 1,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 171,
                },
              },
            ],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 166,
            },
          },
          {
            Caption: "Hospitality - Move Sale to Table",
            Tooltip: "",
            Action: null,
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [
              {
                Caption: "Table-01",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "01",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 173,
                },
              },
              {
                Caption: "Table-02",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "02",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 174,
                },
              },
              {
                Caption: "Table-03",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "03",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 175,
                },
              },
              {
                Caption: "Table-04",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "04",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 176,
                },
              },
              {
                Caption: "Table-05",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "05",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 177,
                },
              },
              {
                Caption: "Table-06",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "06",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 178,
                },
              },
              {
                Caption: "Table-07",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "07",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 179,
                },
              },
              {
                Caption: "Table-08",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "08",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 180,
                },
              },
              {
                Caption: "Table-09",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "09",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 181,
                },
              },
              {
                Caption: "Table-10",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "10",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 182,
                },
              },
              {
                Caption: "Table-11",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "11",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 183,
                },
              },
              {
                Caption: "Table-12",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "12",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 184,
                },
              },
              {
                Caption: "Table-13",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "13",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 185,
                },
              },
              {
                Caption: "Table-14",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "14",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 186,
                },
              },
              {
                Caption: "Table-15",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "15",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 187,
                },
              },
              {
                Caption: "Choose table to move to",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "SAVE_TO_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "createNewWaiterPad",
                        Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "saveSale2Pad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    OpenWaiterPad: false,
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                  },
                  Type: "Workflow",
                  Content: {
                    DataBinding: true,
                    Description: "Save POS Sale to Waiter Pad",
                    param_option_InputTypeoriginalValue: "List",
                    dataSource: "BUILTIN_SALELINE",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 5,
                Column: 1,
                Enabled: 1,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 188,
                },
              },
            ],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 172,
            },
          },
          {
            Caption: "Hospitality - Get Sale from Table",
            Tooltip: "",
            Action: null,
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 1,
            Enabled: 0,
            MenuButtons: [
              {
                Caption: "Table-01",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "01",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 190,
                },
              },
              {
                Caption: "Table-02",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "02",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 191,
                },
              },
              {
                Caption: "Table-03",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "03",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 192,
                },
              },
              {
                Caption: "Table-04",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "04",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 193,
                },
              },
              {
                Caption: "Table-05",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "05",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 194,
                },
              },
              {
                Caption: "Table-06",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "06",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 195,
                },
              },
              {
                Caption: "Table-07",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "07",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 196,
                },
              },
              {
                Caption: "Table-08",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "08",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 197,
                },
              },
              {
                Caption: "Table-09",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "09",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 198,
                },
              },
              {
                Caption: "Table-10",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "10",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 199,
                },
              },
              {
                Caption: "Table-11",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "11",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 200,
                },
              },
              {
                Caption: "Table-12",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "12",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 201,
                },
              },
              {
                Caption: "Table-13",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "13",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 202,
                },
              },
              {
                Caption: "Table-14",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "14",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 203,
                },
              },
              {
                Caption: "Table-15",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "15",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 0,
                Column: 0,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 204,
                },
              },
              {
                Caption: "Choose table to get from",
                Tooltip: "",
                Action: {
                  State: {},
                  Workflow: {
                    Name: "GET_WAITER_PAD",
                    RequestContext: false,
                    Steps: [
                      {
                        Label: "seatingInput",
                        Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                      },
                      {
                        Label: "selectWaiterPad",
                        Code: "if (context.seatingCode) { respond();}",
                      },
                      {
                        Label: "getSaleFromPad",
                        Code: "if (context.waiterPadNo) { respond();}",
                      },
                    ],
                    Content: {},
                  },
                  Parameters: {
                    FixedSeatingCode: "",
                    _option_InputType: {
                      stringPad: 0,
                      intPad: 1,
                      List: 2,
                    },
                    InputType: 2,
                    LocationFilter: "",
                    SeatingFilter: "",
                    ShowOnlyActiveWaiPad: false,
                    WarnBeforeTableRetrieval: false,
                  },
                  Type: "Workflow",
                  Content: {
                    Description: "Transfer Waiter Pad to POS Sale",
                    param_option_InputTypeoriginalValue: "List",
                  },
                },
                BackgroundColor: "",
                Color: "",
                IconClass: "",
                Class: "",
                Bold: false,
                FontSize: 2,
                Row: 5,
                Column: 1,
                Enabled: 0,
                MenuButtons: [],
                Content: {
                  keyMenu: "CAFE-LEFT",
                  keyId: 205,
                },
              },
            ],
            Content: {
              keyMenu: "CAFE-LEFT",
              keyId: 189,
            },
          },
        ],
        Content: {
          keyMenu: "CAFE-LEFT",
          keyId: 165,
        },
      },
      {
        Caption: "Hosp Menu",
        Tooltip: "",
        Action: {
          MenuId: "HOSPITALITY",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "orange",
        Color: "",
        IconClass: "fa-utensils",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CAFE-LEFT",
          keyId: 223,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "CUSTOMER",
    Caption: "Customer Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Customer Info ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "CustomerInfo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-info",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 2,
        },
      },
      {
        Caption: "Debit Info",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "DebitInfo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-info",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 3,
        },
      },
      {
        Caption: "Select Contact",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "CustomerCRM",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-group",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 4,
        },
      },
      {
        Caption: "Customer (Sales History)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 4,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "CustomerILE",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-graph-trend",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 5,
        },
      },
      {
        Caption: "Receivables (menu)",
        Tooltip: "",
        Action: {
          MenuId: "RECEIVABLES",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-money",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 11,
        },
      },
      {
        Caption: "Select Customer",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "SelectCustomer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-user",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 12,
        },
      },
      {
        Caption: "Invoice Customer ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "InvoiceCustomer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 13,
        },
      },
      {
        Caption: "Clear Customer ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "ClearCustomer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-edit",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 14,
        },
      },
      {
        Caption: "Clear Contact",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "ClearCustomer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-edit",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 15,
        },
      },
      {
        Caption: "Select Customer Club",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-torsos-all",
        Class: "",
        Bold: false,
        FontSize: 5,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 16,
        },
      },
      {
        Caption: "Clear Customer Club",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-edit",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 17,
        },
      },
      {
        Caption: "Customer List (Local)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNOBJECT",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            MenuFilterCode: "CUSLOCAL",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-list",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "CUSTOMER",
          keyId: 18,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "DISCOUNT",
    Caption: "Discount Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Line Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 4,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-price-tag",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 1,
        },
      },
      {
        Caption: "Line Discount Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 5,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-price-tag",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 2,
        },
      },
      {
        Caption: "Line Discount % ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 6,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-price-tag",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 3,
        },
      },
      {
        Caption: "Extra Line Discount % ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 7,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountPercentREL",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-price-tag",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 4,
        },
      },
      {
        Caption: "Total Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 0,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "TotalAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-pricetag-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 6,
        },
      },
      {
        Caption: "Total Discount Amount ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 1,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "TotalDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-pricetag-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 7,
        },
      },
      {
        Caption: "Total Discount % ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 2,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "DiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-pricetag-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 8,
        },
      },
      {
        Caption: "Extra Total Discount % ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 3,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "DiscountPercentREL",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-pricetag-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 9,
        },
      },
      {
        Caption: "Fixed 10% Line Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 6,
            FixedDiscountNumber: 10,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 10,
        },
      },
      {
        Caption: "Fixed 20% Line Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 6,
            FixedDiscountNumber: 20,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 11,
        },
      },
      {
        Caption: "Fixed 50 kr Line Discount Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 5,
            FixedDiscountNumber: 50,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 12,
        },
      },
      {
        Caption: "Remove Line Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 9,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "ClearLineDiscount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "dark-red",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 13,
        },
      },
      {
        Caption: "Fixed 5.25 % Total Amount Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 2,
            FixedDiscountNumber: 5.25,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "DiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 14,
        },
      },
      {
        Caption: "Fixed 25 % Total Amount Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 2,
            FixedDiscountNumber: 25,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "DiscountPercentABS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 15,
        },
      },
      {
        Caption: "Fixed 100 kr Total Discount Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 1,
            FixedDiscountNumber: 100,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "TotalDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 16,
        },
      },
      {
        Caption: "Remove Total Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 10,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "ClearTotalDiscount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "dark-red",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 17,
        },
      },
      {
        Caption: "Fixed 70 kr Line Discount Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 5,
            FixedDiscountNumber: 70,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 18,
        },
      },
      {
        Caption: "Fixed 150 kr Total Discount Amount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 1,
            FixedDiscountNumber: 150,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "TotalDiscountAmount",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 19,
        },
      },
      {
        Caption: "Change Line Unit Price",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 8,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineUnitPrice",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "im-price-tag",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 20,
        },
      },
      {
        Caption: "Block Discount",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "BLOCK_DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "PasswordPrompt",
                Code: "context.ShowPasswordPrompt && input({title: labels.title, caption: labels.password}).respond().cancel(abort);",
              },
              {
                Label: "ToggleBlockState",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {},
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: 'This action toggles the state of "Custom Disc Block" field.',
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT",
          keyId: 21,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "DISCOUNT_SCHEMES",
    Caption: "Discount Schemes",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Period Discount List",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6014455,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT_SCHEMES",
          keyId: 1,
        },
      },
      {
        Caption: "Mix Discount List",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6014452,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DISCOUNT_SCHEMES",
          keyId: 2,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "GIFTCARD_REDEEM",
    Caption: "Redeem Gift Card",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Redeem Gift Card (G)",
        Tooltip: "",
        Action: {
          Code: "G",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "GIFTCARD_REDEEM",
          keyId: 1,
        },
      },
      {
        Caption: "Redeem (Electronic) Gift Card (GE)",
        Tooltip: "",
        Action: {
          Code: "GE",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "GIFTCARD_REDEEM",
          keyId: 2,
        },
      },
      {
        Caption: "Redeem Foreign Gift Card (FG)",
        Tooltip: "",
        Action: {
          Code: "FG",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "GIFTCARD_REDEEM",
          keyId: 3,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "GIFTCARD_SALE",
    Caption: "Gift Card Sales",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "(Electronic) Gift Card (Sales)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SALE_GIFTVOUCHER",
            RequestContext: true,
            Steps: [
              {
                Label: "quantity",
                Code: "context.prompt_quantity && numpad(labels.quantity_description,labels.quantity,context.quantity).cancel(abort);",
              },
              {
                Label: "amount",
                Code: "numpad(labels.amount_title, labels.amount,context.voucher_amount).cancel(abort);",
              },
              {
                Label: "discount_amount",
                Code: "context.prompt_discount_amount && numpad(labels.discount_title,labels.discount_amount,context.discount);",
              },
              {
                Label: "discount_percent",
                Code: "context.prompt_discount_percent && numpad(labels.discount_title,labels.discount_percent,context.discount);",
              },
              {
                Label: "voucherno",
                Code: "context.prompt_voucherno && input({caption: context.voucherno_title,title: labels.voucherno,value: context.generatedvoucherno}).cancel(abort);",
              },
              {
                Label: "process_sale",
                Code: "respond();",
              },
              {
                Label: "editvoucherinfo",
                Code: "context.prompt_editvoucher && respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              Amount: 0,
              Percentage: 1,
              PaymentType: 2,
            },
            DiscountType: 0,
            PaymentType: "G",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales of Gift Vouchers",
            param_option_DiscountTypeoriginalValue: "Amount",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-gift",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "GIFTCARD_SALE",
          keyId: 1,
        },
      },
      {
        Caption: "Gift Card (Sales)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SALE_GIFTVOUCHER",
            RequestContext: true,
            Steps: [
              {
                Label: "quantity",
                Code: "context.prompt_quantity && numpad(labels.quantity_description,labels.quantity,context.quantity).cancel(abort);",
              },
              {
                Label: "amount",
                Code: "numpad(labels.amount_title, labels.amount,context.voucher_amount).cancel(abort);",
              },
              {
                Label: "discount_amount",
                Code: "context.prompt_discount_amount && numpad(labels.discount_title,labels.discount_amount,context.discount);",
              },
              {
                Label: "discount_percent",
                Code: "context.prompt_discount_percent && numpad(labels.discount_title,labels.discount_percent,context.discount);",
              },
              {
                Label: "voucherno",
                Code: "context.prompt_voucherno && input({caption: context.voucherno_title,title: labels.voucherno,value: context.generatedvoucherno}).cancel(abort);",
              },
              {
                Label: "process_sale",
                Code: "respond();",
              },
              {
                Label: "editvoucherinfo",
                Code: "context.prompt_editvoucher && respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              Amount: 0,
              Percentage: 1,
              PaymentType: 2,
            },
            DiscountType: 1,
            PaymentType: "G",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales of Gift Vouchers",
            param_option_DiscountTypeoriginalValue: "Percentage",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-gift",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "GIFTCARD_SALE",
          keyId: 2,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "HOSPITALITY",
    Caption: "Hospitality",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Move full sale to waiter pad",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SAVE_TO_WAITER_PAD",
            RequestContext: false,
            Steps: [
              {
                Label: "seatingInput",
                Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
              },
              {
                Label: "createNewWaiterPad",
                Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
              },
              {
                Label: "selectWaiterPad",
                Code: "if (context.seatingCode) { respond();}",
              },
              {
                Label: "saveSale2Pad",
                Code: "if (context.waiterPadNo) { respond();}",
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedSeatingCode: "",
            _option_InputType: {
              stringPad: 0,
              intPad: 1,
              List: 2,
            },
            InputType: 2,
            LocationFilter: "",
            OpenWaiterPad: false,
            SeatingFilter: "",
            ShowOnlyActiveWaiPad: false,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Save POS Sale to Waiter Pad",
            param_option_InputTypeoriginalValue: "List",
            dataSource: "BUILTIN_SALELINE",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 1,
        },
      },
      {
        Caption: "Get sale from waiter pad",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "GET_WAITER_PAD",
            RequestContext: false,
            Steps: [
              {
                Label: "seatingInput",
                Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
              },
              {
                Label: "selectWaiterPad",
                Code: "if (context.seatingCode) { respond();}",
              },
              {
                Label: "getSaleFromPad",
                Code: "if (context.waiterPadNo) { respond();}",
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedSeatingCode: "",
            _option_InputType: {
              stringPad: 0,
              intPad: 1,
              List: 2,
            },
            InputType: 2,
            LocationFilter: "",
            SeatingFilter: "",
            ShowOnlyActiveWaiPad: false,
            WarnBeforeTableRetrieval: false,
          },
          Type: "Workflow",
          Content: {
            Description: "Transfer Waiter Pad to POS Sale",
            param_option_InputTypeoriginalValue: "List",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 2,
        },
      },
      {
        Caption: "Add empty waiter pad (start bill)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "NEW_WAITER_PAD",
            RequestContext: false,
            Steps: [
              {
                Label: "seatingInput",
                Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
              },
              {
                Label: "confirmNewWaiterPad",
                Code: 'if (context.confirmString) {confirm(labels["ConfirmLabel"], context.confirmString, true, true).no(abort);}',
              },
              {
                Label: "newWaiterPad",
                Code: "if (context.seatingCode) { respond();}",
              },
              {
                Label: "actionMessage",
                Code: 'if (context.actionMessage) { message(labels["ActionMessageLabel"], context.actionMessage);}',
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedSeatingCode: "",
            _option_InputType: {
              stringPad: 0,
              intPad: 1,
              List: 2,
            },
            InputType: 2,
            LocationFilter: "",
            OpenWaiterPad: false,
            SeatingFilter: "",
          },
          Type: "Workflow",
          Content: {
            Description: "Create new Waiter Pad on Seating",
            param_option_InputTypeoriginalValue: "List",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 3,
        },
      },
      {
        Caption: "Split bill",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SPLIT_WAITER_PAD",
            RequestContext: false,
            Steps: [
              {
                Label: "seatingInput",
                Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
              },
              {
                Label: "selectWaiterPad",
                Code: "if (context.seatingCode) { respond();}",
              },
              {
                Label: "splitWaiterPad",
                Code: "if (context.waiterPadNo) { respond();}",
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedSeatingCode: "",
            _option_InputType: {
              stringPad: 0,
              intPad: 1,
              List: 2,
            },
            InputType: 2,
            LocationFilter: "",
            SeatingFilter: "",
            ShowOnlyActiveWaiPad: false,
          },
          Type: "Workflow",
          Content: {
            Description: "Partially load Waiter Pad to POS Sale",
            param_option_InputTypeoriginalValue: "List",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 4,
        },
      },
      {
        Caption: "Show waiter pad (view bill for table)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SHOW_WAITER_PAD",
            RequestContext: false,
            Steps: [
              {
                Label: "seatingInput",
                Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
              },
              {
                Label: "selectWaiterPad",
                Code: "if (context.seatingCode) { respond();}",
              },
              {
                Label: "showWaiterPad",
                Code: "if (context.waiterPadNo) { respond();}",
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedSeatingCode: "",
            _option_InputType: {
              stringPad: 0,
              intPad: 1,
              List: 2,
            },
            InputType: 2,
            LocationFilter: "",
            SeatingFilter: "",
            ShowOnlyActiveWaiPad: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling move between pos and waiter pad.",
            param_option_InputTypeoriginalValue: "List",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 5,
        },
      },
      {
        Caption: "Table",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [
          {
            Caption: "Table 1 - Move to",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "SAVE_TO_WAITER_PAD",
                RequestContext: false,
                Steps: [
                  {
                    Label: "seatingInput",
                    Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                  },
                  {
                    Label: "createNewWaiterPad",
                    Code: 'if ((context.seatingCode) && (context.confirmString)) { confirm(" ", context.confirmString, true, true).no(abort).yes(respond);}',
                  },
                  {
                    Label: "selectWaiterPad",
                    Code: "if (context.seatingCode) { respond();}",
                  },
                  {
                    Label: "saveSale2Pad",
                    Code: "if (context.waiterPadNo) { respond();}",
                  },
                ],
                Content: {},
              },
              Parameters: {
                FixedSeatingCode: "TABLE1",
                _option_InputType: {
                  stringPad: 0,
                  intPad: 1,
                  List: 2,
                },
                InputType: 2,
                LocationFilter: "",
                OpenWaiterPad: true,
                SeatingFilter: "",
                ShowOnlyActiveWaiPad: false,
              },
              Type: "Workflow",
              Content: {
                DataBinding: true,
                Description: "Save POS Sale to Waiter Pad",
                param_option_InputTypeoriginalValue: "List",
                dataSource: "BUILTIN_SALELINE",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 1,
            MenuButtons: [],
            Content: {
              keyMenu: "HOSPITALITY",
              keyId: 7,
            },
          },
          {
            Caption: "Table 1 - Get from",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "GET_WAITER_PAD",
                RequestContext: false,
                Steps: [
                  {
                    Label: "seatingInput",
                    Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                  },
                  {
                    Label: "selectWaiterPad",
                    Code: "if (context.seatingCode) { respond();}",
                  },
                  {
                    Label: "getSaleFromPad",
                    Code: "if (context.waiterPadNo) { respond();}",
                  },
                ],
                Content: {},
              },
              Parameters: {
                FixedSeatingCode: "TABLE1",
                _option_InputType: {
                  stringPad: 0,
                  intPad: 1,
                  List: 2,
                },
                InputType: 2,
                LocationFilter: "",
                SeatingFilter: "",
                ShowOnlyActiveWaiPad: false,
                WarnBeforeTableRetrieval: false,
              },
              Type: "Workflow",
              Content: {
                Description: "Transfer Waiter Pad to POS Sale",
                param_option_InputTypeoriginalValue: "List",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "HOSPITALITY",
              keyId: 8,
            },
          },
          {
            Caption: "Table 1 - Split Bill",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "SPLIT_WAITER_PAD",
                RequestContext: false,
                Steps: [
                  {
                    Label: "seatingInput",
                    Code: 'if (param.FixedSeatingCode) { context.seatingCode = param.FixedSeatingCode; respond();} else { switch(param.InputType + "") { case "0": stringpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "1": intpad(labels["InputTypeLabel"]).respond("seatingCode"); break; case "2": respond(); break; }}',
                  },
                  {
                    Label: "selectWaiterPad",
                    Code: "if (context.seatingCode) { respond();}",
                  },
                  {
                    Label: "splitWaiterPad",
                    Code: "if (context.waiterPadNo) { respond();}",
                  },
                ],
                Content: {},
              },
              Parameters: {
                FixedSeatingCode: "TABLE1",
                _option_InputType: {
                  stringPad: 0,
                  intPad: 1,
                  List: 2,
                },
                InputType: 2,
                LocationFilter: "",
                SeatingFilter: "",
                ShowOnlyActiveWaiPad: false,
              },
              Type: "Workflow",
              Content: {
                Description: "Partially load Waiter Pad to POS Sale",
                param_option_InputTypeoriginalValue: "List",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "HOSPITALITY",
              keyId: 9,
            },
          },
        ],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 6,
        },
      },
      {
        Caption: "Ingen Tomat",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "INSERT_COMMENT",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: 'if (param.EditDescription == param.EditDescription["Yes"]) {input({caption: labels.prompt, value: param.DefaultDescription}).respond();} else {context.value=param.DefaultDescription; respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultDescription: "Ingen Tomat",
            _option_EditDescription: {
              Yes: 0,
              No: 1,
            },
            EditDescription: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Insert a sales line comment. ",
            param_option_EditDescriptionoriginalValue: "Yes",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 10,
        },
      },
      {
        Caption: "Table Buzzer",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "INSERT_TABLE_BUZZER",
            RequestContext: false,
            Steps: [
              {
                Label: "textfield",
                Code: 'if (param.DialogType == param.DialogType["TextField"]) {input(labels.prompt).respond();}',
              },
              {
                Label: "numpad",
                Code: 'if (param.DialogType == param.DialogType["Numpad"]) {numpad(labels.prompt).respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            CommentTextPattern: "",
            _option_DialogType: {
              TextField: 0,
              Numpad: 1,
            },
            DialogType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "Insert a table buzzer number ",
            param_option_DialogTypeoriginalValue: "Numpad",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HOSPITALITY",
          keyId: 11,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "HYPERLINKS",
    Caption: "Hyperlinks",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Navi Partner",
        Tooltip: "www.navipartner.dk",
        Action: {
          State: {},
          Workflow: {
            Name: "HYPERLINK",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: 'var ifrm = document.createElement("iframe");ifrm.src = param.url;ifrm.id = "checkin";ifrm.style.position = "absolute";ifrm.style.top="17%";ifrm.style.left="17%";ifrm.style.height="65%";ifrm.style.width="65%";ifrm.style.overflow="hidden";ifrm.style.zIndex= "101";document.body.appendChild(ifrm);document.getElementById("np-textbox2").addEventListener(\'input\', closeIframe);function closeIframe(){var element = document.getElementById("checkin");element.parentNode.removeChild(element);};$(document).add(parent.document).click(function(e){var iframe = $("iframe");if (!iframe.is(e.target) && iframe.has(e.target).length === 0){var element = document.getElementById("checkin");element.parentNode.removeChild(element);}});',
              },
            ],
            Content: {},
          },
          Parameters: {
            url: "www.navipartner.dk",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for inserting an item line into the current transaction",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HYPERLINKS",
          keyId: 1,
        },
      },
      {
        Caption: "NP Support",
        Tooltip: "http://www.navipartner.dk/support/",
        Action: {
          State: {},
          Workflow: {
            Name: "HYPERLINK",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: 'var ifrm = document.createElement("iframe");ifrm.src = param.url;ifrm.id = "checkin";ifrm.style.position = "absolute";ifrm.style.top="17%";ifrm.style.left="17%";ifrm.style.height="65%";ifrm.style.width="65%";ifrm.style.overflow="hidden";ifrm.style.zIndex= "101";document.body.appendChild(ifrm);document.getElementById("np-textbox2").addEventListener(\'input\', closeIframe);function closeIframe(){var element = document.getElementById("checkin");element.parentNode.removeChild(element);};$(document).add(parent.document).click(function(e){var iframe = $("iframe");if (!iframe.is(e.target) && iframe.has(e.target).length === 0){var element = document.getElementById("checkin");element.parentNode.removeChild(element);}});',
              },
            ],
            Content: {},
          },
          Parameters: {
            url: "http://www.navipartner.dk/support/",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for inserting an item line into the current transaction",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HYPERLINKS",
          keyId: 2,
        },
      },
      {
        Caption: "Get Java",
        Tooltip: "https://www.java.com/download/",
        Action: {
          State: {},
          Workflow: {
            Name: "HYPERLINK",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: 'var ifrm = document.createElement("iframe");ifrm.src = param.url;ifrm.id = "checkin";ifrm.style.position = "absolute";ifrm.style.top="17%";ifrm.style.left="17%";ifrm.style.height="65%";ifrm.style.width="65%";ifrm.style.overflow="hidden";ifrm.style.zIndex= "101";document.body.appendChild(ifrm);document.getElementById("np-textbox2").addEventListener(\'input\', closeIframe);function closeIframe(){var element = document.getElementById("checkin");element.parentNode.removeChild(element);};$(document).add(parent.document).click(function(e){var iframe = $("iframe");if (!iframe.is(e.target) && iframe.has(e.target).length === 0){var element = document.getElementById("checkin");element.parentNode.removeChild(element);}});',
              },
            ],
            Content: {},
          },
          Parameters: {
            url: "https://www.java.com/download/",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for inserting an item line into the current transaction",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "HYPERLINKS",
          keyId: 3,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "IMPORT_SALES",
    Caption: "Import Sales Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Get Credit Memo",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {},
            CustomerType: -1,
          },
          Type: "Workflow",
          Content: {
            param_option_CustomerTypeoriginalValue: "CustomerSTD",
            error: "Action does not exist, but it is used in POS Menu Button [IMPORT_SALES, Get Credit Memo].",
            errorSeverity: 100,
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "IMPORT_SALES",
          keyId: 1,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "ITEMS",
    Caption: "Items Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Item Availability Per Locations",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 492,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 1,
        },
      },
      {
        Caption: "All Items Availability by Locations",
        Tooltip: "ITEM_INVENTORY_ALL",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 2,
        },
      },
      {
        Caption: "Edit Item Card",
        Tooltip: "ITEMCARD_EDIT",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 3,
        },
      },
      {
        Caption: "Match Item",
        Tooltip: "ITEM_MATCH",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 4,
        },
      },
      {
        Caption: "Edit List of Accessories",
        Tooltip: "ACCESSORIES_EDIT",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 5,
        },
      },
      {
        Caption: "Add Accessories ",
        Tooltip: "ACCESSORIES_ADD",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 6,
        },
      },
      {
        Caption: "Accessories Matrix",
        Tooltip: "ACCESSORIES_MATRIX",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 7,
        },
      },
      {
        Caption: "Variations Sales",
        Tooltip: "SALE_VARIATIONS",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 8,
        },
      },
      {
        Caption: "Assortment Sales",
        Tooltip: "SALE_ASSORTMENT",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 9,
        },
      },
      {
        Caption: "Serial Number",
        Tooltip: "SERIAL_NUMBER",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 4,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 10,
        },
      },
      {
        Caption: "Serial Number Not Created",
        Tooltip: "SERIAL_NUMBER_ARB",
        Action: null,
        BackgroundColor: "Orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 4,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "ITEMS",
          keyId: 11,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "LOGIN",
    Caption: "Menu on Login Screen",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "System Setup",
        Tooltip: "",
        Action: {
          MenuId: "SYSTEM_MENU_LEFT",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "pink",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "LOGIN",
          keyId: 1,
        },
      },
      {
        Caption: "Function",
        Tooltip: "",
        Action: {
          MenuId: "SYSTEM_MENU_RIGHT",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "olive",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "LOGIN",
          keyId: 2,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MEMBERMGT",
    Caption: "Member Management",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "New Member (Bamseklubben) zzz",
        Tooltip: "",
        Action: {
          Code: "320100",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 1,
        },
      },
      {
        Caption: "Regret Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Regret Membership Entry",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 2,
        },
      },
      {
        Caption: "Cancel Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 7,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Cancel Membership",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 3,
        },
      },
      {
        Caption: "Extend Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 5,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Extend Membership",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 4,
        },
      },
      {
        Caption: "Renew Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 4,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Renew Membership",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 5,
        },
      },
      {
        Caption: "Upgrade Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 6,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Upgrade Membership",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 6,
        },
      },
      {
        Caption: "View Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "View Membership Entry",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 7,
        },
      },
      {
        Caption: "Member Arrival (standard)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Member Arrival",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 8,
        },
      },
      {
        Caption: "Select Membership",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Select Membership",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 7,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 10,
        },
      },
      {
        Caption: "Member Arrival (advanced)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBER_ARRIVAL",
            RequestContext: false,
            Steps: [
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0 && param.DialogPrompt == 1) && input ({caption: labels.MemberCardPrompt, title: labels.MembershipTitle, value: param.DefaultInputValue}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AdmissionCode: "",
            ConfirmMember: true,
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Number": 0,
              "Member Card Number": 1,
              "Membership Number": 2,
              "Facial Recognition": 3,
              "No Prompt": 4,
            },
            DialogPrompt: 1,
            _option_POSWorkflow: {
              POSSales: 0,
              Automatic: 1,
              "With Guests": 2,
            },
            POSWorkflow: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member arrival functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_POSWorkfloworiginalValue: "POSSales",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 6,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MEMBERMGT",
          keyId: 11,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MORE_PAY_FUNC",
    Caption: "Payment Funtions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Logout",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Login",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-eject",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_PAY_FUNC",
          keyId: 2,
        },
      },
      {
        Caption: "Switch Register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SWITCH_REGISTER",
            RequestContext: false,
            Steps: [
              {
                Label: "textfield",
                Code: 'if (param.DialogType == param.DialogType["TextField"]) {input(labels.prompt).respond();}',
              },
              {
                Label: "numpad",
                Code: 'if (param.DialogType == param.DialogType["Numpad"]) {numpad(labels.prompt).respond();}',
              },
              {
                Label: "list",
                Code: 'if (param.DialogType == param.DialogType["List"]) {respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DialogType: {
              TextField: 0,
              Numpad: 1,
              List: 2,
            },
            DialogType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Switch to a different register",
            param_option_DialogTypeoriginalValue: "TextField",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-loop",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_PAY_FUNC",
          keyId: 3,
        },
      },
      {
        Caption: "Pepper Transactions Request View",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6184498,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-list-bullet",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_PAY_FUNC",
          keyId: 6,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MORE_SALE_FUNC",
    Caption: "Sales Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Zoom Sales Line",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "ZOOM",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {},
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Zoom a sales line.",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-zoom-in",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 4,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 1,
        },
      },
      {
        Caption: "Switch Register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SWITCH_REGISTER",
            RequestContext: false,
            Steps: [
              {
                Label: "textfield",
                Code: 'if (param.DialogType == param.DialogType["TextField"]) {input(labels.prompt).respond();}',
              },
              {
                Label: "numpad",
                Code: 'if (param.DialogType == param.DialogType["Numpad"]) {numpad(labels.prompt).respond();}',
              },
              {
                Label: "list",
                Code: 'if (param.DialogType == param.DialogType["List"]) {respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DialogType: {
              TextField: 0,
              Numpad: 1,
              List: 2,
            },
            DialogType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Switch to a different register",
            param_option_DialogTypeoriginalValue: "TextField",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-loop",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 2,
        },
      },
      {
        Caption: "Logout",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Login",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-eject",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 3,
        },
      },
      {
        Caption: "Return ",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "im-previous",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [
          {
            Caption: "Cash Sales Reverse",
            Tooltip: "SALE_REVERSE",
            Action: {
              State: {},
              Workflow: {
                Name: "REVERSE_SALE",
                RequestContext: true,
                Steps: [
                  {
                    Label: "receipt",
                    Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
                  },
                  {
                    Label: "reason",
                    Code: "context.PromptForReason && respond();",
                  },
                  {
                    Label: "handle",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_ItemCondition: {
                  Mint: 0,
                  Used: 1,
                  "Not Suitable for Resale": 2,
                },
                ItemCondition: 1,
                _option_ObfucationMethod: {
                  None: 0,
                  MI: 1,
                },
                ObfucationMethod: 0,
              },
              Type: "Workflow",
              Content: {
                Description:
                  "Refund / Reverse Sale. This action will prompt for a receipt no and recreate the sales with reversed quantity.",
                param_option_ItemConditionoriginalValue: "Used",
                param_option_ObfucationMethodoriginalValue: "None",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "MORE_SALE_FUNC",
              keyId: 38,
            },
          },
          {
            Caption: "Sales Return Orders",
            Tooltip: "SALE_ANNULL",
            Action: {
              State: {},
              Workflow: {
                Name: "SALEANNULL",
                RequestContext: true,
                Steps: [
                  {
                    Label: "ReceiptNumber",
                    Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_DocumentType: {
                  CreditMemo: 0,
                  ReturnOrder: 1,
                },
                DocumentType: 1,
                _option_ObfucationMethod: {
                  None: 0,
                  MI: 1,
                },
                ObfucationMethod: 0,
              },
              Type: "Workflow",
              Content: {
                Description: " This action will prompt for a receipt no and annul the sale.",
                param_option_DocumentTypeoriginalValue: "ReturnOrder",
                param_option_ObfucationMethodoriginalValue: "None",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "MORE_SALE_FUNC",
              keyId: 39,
            },
          },
          {
            Caption: "Sales Credit Memos",
            Tooltip: "SALE_ANNULL",
            Action: {
              State: {},
              Workflow: {
                Name: "SALEANNULL",
                RequestContext: true,
                Steps: [
                  {
                    Label: "ReceiptNumber",
                    Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_DocumentType: {
                  CreditMemo: 0,
                  ReturnOrder: 1,
                },
                DocumentType: 0,
                _option_ObfucationMethod: {
                  None: 0,
                  MI: 1,
                },
                ObfucationMethod: 0,
              },
              Type: "Workflow",
              Content: {
                Description: " This action will prompt for a receipt no and annul the sale.",
                param_option_DocumentTypeoriginalValue: "CreditMemo",
                param_option_ObfucationMethodoriginalValue: "None",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 3,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "MORE_SALE_FUNC",
              keyId: 40,
            },
          },
        ],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 5,
        },
      },
      {
        Caption: "Balance Register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "BALANCE_V1",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `workflow.respond();`,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {
            Description: "This is the built in function to perform balancing of the register (Version 1)",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-results",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 6,
        },
      },
      {
        Caption: "Statistics (menu)",
        Tooltip: "",
        Action: {
          MenuId: "STATISTICS",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-graph-trend",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 9,
        },
      },
      {
        Caption: "Discount Schemes List",
        Tooltip: "",
        Action: {
          MenuId: "DISCOUNT_SCHEMES",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 10,
        },
      },
      {
        Caption: "Prints (menu)",
        Tooltip: "",
        Action: {
          MenuId: "PRINTS",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 12,
        },
      },
      {
        Caption: "Audit Roll View",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6014432,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-search",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 16,
        },
      },
      {
        Caption: "Pepper Transactions Request View",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6184498,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-list-bullet",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 17,
        },
      },
      {
        Caption: "Open Register Drawer",
        Tooltip: "REGISTER_OPEN",
        Action: {
          State: {},
          Workflow: {
            Name: "OPEN_CASH_DRAWER",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Cash Drawer No.": "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for opening the cash drawer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-inbox",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 20,
        },
      },
      {
        Caption: "Pay-Out",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PAYIN_PAYOUT",
            RequestContext: false,
            Steps: [
              {
                Label: "account",
                Code: "respond();",
              },
              {
                Label: "amount",
                Code: "numpad (labels.Amount).cancel(abort);",
              },
              {
                Label: "description",
                Code: "input({caption: labels.Description, value: context.accountdescription}).cancel(abort);",
              },
              {
                Label: "handle",
                Code: "respond();",
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            FixedAccountCode: "",
            FixedReasonCode: "",
            LookupReasonCode: false,
            "_option_Pay Option": {
              "Pay In": 0,
              Payout: 1,
            },
            "Pay Option": 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles cash deposit / withdrawls from the till",
            "param_option_Pay OptionoriginalValue": "Payout",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 22,
        },
      },
      {
        Caption: "Customer Repair List",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6014443,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-th-list",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 28,
        },
      },
      {
        Caption: "Tax Free",
        Tooltip: "",
        Action: {
          MenuId: "TAXFREE",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-plane",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 29,
        },
      },
      {
        Caption: "Sales Order Menu",
        Tooltip: "",
        Action: {
          MenuId: "SALES_ORDER",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-clipboard",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 31,
        },
      },
      {
        Caption: "Retail Document (menu)",
        Tooltip: "",
        Action: {
          MenuId: "RETAIL_DOCUMENT",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-document-text",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 32,
        },
      },
      {
        Caption: "Item (menu)",
        Tooltip: "",
        Action: {
          MenuId: "ITEMS",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-archive",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 33,
        },
      },
      {
        Caption: "Hyperlinks (menu)",
        Tooltip: "",
        Action: {
          MenuId: "HYPERLINKS",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-link",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 4,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 34,
        },
      },
      {
        Caption: "Audit Roll for July 2017",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNOBJECT",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            MenuFilterCode: "AUDITROLL",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 36,
        },
      },
      {
        Caption: "Lock Register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 4,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Locked",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-locked",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 37,
        },
      },
      {
        Caption: "Insert Comment",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "INSERT_COMMENT",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: 'if (param.EditDescription == param.EditDescription["Yes"]) {input({caption: labels.prompt, value: param.DefaultDescription}).respond();} else {context.value=param.DefaultDescription; respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultDescription: "",
            _option_EditDescription: {
              Yes: 0,
              No: 1,
            },
            EditDescription: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Insert a sales line comment. ",
            param_option_EditDescriptionoriginalValue: "Yes",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-comments-o",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 41,
        },
      },
      {
        Caption: "Edit Item Card <small>{{ 10 }}</small>",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "ITEMCARD",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            PageEditable: true,
            RefreshLine: true,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function opens the item card page for a selected sales line in the POS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-compose",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 42,
        },
      },
      {
        Caption: "View Item Card <small>{{ 10 }}</small>",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "ITEMCARD",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            PageEditable: true,
            RefreshLine: true,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function opens the item card page for a selected sales line in the POS",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-compose",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 43,
        },
      },
      {
        Caption: "Set Unit Price",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DISCOUNT",
            RequestContext: true,
            Steps: [
              {
                Label: "SalespersonPassword",
                Code: 'if(param.Security == 1) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SalespersonPasswordLabel,notBlank: true}).respond("SalespersonPassword").cancel(abort);}',
              },
              {
                Label: "CurrentSalespersonPassword",
                Code: 'if(param.Security == 2) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.CurrentSalespersonPasswordLabel,notBlank: true}).respond("CurrentSalespersonPassword").cancel(abort);}',
              },
              {
                Label: "SupervisorPassword",
                Code: 'if(param.Security == 3) {passwordpad({title: labels.DiscountAuthorisationTitle,caption: labels.SupervisorPasswordLabel,notBlank: true}).respond("SupervisorPassword").cancel(abort);}',
              },
              {
                Label: "fixed_input",
                Code: "if (param.FixedDiscountNumber != 0) { context.quantity = param.FixedDiscountNumber; }",
              },
              {
                Label: "discount_input",
                Code: 'switch(param.DiscountType + "") { case "0": case "1": case "2": case "3": case "4": case "5": case "6": case "7": case "8": case "11": case "12": if (param.FixedDiscountNumber == 0){ numpad(labels["DiscountLabel" + param.DiscountType]).respond("quantity"); } else { context.quantity = param.FixedDiscountNumber; respond("quantity"); } break; default: context.quantity = param.FixedDiscountNumber; respond("quantity");}',
              },
              {
                Label: "FixedReasonCode",
                Code: 'if (param.FixedReasonCode != "") {respond()}',
              },
              {
                Label: "LookupReasonCode",
                Code: "if (param.LookupReasonCode) {respond()}",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: 8,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for handling discount",
            param_option_DiscountTypeoriginalValue: "LineUnitPrice",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 44,
        },
      },
      {
        Caption: "End of Day",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 6,
        Column: 4,
        Enabled: 0,
        MenuButtons: [
          {
            Caption: "Z-Report",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "BALANCE_V3",
                RequestContext: false,
                Steps: [
                  {
                    Label: "ValidateRequirements",
                    Code: "respond()",
                  },
                  {
                    Label: "NotifySubscribers",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_Discovery",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_Close",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_CloseDone",
                    Code: "respond()",
                  },
                  {
                    Label: "BalanceRegister",
                    Code: "respond()",
                  },
                  {
                    Label: "EndOfWorkflow",
                    Code: "respond()",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_Security: {
                  None: 0,
                  SalespersonPassword: 1,
                  CurrentSalespersonPassword: 2,
                  SupervisorPassword: 3,
                },
                Security: 0,
                _option_Type: {
                  "X-Report (prel)": 0,
                  "Z-Report (final)": 1,
                  "Close Workshift": 2,
                },
                Type: 1,
              },
              Type: "Workflow",
              Content: {
                Description: "This is the built in function to perform balancing of the register (Version 1)",
                param_option_SecurityoriginalValue: "None",
                param_option_TypeoriginalValue: "Z-Report (final)",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "MORE_SALE_FUNC",
              keyId: 46,
            },
          },
          {
            Caption: "X-Report",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "BALANCE_V3",
                RequestContext: false,
                Steps: [
                  {
                    Label: "ValidateRequirements",
                    Code: "respond()",
                  },
                  {
                    Label: "NotifySubscribers",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_Discovery",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_Close",
                    Code: "respond()",
                  },
                  {
                    Label: "Eft_CloseDone",
                    Code: "respond()",
                  },
                  {
                    Label: "BalanceRegister",
                    Code: "respond()",
                  },
                  {
                    Label: "EndOfWorkflow",
                    Code: "respond()",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_Security: {
                  None: 0,
                  SalespersonPassword: 1,
                  CurrentSalespersonPassword: 2,
                  SupervisorPassword: 3,
                },
                Security: 0,
                _option_Type: {
                  "X-Report (prel)": 0,
                  "Z-Report (final)": 1,
                  "Close Workshift": 2,
                },
                Type: 0,
              },
              Type: "Workflow",
              Content: {
                Description: "This is the built in function to perform balancing of the register (Version 1)",
                param_option_SecurityoriginalValue: "None",
                param_option_TypeoriginalValue: "X-Report (prel)",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "MORE_SALE_FUNC",
              keyId: 47,
            },
          },
        ],
        Content: {
          keyMenu: "MORE_SALE_FUNC",
          keyId: 45,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MPAYMENT-BOTTOM",
    Caption: "MPayment Bottom",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Cash",
        Tooltip: "",
        Action: {
          Code: "K",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "Green",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-BOTTOM",
          keyId: 1,
        },
      },
      {
        Caption: "Credit card",
        Tooltip: "",
        Action: {
          Code: "T",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-BOTTOM",
          keyId: 2,
        },
      },
      {
        Caption: "Mobile Pay",
        Tooltip: "",
        Action: {
          Code: "MOBILEPAY",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-BOTTOM",
          keyId: 3,
        },
      },
      {
        Caption: "To ekspedition",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Sale",
          },
        },
        BackgroundColor: "dark-red",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-BOTTOM",
          keyId: 4,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MPAYMENT-LEFT",
    Caption: "MPAYMENT-LEFT",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "MPOS",
        Tooltip: "",
        Action: {
          Code: "MPOS",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-LEFT",
          keyId: 1,
        },
      },
      {
        Caption: "(iSMP) End of Day",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MPOSNATIVE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_NativeAction: {
              ADMISSION: 0,
              EOD: 1,
              PRINTLASTRECEIPT: 2,
              SCANDITITEMINFO: 3,
              SCANDITFINDITEM: 4,
              COUNTSALESFLOOR: 5,
              COUNTSTOCKROOM: 6,
              ASSIGNTAG: 7,
              LOCATETAG: 8,
              REFILL: 9,
              APPROVE: 10,
              SCANDITSCAN: 11,
            },
            NativeAction: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a report",
            param_option_NativeActionoriginalValue: "EOD",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-LEFT",
          keyId: 2,
        },
      },
      {
        Caption: "iSMP Reprint",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MPOSNATIVE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_NativeAction: {
              ADMISSION: 0,
              EOD: 1,
              PRINTLASTRECEIPT: 2,
              SCANDITITEMINFO: 3,
              SCANDITFINDITEM: 4,
              COUNTSALESFLOOR: 5,
              COUNTSTOCKROOM: 6,
              ASSIGNTAG: 7,
              LOCATETAG: 8,
              REFILL: 9,
              APPROVE: 10,
              SCANDITSCAN: 11,
            },
            NativeAction: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a report",
            param_option_NativeActionoriginalValue: "PRINTLASTRECEIPT",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-LEFT",
          keyId: 3,
        },
      },
      {
        Caption: "Back",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Sale",
          },
        },
        BackgroundColor: "dark-red",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-LEFT",
          keyId: 4,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MPAYMENT-TOP",
    Caption: "MPayment Top ",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Delete line",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DELETE_POS_LINE",
            RequestContext: false,
            Steps: [
              {
                Label: "decl0",
                Code: "confirmtext = labels.notallowed;",
              },
              {
                Label: "decl1",
                Code: 'if (!data.isEmpty()) {confirmtext = labels.Prompt.substitute(data("10"));};',
              },
              {
                Label: "confirm",
                Code: '(param.ConfirmDialog == param.ConfirmDialog["Yes"]) ? confirm({title: labels.title, caption: confirmtext}).respond() : respond();',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_ConfirmDialog: {
              No: 0,
              Yes: 1,
            },
            ConfirmDialog: 1,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This built in function deletes sales or payment line from the POS",
            param_option_ConfirmDialogoriginalValue: "No",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-TOP",
          keyId: 1,
        },
      },
      {
        Caption: "Cancel sale",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CANCEL_POS_SALE",
            RequestContext: true,
            Steps: [
              {
                Label: "",
                Code: "confirm(labels.title, labels.prompt).respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Cancel Sale",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-TOP",
          keyId: 2,
        },
      },
      {
        Caption: "Open register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "OPEN_CASH_DRAWER",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Cash Drawer No.": "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for opening the cash drawer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MPAYMENT-TOP",
          keyId: 3,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MSALE-BOTTOM",
    Caption: "Sales Bottom",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Go to Payment",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Payment",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-shopping-cart",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-BOTTOM",
          keyId: 1,
        },
      },
      {
        Caption: "Gift Card (menu)",
        Tooltip: "",
        Action: {
          MenuId: "GIFTCARD_SALE",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-gift",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-BOTTOM",
          keyId: 2,
        },
      },
      {
        Caption: "Lookup",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "LOOKUP",
            RequestContext: false,
            Steps: [
              {
                Label: "do_lookup",
                Code: "respond();",
              },
              {
                Label: "complete_lookup",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LocationFilter: {
              "POS Store": 0,
              "Cash Register": 1,
              "Use View": 2,
            },
            LocationFilter: 0,
            _option_LookupType: {
              Item: 0,
              Customer: 1,
              SKU: 2,
            },
            LookupType: 0,
            View: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling lookup",
            param_option_LocationFilteroriginalValue: "POS Store",
            param_option_LookupTypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-BOTTOM",
          keyId: 3,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MSALE-LEFT",
    Caption: "Sale Left",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Small Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40003",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-LEFT",
          keyId: 1,
        },
      },
      {
        Caption: "White Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40010",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-LEFT",
          keyId: 2,
        },
      },
      {
        Caption: "Lemon & Raspeberry Eclair",
        Tooltip: "",
        Action: {
          Code: "40122",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-LEFT",
          keyId: 3,
        },
      },
      {
        Caption: "Hospitality",
        Tooltip: "",
        Action: {
          MenuId: "HOSPITALITY",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-LEFT",
          keyId: 4,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "MSALE-TOP",
    Caption: "Sale Top",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Change Quantity <small>{{ sum(10) }}</small>",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "QUANTITY",
            RequestContext: false,
            Steps: [
              {
                Label: "ValidatePositiveConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Positive Quantity Only"]) && (parseFloat (data("12")) < 0)) { message (labels.MustBePositive);abort();};',
              },
              {
                Label: "ValidateNegativeConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Negative Quantity Only"]) && (parseFloat (data("12")) > 0)) { message (labels.MustBeNegative);abort();};',
              },
              {
                Label: "PromptQuantity",
                Code: 'switch(param.InputType + "") { case "0": numpad({caption: labels.QtyCaption, value: Math.abs(parseFloat(data("12")))}).cancel(abort); break; case "1": if (param.ChangeToQuantity.substring(param.ChangeToQuantity.length - 1) == "*") { param.ChangeToQuantity = param.ChangeToQuantity.substring(0,param.ChangeToQuantity.length - 1); } context.$PromptQuantity = {"numpad": param.ChangeToQuantity}; break; case "2": var qty = parseFloat(data("12")) + param.IncrementQuantity; context.$PromptQuantity = {"numpad": qty}; break; default: goto("EndOfWorkflow");}',
              },
              {
                Label: "PromptUnitPrice",
                Code: 'if ((param.PromptUnitPriceOnNegativeInput) && (param.NegativeInput ? context.$PromptQuantity.numpad * -1 < 0 : context.$PromptQuantity.numpad < 0)) { numpad({caption: labels.PriceCaption, value: data("15")})};',
              },
              {
                Label: "EndOfWorkflow",
                Code: "respond()",
              },
            ],
            Content: {},
          },
          Parameters: {
            ChangeToQuantity: "0",
            _option_Constraint: {
              "No Constraint": 0,
              "Positive Quantity Only": 1,
              "Negative Quantity Only": 2,
            },
            Constraint: 0,
            IncrementQuantity: 0,
            _option_InputType: {
              Ask: 0,
              Fixed: 1,
              Increment: 2,
            },
            InputType: 0,
            NegativeInput: false,
            PromptUnitPriceOnNegativeInput: true,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a build in function to change quantity.",
            param_option_ConstraintoriginalValue: "No Constraint",
            param_option_InputTypeoriginalValue: "Ask",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-plus-circle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-TOP",
          keyId: 1,
        },
      },
      {
        Caption: "Cancel Sales",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CANCEL_POS_SALE",
            RequestContext: true,
            Steps: [
              {
                Label: "",
                Code: "confirm(labels.title, labels.prompt).respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Cancel Sale",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-remove",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "MSALE-TOP",
          keyId: 2,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "PAYMENT-BOTTOM",
    Caption: "Payment Bottom",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Back to Sales",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Sale",
          },
        },
        BackgroundColor: "Red",
        Color: "",
        IconClass: "fi-rewind",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 1,
        },
      },
      {
        Caption: "Cash Payment",
        Tooltip: "",
        Action: {
          Code: "K",
          Parameters: {
            HideAmountDialog: false,
            HideZeroAmountDialog: false,
          },
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "fa-money",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 2,
        },
      },
      {
        Caption: "Pin Pad",
        Tooltip: "",
        Action: {
          Code: "T",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-credit-card",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 3,
        },
      },
      {
        Caption: "Create Credit Voucher",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CREDIT_GIFTVOUCHER",
            RequestContext: true,
            Steps: [
              {
                Label: "amount",
                Code: "numpad(labels.amount_title, labels.amount,context.voucher_amount).cancel(abort);",
              },
              {
                Label: "process_sale",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {},
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling return sales with Gift Vouchers",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-add",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 4,
        },
      },
      {
        Caption: "Invoice Customer ",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "InvoiceCustomer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-user",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 5,
        },
      },
      {
        Caption: "Redeem Credit Voucher",
        Tooltip: "",
        Action: {
          Code: "TG",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 8,
        },
      },
      {
        Caption: "Mobile Pay",
        Tooltip: "",
        Action: {
          Code: "MOBILEPAY",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-mobile",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 9,
        },
      },
      {
        Caption: "Redeem Gift Card (menu)",
        Tooltip: "",
        Action: {
          MenuId: "GIFTCARD_REDEEM",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-gift",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 11,
        },
      },
      {
        Caption: "Toggle Tax Free",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TAX_FREE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Operation: {
              "Sale Toggle": 0,
              "Voucher List": 1,
              "Unit List": 2,
              "Print Last": 3,
              Consolidate: 4,
            },
            Operation: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for toggling tax free before completing sale",
            param_option_OperationoriginalValue: "Sale Toggle",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-plane",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-BOTTOM",
          keyId: 12,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "PAYMENT-LEFT",
    Caption: "Payment Left",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Swedish Kroner",
        Tooltip: "",
        Action: {
          Code: "SEK",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-LEFT",
          keyId: 1,
        },
      },
      {
        Caption: "Norwegian Kroner",
        Tooltip: "",
        Action: {
          Code: "NOR",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-LEFT",
          keyId: 9,
        },
      },
      {
        Caption: "EURO",
        Tooltip: "",
        Action: {
          Code: "EURO",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-LEFT",
          keyId: 10,
        },
      },
      {
        Caption: "US Dollar",
        Tooltip: "",
        Action: {
          Code: "USD",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-LEFT",
          keyId: 11,
        },
      },
      {
        Caption: "British Pound",
        Tooltip: "",
        Action: {
          Code: "GBP",
          Parameters: {},
          Type: "Payment",
          Content: {
            Metadata: {},
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-dollar-bill",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 5,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-LEFT",
          keyId: 14,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "PAYMENT-TOP",
    Caption: "Payment Top",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Delete Line <small>{{ 10 }}</small>",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DELETE_POS_LINE",
            RequestContext: false,
            Steps: [
              {
                Label: "decl0",
                Code: "confirmtext = labels.notallowed;",
              },
              {
                Label: "decl1",
                Code: 'if (!data.isEmpty()) {confirmtext = labels.Prompt.substitute(data("10"));};',
              },
              {
                Label: "confirm",
                Code: '(param.ConfirmDialog == param.ConfirmDialog["Yes"]) ? confirm({title: labels.title, caption: confirmtext}).respond() : respond();',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_ConfirmDialog: {
              No: 0,
              Yes: 1,
            },
            ConfirmDialog: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This built in function deletes sales or payment line from the POS",
            param_option_ConfirmDialogoriginalValue: "No",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "Red",
        Color: "",
        IconClass: "fa-remove",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 1,
        },
      },
      {
        Caption: "Add. Functions (menu)",
        Tooltip: "",
        Action: {
          MenuId: "MORE_PAY_FUNC",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-th",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 2,
        },
      },
      {
        Caption: "Open Register Drawer",
        Tooltip: "REGISTER_OPEN",
        Action: {
          State: {},
          Workflow: {
            Name: "OPEN_CASH_DRAWER",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Cash Drawer No.": "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for opening the cash drawer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-inbox",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 4,
        },
      },
      {
        Caption: "Pin Pad Functions (menu)",
        Tooltip: "",
        Action: {
          MenuId: "PINPAD",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 5,
        },
      },
      {
        Caption: "Audit Roll View",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNPAGE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            PageId: 6014432,
            RunModal: false,
            TableID: 0,
            TableView: "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a page",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-list-bullet",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 7,
        },
      },
      {
        Caption: "Customer Club",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "CustomerCRM",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-group",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PAYMENT-TOP",
          keyId: 9,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "PINPAD",
    Caption: "Pin Pad Functions Menu",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "(Pepper) Aux Functions",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 2,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "Aux",
            param_option_otherCommandoriginalValue: "Activate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 1,
        },
      },
      {
        Caption: "(Pepper) Reprint",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 2,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "Aux",
            param_option_otherCommandoriginalValue: "Activate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 2,
        },
      },
      {
        Caption: "(Pepper) Open",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 0,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "Open",
            param_option_otherCommandoriginalValue: "Activate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 3,
        },
      },
      {
        Caption: "(Pepper) End of Day",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 1,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "EndOfDay",
            param_option_otherCommandoriginalValue: "Activate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 4,
        },
      },
      {
        Caption: "(Steria) Aux Functions",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {},
            auxCommand: -1,
            _option_commandId: {},
            commandId: -1,
          },
          Type: "Workflow",
          Content: {
            param_option_auxCommandoriginalValue: "StrMenu",
            param_option_commandIdoriginalValue: "Aux",
            error: "Action does not exist, but it is used in POS Menu Button [PINPAD, (Steria) Aux Functions].",
            errorSeverity: 100,
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 5,
        },
      },
      {
        Caption: "(Steria) End of Day",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {},
            auxCommand: -1,
            _option_commandId: {},
            commandId: -1,
          },
          Type: "Workflow",
          Content: {
            param_option_auxCommandoriginalValue: "StrMenu",
            param_option_commandIdoriginalValue: "EndOfDay",
            error: "Action does not exist, but it is used in POS Menu Button [PINPAD, (Steria) End of Day].",
            errorSeverity: 100,
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PINPAD",
          keyId: 6,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "PRINTS",
    Caption: "Print Function",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Print Item Price Label - Selected Line",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 1,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "Selected Line",
            param_option_PrintTypeoriginalValue: "Price",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-tags",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 8,
        },
      },
      {
        Caption: "Print Exchange Label - All Lines",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_EXCH_LABEL",
            RequestContext: true,
            Steps: [
              {
                Label: "1",
                Code: 'if ((param.Setting != param.Setting["Package"]) && (param.Setting != param.Setting["Selection"])){ datepad({ title: labels.title, caption: labels.validfrom, value: context.defaultdate, notBlank: true}, "value").respond(); };',
              },
              {
                Label: "2",
                Code: 'if ((param.Setting == param.Setting["Package"]) || (param.Setting == param.Setting["Selection"])){ calendar({caption: labels.calendar, title: labels.title, checkedByDefault: true, date: context.defaultdate, columns: [10, 12, 15] }).respond(); };',
              },
            ],
            Content: {},
          },
          Parameters: {
            PreventNegativeQty: true,
            _option_Setting: {
              Single: 0,
              "Line Quantity": 1,
              "All Lines": 2,
              Selection: 3,
              Package: 4,
            },
            Setting: 2,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for printing exchange labels.",
            param_option_SettingoriginalValue: "All Lines",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-ios-barcode",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 9,
        },
      },
      {
        Caption: "Print Exchange Label - Single",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_EXCH_LABEL",
            RequestContext: true,
            Steps: [
              {
                Label: "1",
                Code: 'if ((param.Setting != param.Setting["Package"]) && (param.Setting != param.Setting["Selection"])){ datepad({ title: labels.title, caption: labels.validfrom, value: context.defaultdate, notBlank: true}, "value").respond(); };',
              },
              {
                Label: "2",
                Code: 'if ((param.Setting == param.Setting["Package"]) || (param.Setting == param.Setting["Selection"])){ calendar({caption: labels.calendar, title: labels.title, checkedByDefault: true, date: context.defaultdate, columns: [10, 12, 15] }).respond(); };',
              },
            ],
            Content: {},
          },
          Parameters: {
            PreventNegativeQty: true,
            _option_Setting: {
              Single: 0,
              "Line Quantity": 1,
              "All Lines": 2,
              Selection: 3,
              Package: 4,
            },
            Setting: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for printing exchange labels.",
            param_option_SettingoriginalValue: "Single",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-ios-barcode",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 10,
        },
      },
      {
        Caption: "Print Exchange Label - Line Quantity",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_EXCH_LABEL",
            RequestContext: true,
            Steps: [
              {
                Label: "1",
                Code: 'if ((param.Setting != param.Setting["Package"]) && (param.Setting != param.Setting["Selection"])){ datepad({ title: labels.title, caption: labels.validfrom, value: context.defaultdate, notBlank: true}, "value").respond(); };',
              },
              {
                Label: "2",
                Code: 'if ((param.Setting == param.Setting["Package"]) || (param.Setting == param.Setting["Selection"])){ calendar({caption: labels.calendar, title: labels.title, checkedByDefault: true, date: context.defaultdate, columns: [10, 12, 15] }).respond(); };',
              },
            ],
            Content: {},
          },
          Parameters: {
            PreventNegativeQty: true,
            _option_Setting: {
              Single: 0,
              "Line Quantity": 1,
              "All Lines": 2,
              Selection: 3,
              Package: 4,
            },
            Setting: 1,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for printing exchange labels.",
            param_option_SettingoriginalValue: "Line Quantity",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-ios-barcode",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 11,
        },
      },
      {
        Caption: "Print Exchange Label - Package",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_EXCH_LABEL",
            RequestContext: true,
            Steps: [
              {
                Label: "1",
                Code: 'if ((param.Setting != param.Setting["Package"]) && (param.Setting != param.Setting["Selection"])){ datepad({ title: labels.title, caption: labels.validfrom, value: context.defaultdate, notBlank: true}, "value").respond(); };',
              },
              {
                Label: "2",
                Code: 'if ((param.Setting == param.Setting["Package"]) || (param.Setting == param.Setting["Selection"])){ calendar({caption: labels.calendar, title: labels.title, checkedByDefault: true, date: context.defaultdate, columns: [10, 12, 15] }).respond(); };',
              },
            ],
            Content: {},
          },
          Parameters: {
            PreventNegativeQty: true,
            _option_Setting: {
              Single: 0,
              "Line Quantity": 1,
              "All Lines": 2,
              Selection: 3,
              Package: 4,
            },
            Setting: 4,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for printing exchange labels.",
            param_option_SettingoriginalValue: "Package",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-ios-barcode",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 12,
        },
      },
      {
        Caption: "Print Receipt - Last",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Last Receipt",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 13,
        },
      },
      {
        Caption: "Print Receipt - Last (Large)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Last Receipt Large",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 14,
        },
      },
      {
        Caption: "Print Receipt - Choose",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Choose Receipt",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 15,
        },
      },
      {
        Caption: "Print Receipt - Choose (Large)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Choose Receipt Large",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 16,
        },
      },
      {
        Caption: "Print Item Price Label - All Lines",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 0,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "All Lines",
            param_option_PrintTypeoriginalValue: "Price",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-tags",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 17,
        },
      },
      {
        Caption: "Print Item Shelf Label - Selected Line",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 1,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 1,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "Selected Line",
            param_option_PrintTypeoriginalValue: "Shelf",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 18,
        },
      },
      {
        Caption: "Print Item Shelf Label - All Lines",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 0,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 1,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "All Lines",
            param_option_PrintTypeoriginalValue: "Shelf",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 4,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 19,
        },
      },
      {
        Caption: "Print Item Sign Report - Selected Line",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 1,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 2,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "Selected Line",
            param_option_PrintTypeoriginalValue: "Sign",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-printer",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 20,
        },
      },
      {
        Caption: "Print Item Sign Report - All Lines",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_ITEM",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: 'if (param.LineSetting == param.LineSetting["Selected Line"]) { intpad({ title: labels.title, caption: labels.caption, value: 1, notBlank: true}, "value").respond() } else { respond() };',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_LineSetting: {
              "All Lines": 0,
              "Selected Line": 1,
            },
            LineSetting: 0,
            _option_PrintType: {
              Price: 0,
              Shelf: 1,
              Sign: 2,
            },
            PrintType: 2,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Print item-based prints.",
            param_option_LineSettingoriginalValue: "All Lines",
            param_option_PrintTypeoriginalValue: "Sign",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-printer",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 5,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "PRINTS",
          keyId: 21,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "RECEIVABLES",
    Caption: "Customer Receivables",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Select Invoice(s) (Apply Payment)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "ApplyPaymentToInvoices",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-multiple",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RECEIVABLES",
          keyId: 2,
        },
      },
      {
        Caption: "Select Invoice",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 4,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "BalanceInvoice",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RECEIVABLES",
          keyId: 5,
        },
      },
      {
        Caption: "Customer Deposit",
        Tooltip: "INSERT_PAYMENT_CASH",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 5,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "DepositAmount",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-money",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RECEIVABLES",
          keyId: 6,
        },
      },
      {
        Caption: "Customer Current Sub-Total",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RECEIVABLES",
            RequestContext: false,
            Steps: [
              {
                Label: "SelectCustomer",
                Code: "respond();",
              },
              {
                Label: "ExtDocNo",
                Code: "(!context.skipReference) && (param.AskExtDocNo) && input(labels.ExtDocNo);",
              },
              {
                Label: "Attention",
                Code: "(!context.skipReference) && (param.AskAttention) && input(labels.Attention);",
              },
              {
                Label: "SetReference",
                Code: "if (!context.skipReference) { respond(); }",
              },
              {
                Label: "InvoiceNo",
                Code: 'if (param.Type == 4) { if (param.InvoiceLookup == 0) { input(labels.InvoiceNo).respond("InvoiceNo"); } else { respond(); }}',
              },
              {
                Label: "Deposit",
                Code: "(param.Type == 5) && numpad(labels.Amount).cancel(abort);",
              },
              {
                Label: "ProcessSalesDoc",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: true,
            AskExtDocNo: true,
            CustLedgerEntryView: "",
            customerlookuppageno: 0,
            customerNo: "",
            customerview: "",
            _option_InvoiceLookup: {
              Text: 0,
              List: 1,
            },
            InvoiceLookup: 0,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
            _option_Type: {
              SelectCustomer: 0,
              ClearCustomer: 1,
              InvoiceCustomer: 2,
              ApplyPaymentToInvoices: 3,
              BalanceInvoice: 4,
              DepositAmount: 5,
              DepositCurrentSubtotal: 6,
              SearchCustomerName: 7,
            },
            Type: 6,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function handles customer receivables from the POS.",
            param_option_InvoiceLookuporiginalValue: "Text",
            param_option_SecurityoriginalValue: "None",
            param_option_TypeoriginalValue: "DepositCurrentSubtotal",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-money",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RECEIVABLES",
          keyId: 7,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "RETAIL_DOCUMENT",
    Caption: "Retail Document",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Create Retail Document",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 7,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "NPOrderSend",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ti-bookmark-alt",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RETAIL_DOCUMENT",
          keyId: 1,
        },
      },
      {
        Caption: "Retrieve Retail Order",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTOMERINFO",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_CustomerType: {
              CustomerSTD: 0,
              CustomerInfo: 1,
              DebitInfo: 2,
              CustomerCRM: 3,
              CustomerILE: 4,
              CustomerRemove: 5,
              RepairSend: 6,
              NPOrderSend: 7,
              NPOrderGet: 8,
              CustomerPay: 9,
              SamplingGet: 10,
              SamplingSend: 11,
            },
            CustomerType: 8,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for handling Customer Info",
            param_option_CustomerTypeoriginalValue: "NPOrderGet",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ti-bookmark",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RETAIL_DOCUMENT",
          keyId: 2,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "RETURN",
    Caption: "ReturnSales",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Cash Sales Reverse",
        Tooltip: "SALE_REVERSE",
        Action: {
          State: {},
          Workflow: {
            Name: "REVERSE_SALE",
            RequestContext: true,
            Steps: [
              {
                Label: "receipt",
                Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
              },
              {
                Label: "reason",
                Code: "context.PromptForReason && respond();",
              },
              {
                Label: "handle",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_ItemCondition: {
              Mint: 0,
              Used: 1,
              "Not Suitable for Resale": 2,
            },
            ItemCondition: 1,
            _option_ObfucationMethod: {
              None: 0,
              MI: 1,
            },
            ObfucationMethod: 0,
          },
          Type: "Workflow",
          Content: {
            Description:
              "Refund / Reverse Sale. This action will prompt for a receipt no and recreate the sales with reversed quantity.",
            param_option_ItemConditionoriginalValue: "Used",
            param_option_ObfucationMethodoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RETURN",
          keyId: 2,
        },
      },
      {
        Caption: "Sales Return Orders",
        Tooltip: "SALE_ANNULL",
        Action: {
          State: {},
          Workflow: {
            Name: "SALEANNULL",
            RequestContext: true,
            Steps: [
              {
                Label: "ReceiptNumber",
                Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DocumentType: {
              CreditMemo: 0,
              ReturnOrder: 1,
            },
            DocumentType: 1,
            _option_ObfucationMethod: {
              None: 0,
              MI: 1,
            },
            ObfucationMethod: 0,
          },
          Type: "Workflow",
          Content: {
            Description: " This action will prompt for a receipt no and annul the sale.",
            param_option_DocumentTypeoriginalValue: "ReturnOrder",
            param_option_ObfucationMethodoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RETURN",
          keyId: 4,
        },
      },
      {
        Caption: "Sales Credit Memos",
        Tooltip: "SALE_ANNULL",
        Action: {
          State: {},
          Workflow: {
            Name: "SALEANNULL",
            RequestContext: true,
            Steps: [
              {
                Label: "ReceiptNumber",
                Code: "input(labels.title, labels.receiptprompt).respond().cancel(abort);",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DocumentType: {
              CreditMemo: 0,
              ReturnOrder: 1,
            },
            DocumentType: 0,
            _option_ObfucationMethod: {
              None: 0,
              MI: 1,
            },
            ObfucationMethod: 0,
          },
          Type: "Workflow",
          Content: {
            Description: " This action will prompt for a receipt no and annul the sale.",
            param_option_DocumentTypeoriginalValue: "CreditMemo",
            param_option_ObfucationMethodoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "RETURN",
          keyId: 5,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SALE-BOTTOM",
    Caption: "Sale Bottom",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: `Go to payment <small>{{ format(sum(31)) }}</small>`,
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Payment",
          },
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "fa-shopping-cart",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 1,
        },
      },
      {
        Caption: "Hospitality",
        Tooltip: "",
        Action: {
          MenuId: "HOSPITALITY",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "fa-utensils-alt",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 6,
        },
      },
      {
        Caption: "Open Register Drawer",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "OPEN_CASH_DRAWER",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Cash Drawer No.": "",
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for opening the cash drawer",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-inbox",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 8,
        },
      },
      {
        Caption: "Park Sale",
        Tooltip: "SALE_SAVE",
        Action: {
          State: {},
          Workflow: {
            Name: "SAVE_AS_POS_QUOTE",
            RequestContext: false,
            Steps: [
              {
                Label: "confirm_save_as_quote",
                Code: 'if (param.ConfirmBeforeSave) {confirm(labels["ConfirmLabel"], param.ConfirmText, true, true).no(abort);}',
              },
              {
                Label: "save_as_quote",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            ConfirmBeforeSave: true,
            ConfirmText: "Save current Sale as POS Quote?",
            FullBackup: false,
            PrintAfterSave: false,
            PrintTemplate: "",
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Save POS Sale as POS Quote",
            dataSource: "BUILTIN_SALELINE",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-save",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 10,
        },
      },
      {
        Caption: "Retrieve Parked Sale",
        Tooltip: "GET_SALE",
        Action: {
          State: {},
          Workflow: {
            Name: "LOAD_FROM_POS_QUOTE",
            RequestContext: false,
            Steps: [
              {
                Label: "select_quote",
                Code: 'switch("" + param.QuoteInputType) { case "0": intpad({title: labels.SalesTicketNo, caption: labels.SalesTicketNo}).respond("SalesTicketNo").cancel(abort); break; case "1": respond(); break; case "2": input({title: labels.SalesTicketNo, caption: labels.SalesTicketNo, notBlank: true}).respond("SalesTicketNo").cancel(abort); break;}',
              },
              {
                Label: "preview",
                Code: "if (param.PreviewBeforeLoad) { respond(); }",
              },
              {
                Label: "load_from_quote",
                Code: "if (context.quote_entry_no) { respond(); }",
              },
            ],
            Content: {},
          },
          Parameters: {
            PreviewBeforeLoad: true,
            _option_QuoteInputType: {
              IntPad: 0,
              List: 1,
              Input: 2,
            },
            QuoteInputType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Load POS Sale from POS Quote",
            param_option_QuoteInputTypeoriginalValue: "IntPad",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-suitcase",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 11,
        },
      },
      {
        Caption: "Gift Card (menu)",
        Tooltip: "",
        Action: {
          MenuId: "GIFTCARD_SALE",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-gift",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 13,
        },
      },
      {
        Caption: "(Pepper) Open",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 0,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "Open",
            param_option_otherCommandoriginalValue: "Deactivate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-credit-card",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 15,
        },
      },
      {
        Caption: "Lookup",
        Tooltip: "",
        Action: null,
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-binoculars",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [
          {
            Caption: "Lookup (All Items)",
            Tooltip: "LOOKUP",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 0,
                View: "",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "Item",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "fa-binoculars",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 9,
            },
          },
          {
            Caption: "Item Lookup Per SKU",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 2,
                View: "",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "SKU",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 1,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 17,
            },
          },
          {
            Caption: "Item Lookup For Items with Ivn. Pt Grp. SHOP",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 0,
                View: "SORTING(Description) ORDER(Ascending) WHERE(Inventory Posting Group=FILTER(SHOP))",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "Item",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 18,
            },
          },
          {
            Caption: "Item Lookup For Cafe Items",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 0,
                View: "SORTING(Description) ORDER(Ascending) WHERE(Item Group=FILTER(10..103))",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "Item",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 1,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 19,
            },
          },
          {
            Caption: "Item Lookup For Bags",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 0,
                View: "SORTING(Description) ORDER(Ascending) WHERE(Description=FILTER(@*Bag*))",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "Item",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 3,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 20,
            },
          },
          {
            Caption: "Item Lookup For Items Less than DK25",
            Tooltip: "",
            Action: {
              State: {},
              Workflow: {
                Name: "LOOKUP",
                RequestContext: false,
                Steps: [
                  {
                    Label: "do_lookup",
                    Code: "respond();",
                  },
                  {
                    Label: "complete_lookup",
                    Code: "respond();",
                  },
                ],
                Content: {},
              },
              Parameters: {
                _option_LocationFilter: {
                  "POS Store": 0,
                  "Cash Register": 1,
                  "Use View": 2,
                },
                LocationFilter: 0,
                _option_LookupType: {
                  Item: 0,
                  Customer: 1,
                  SKU: 2,
                },
                LookupType: 0,
                View: "SORTING(Description) ORDER(Ascending) WHERE(Unit Price=FILTER(>0&<25))",
              },
              Type: "Workflow",
              Content: {
                Description: "This is a built in function for handling lookup",
                param_option_LocationFilteroriginalValue: "POS Store",
                param_option_LookupTypeoriginalValue: "Item",
              },
            },
            BackgroundColor: "",
            Color: "",
            IconClass: "",
            Class: "",
            Bold: false,
            FontSize: 2,
            Row: 2,
            Column: 2,
            Enabled: 0,
            MenuButtons: [],
            Content: {
              keyMenu: "SALE-BOTTOM",
              keyId: 21,
            },
          },
        ],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 16,
        },
      },
      {
        Caption: "Customer (menu)",
        Tooltip: "",
        Action: {
          MenuId: "CUSTOMER",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-folder-user",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-BOTTOM",
          keyId: 22,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SALE-CTRL",
    Caption: "Main Control",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Logout",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CHANGE_VIEW",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            ViewCode: "",
            _option_ViewType: {
              Login: 0,
              Sale: 1,
              Payment: 2,
              Balance: 3,
              Locked: 4,
            },
            ViewType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Changes the current view.",
            param_option_ViewTypeoriginalValue: "Login",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-eject",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-CTRL",
          keyId: 1,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SALE-LEFT",
    Caption: "Development mock menu - left",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Small Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40003",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug-empty",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 33,
        },
      },
      {
        Caption: "Large Draft Beer",
        Tooltip: "",
        Action: {
          Code: "40004",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-beer-mug",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 34,
        },
      },
      {
        Caption: "White Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40010",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-champagne-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 37,
        },
      },
      {
        Caption: "Red Wine Glass",
        Tooltip: "",
        Action: {
          Code: "40013",
          Parameters: {
            _option_Type: {},
            Type: -1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_TypeoriginalValue: "Item",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-glass",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "DEV-DESKTOP-LEFT",
          keyId: 38,
        },
      },
      {
        Caption: "Red Wine Regular Bottle",
        Tooltip: "",
        Action: {
          Code: "40015",
          Parameters: {
            _option_itemIdentifyerType: {
              ItemNo: 0,
              ItemCrossReference: 1,
              ItemSearch: 2,
            },
            itemIdentifyerType: 0,
            itemNo: "",
            itemQuantity: 1,
          },
          Type: "Item",
          Content: {
            Metadata: {},
            param_option_itemIdentifyerTypeoriginalValue: "ItemNo",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-wine-bottle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-LEFT",
          keyId: 45,
        },
      },
      {
        Caption: `Popup - numpad`,
        Tooltip: "Show a numpad dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-01",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.numpad({ title: "We need some numbers", caption: "How many decimals of pi do you know?" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-dots",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - confirm`,
        Tooltip: "Show a confirm dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-02",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.confirm({ title: "Can you make up your mind?", caption: "Do you know how to make up your mind at this decisive moment?" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-question",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - error`,
        Tooltip: "Show an error dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-03",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.error({ title: "Oh, no!", caption: "Something went wrong. It's your fault, you miserable piece of crap you!" });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-exclamation",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - input`,
        Tooltip: "Show an input dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-04",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.input({ title: "Tell me something...", caption: "Spill your guts, tell me what you know!", required: true });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-pen",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - configuration`,
        Tooltip: "Show a configuration dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-05",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                const result = await popup.configuration({
                                    caption: "Please, specify the following configuration settings", 
                                    title: "Item configuration",
                                    settings: [
                                        {
                                            caption: "Burger configuration",
                                            type: "group",
                                            expanded: true,
                                            settings: [
                                                {
                                                    type: "plusminus",
                                                    id: "burgers",
                                                    caption: "Burgers",
                                                    minValue: 1,
                                                    maxValue: 4,
                                                    value: 8
                                                },
                                                {
                                                    type: "switch",
                                                    id: "xl",
                                                    caption: "Extra large"
                                                },
                                                {
                                                    type: "switch",
                                                    id: "cheese",
                                                    caption: "Slice of cheese",
                                                    value: true
                                                }
                                            ]
                                        },
                                        {
                                            caption: "Sauces",
                                            type: "group",
                                            settings: [
                                                {
                                                    type: "plusminus",
                                                    id: "ketchup",
                                                    caption: "Ketchup",
                                                    value: 1
                                                },
                                                {
                                                    type: "plusminus",
                                                    id: "mayo",
                                                    caption: "Mayonnaise",
                                                    value: 0
                                                },
                                                {
                                                    type: "radio",
                                                    id: "sauce",
                                                    caption: "Special sauce",
                                                    options: [
                                                        { caption: "None", value: "none" },
                                                        { caption: "Barbecue", value: "bbq" },
                                                        { caption: "Bernaise", value: "bernaise" },
                                                        { caption: "Mushroom", value: "mushroom" }
                                                    ]
                                                }
                                            ]
                                        },
                                        {
                                            type: "switch",
                                            id: "takeaway",
                                            caption: "To take away"                                            
                                        },
                                        {
                                            type: "plusminus",
                                            id: "napkins",
                                            caption: "Extra napkins",
                                            minValue: 1,
                                            maxValue: 10
                                        },
                                        {
                                            type: "text",
                                            id: "text_value",
                                            caption: "Enter some text"
                                        },
                                        {
                                            type: "decimal",
                                            id: "decimal_value",
                                            caption: "Enter a decimal number"
                                        },
                                        {
                                            type: "integer",
                                            id: "integer_value",
                                            caption: "Enter an integer number"
                                        }
                                    ]
                                }
                                );
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-code",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - numpad (min/max)`,
        Tooltip: "Show a numpad dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-06",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.numpad({ title: "We need some numbers", caption: "How many decimals of pi do you know?", value: 5, minValue: 5, maxValue: 10 });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-dots",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Popup - simple payment`,
        Tooltip: "Shows a payment dialog",
        Action: {
          State: {},
          Workflow: {
            Name: "DEV-MENU-DIALOG-07",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `
                                    var data = popup.simplePayment({ caption: "Denne skal blive pa dansk." });
                                `,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-message-dollar",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Model - Proof of Concept`,
        Tooltip: "Runs a model workflow",
        Action: {
          State: {},
          Workflow: {
            Name: "SHOW_MODEL_TEST",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `workflow.respond("");`,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {},
        },
        BackgroundColor: "indigo",
        Color: "",
        IconClass: "fa-window",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: "Restaurant View",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "REST_VIEW",
            RequestContext: false,
            Steps: [
              {
                Label: null,
                Code: `workflow.respond();`,
              },
            ],
            Content: {
              engineVersion: "2.0",
            },
          },
          Parameters: {},
          Type: "Workflow",
          Content: {
            Description: "This is a mock function to show NPRE screen",
          },
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "fa-fork-knife",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
    ],
  },
  {
    Id: "SALES_ORDER",
    Caption: "Sales Order Menu",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Create Order (Open Status)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTSALEDOCEXP",
            RequestContext: true,
            Steps: [
              {
                Label: "extdocno",
                Code: "(param.AskExtDocNo) && input (labels.ExtDocNo).cancel (abort);",
              },
              {
                Label: "attention",
                Code: "(param.AskAttention) && input (labels.Attention).cancel (abort);",
              },
              {
                Label: "startDocumentManager",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: false,
            AskExtDocNo: false,
            InitNewSaleOnDone: true,
            OpenSalesDoc: true,
            ProcessPOSSale: true,
            Reset: true,
            SetAsk: false,
            SetAutoReserveSalesLine: false,
            SetCustomer: true,
            _option_SetDocumentType: {
              Order: 0,
              Invoice: 1,
              ReturnOrder: 2,
              CreditMemo: 3,
              Quote: 4,
            },
            SetDocumentType: 0,
            SetFinishSale: true,
            SetInvoice: false,
            _option_SetOrderType: {
              NotSet: 0,
              Order: 1,
              Lending: 2,
            },
            SetOrderType: 0,
            SetOutputCodeunit: 0,
            SetPost: false,
            SetPrint: false,
            SetReceive: false,
            SetReturnAmountPercentage: 100,
            SetSendPdf2Nav: false,
            SetShip: false,
            SetShowCreationMessage: true,
            SetShowDepositDialog: true,
            SetTransferDimensions: false,
            SetTransferPaymentMethod: false,
            SetTransferPostingSetup: true,
            SetTransferSalesperson: false,
            SetTransferTaxSetup: false,
            SetTransferTransactiondata: false,
            SetWriteInAuditRoll: true,
            TestSalePOS: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales document export",
            param_option_SetDocumentTypeoriginalValue: "Order",
            param_option_SetOrderTypeoriginalValue: "NotSet",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALES_ORDER",
          keyId: 1,
        },
      },
      {
        Caption: "Retrieve Order (Open Sales Order)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTSALEDOCIMP",
            RequestContext: true,
            Steps: [
              {
                Label: "startDocumentManager",
                Code: "respond();",
              },
              {
                Label: "doneDocumentManager",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            DeleteSalesDocAfterImport: true,
            SalesDocumentAmountToPOS: false,
            SalesDocumentToPOS: true,
            SetConfirmDelete: false,
            _option_SetDocumentType: {
              Quote: 0,
              Order: 1,
              Invoice: 2,
              CreditMemo: 3,
              BlanketOrder: 4,
              ReturnOrder: 5,
            },
            SetDocumentType: 1,
            _option_SetOrderType: {
              NotSet: 0,
              Order: 1,
              Lending: 2,
            },
            SetOrderType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales document import to POS",
            param_option_SetDocumentTypeoriginalValue: "Order",
            param_option_SetOrderTypeoriginalValue: "NotSet",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALES_ORDER",
          keyId: 2,
        },
      },
      {
        Caption: "Create Order (Release Status)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTSALEDOCEXP",
            RequestContext: true,
            Steps: [
              {
                Label: "extdocno",
                Code: "(param.AskExtDocNo) && input (labels.ExtDocNo).cancel (abort);",
              },
              {
                Label: "attention",
                Code: "(param.AskAttention) && input (labels.Attention).cancel (abort);",
              },
              {
                Label: "startDocumentManager",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: false,
            AskExtDocNo: false,
            InitNewSaleOnDone: true,
            OpenSalesDoc: true,
            ProcessPOSSale: true,
            Reset: true,
            SetAsk: false,
            SetAutoReserveSalesLine: false,
            SetCustomer: true,
            _option_SetDocumentType: {
              Order: 0,
              Invoice: 1,
              ReturnOrder: 2,
              CreditMemo: 3,
              Quote: 4,
            },
            SetDocumentType: 0,
            SetFinishSale: true,
            SetInvoice: false,
            _option_SetOrderType: {
              NotSet: 0,
              Order: 1,
              Lending: 2,
            },
            SetOrderType: 0,
            SetOutputCodeunit: 0,
            SetPost: false,
            SetPrint: false,
            SetReceive: false,
            SetReturnAmountPercentage: 100,
            SetSendPdf2Nav: false,
            SetShip: true,
            SetShowCreationMessage: false,
            SetShowDepositDialog: false,
            SetTransferDimensions: false,
            SetTransferPaymentMethod: false,
            SetTransferPostingSetup: true,
            SetTransferSalesperson: false,
            SetTransferTaxSetup: false,
            SetTransferTransactiondata: false,
            SetWriteInAuditRoll: true,
            TestSalePOS: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales document export",
            param_option_SetDocumentTypeoriginalValue: "Order",
            param_option_SetOrderTypeoriginalValue: "NotSet",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALES_ORDER",
          keyId: 3,
        },
      },
      {
        Caption: "Create Order with Reservation",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "CUSTSALEDOCEXP",
            RequestContext: true,
            Steps: [
              {
                Label: "extdocno",
                Code: "(param.AskExtDocNo) && input (labels.ExtDocNo).cancel (abort);",
              },
              {
                Label: "attention",
                Code: "(param.AskAttention) && input (labels.Attention).cancel (abort);",
              },
              {
                Label: "startDocumentManager",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            AskAttention: false,
            AskExtDocNo: false,
            InitNewSaleOnDone: true,
            OpenSalesDoc: true,
            ProcessPOSSale: true,
            Reset: true,
            SetAsk: false,
            SetAutoReserveSalesLine: true,
            SetCustomer: true,
            _option_SetDocumentType: {
              Order: 0,
              Invoice: 1,
              ReturnOrder: 2,
              CreditMemo: 3,
              Quote: 4,
            },
            SetDocumentType: 0,
            SetFinishSale: true,
            SetInvoice: false,
            _option_SetOrderType: {
              NotSet: 0,
              Order: 1,
              Lending: 2,
            },
            SetOrderType: 0,
            SetOutputCodeunit: 0,
            SetPost: false,
            SetPrint: false,
            SetReceive: false,
            SetReturnAmountPercentage: 100,
            SetSendPdf2Nav: false,
            SetShip: false,
            SetShowCreationMessage: false,
            SetShowDepositDialog: false,
            SetTransferDimensions: false,
            SetTransferPaymentMethod: false,
            SetTransferPostingSetup: true,
            SetTransferSalesperson: false,
            SetTransferTaxSetup: false,
            SetTransferTransactiondata: false,
            SetWriteInAuditRoll: true,
            TestSalePOS: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built in function for handling sales document export",
            param_option_SetDocumentTypeoriginalValue: "Order",
            param_option_SetOrderTypeoriginalValue: "NotSet",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALES_ORDER",
          keyId: 4,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SALE-TOP",
    Caption: "Sale Top",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Discount (menu)",
        Tooltip: "",
        Action: {
          MenuId: "DISCOUNT",
          OpenAsPopup: true,
          Parameters: {
            _option_DiscountType: {
              TotalAmount: 0,
              TotalDiscountAmount: 1,
              DiscountPercentABS: 2,
              DiscountPercentREL: 3,
              LineAmount: 4,
              LineDiscountAmount: 5,
              LineDiscountPercentABS: 6,
              LineDiscountPercentREL: 7,
              LineUnitPrice: 8,
              ClearLineDiscount: 9,
              ClearTotalDiscount: 10,
              DiscountPercentExtra: 11,
              LineDiscountPercentExtra: 12,
            },
            DiscountType: -1,
            FixedDiscountNumber: 0,
            FixedReasonCode: "",
            LookupReasonCode: false,
          },
          Type: "Menu",
          Content: {
            param_option_DiscountTypeoriginalValue: "TotalDiscount",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 1,
        },
      },
      {
        Caption: `Change Quantity <small>{{ 10 }}</small>`,
        Tooltip: "Increase quantity of item on sale line",
        Action: {
          State: {},
          Workflow: {
            Name: "QUANTITY",
            RequestContext: false,
            Steps: [
              {
                Label: "ValidatePositiveConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Positive Quantity Only"]) && (parseFloat (data("12")) < 0)) { message (labels.MustBePositive);abort();};',
              },
              {
                Label: "ValidateNegativeConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Negative Quantity Only"]) && (parseFloat (data("12")) > 0)) { message (labels.MustBeNegative);abort();};',
              },
              {
                Label: "PromptQuantity",
                Code: 'switch(param.InputType + "") { case "0": numpad({caption: labels.QtyCaption, value: Math.abs(parseFloat(data("12")))}).cancel(abort); break; case "1": if (param.ChangeToQuantity.substring(param.ChangeToQuantity.length - 1) == "*") { param.ChangeToQuantity = param.ChangeToQuantity.substring(0,param.ChangeToQuantity.length - 1); } context.$PromptQuantity = {"numpad": param.ChangeToQuantity}; break; case "2": var qty = parseFloat(data("12")) + param.IncrementQuantity; context.$PromptQuantity = {"numpad": qty}; break; default: goto("EndOfWorkflow");}',
              },
              {
                Label: "PromptUnitPrice",
                Code: 'if ((param.PromptUnitPriceOnNegativeInput) && (param.NegativeInput ? context.$PromptQuantity.numpad * -1 < 0 : context.$PromptQuantity.numpad < 0)) { numpad({caption: labels.PriceCaption, value: data("15")})};',
              },
              {
                Label: "EndOfWorkflow",
                Code: "respond()",
              },
            ],
            Content: {},
          },
          Parameters: {
            ChangeToQuantity: "0",
            _option_Constraint: {
              "No Constraint": 0,
              "Positive Quantity Only": 1,
              "Negative Quantity Only": 2,
            },
            Constraint: 0,
            IncrementQuantity: 0,
            _option_InputType: {
              Ask: 0,
              Fixed: 1,
              Increment: 2,
            },
            InputType: 0,
            NegativeInput: false,
            PromptUnitPriceOnNegativeInput: true,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a build in function to change quantity.",
            param_option_ConstraintoriginalValue: "No Constraint",
            param_option_InputTypeoriginalValue: "Ask",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-plus-circle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 7,
        },
      },
      {
        Caption: `Delete Line <small>{{ currentRow(10).toUpperCase() }}</small>`,
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "DELETE_POS_LINE",
            RequestContext: false,
            Steps: [
              {
                Label: "decl0",
                Code: "confirmtext = labels.notallowed;",
              },
              {
                Label: "decl1",
                Code: 'if (!data.isEmpty()) {confirmtext = labels.Prompt.substitute(data("10"));};',
              },
              {
                Label: "confirm",
                Code: '(param.ConfirmDialog == param.ConfirmDialog["Yes"]) ? confirm({title: labels.title, caption: confirmtext}).respond() : respond();',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_ConfirmDialog: {
              No: 0,
              Yes: 1,
            },
            ConfirmDialog: 1,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This built in function deletes sales or payment line from the POS",
            param_option_ConfirmDialogoriginalValue: "No",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "dark-red",
        Color: "",
        IconClass: "fa-remove",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 11,
        },
      },
      {
        Caption: "Return <small>{{ 10 }}</small>",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "QUANTITY",
            RequestContext: false,
            Steps: [
              {
                Label: "ValidatePositiveConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Positive Quantity Only"]) && (parseFloat (data("12")) < 0)) { message (labels.MustBePositive);abort();};',
              },
              {
                Label: "ValidateNegativeConstraint",
                Code: 'if ((param.Constraint == param.Constraint["Negative Quantity Only"]) && (parseFloat (data("12")) > 0)) { message (labels.MustBeNegative);abort();};',
              },
              {
                Label: "PromptQuantity",
                Code: 'switch(param.InputType + "") { case "0": numpad({caption: labels.QtyCaption, value: Math.abs(parseFloat(data("12")))}).cancel(abort); break; case "1": if (param.ChangeToQuantity.substring(param.ChangeToQuantity.length - 1) == "*") { param.ChangeToQuantity = param.ChangeToQuantity.substring(0,param.ChangeToQuantity.length - 1); } context.$PromptQuantity = {"numpad": param.ChangeToQuantity}; break; case "2": var qty = parseFloat(data("12")) + param.IncrementQuantity; context.$PromptQuantity = {"numpad": qty}; break; default: goto("EndOfWorkflow");}',
              },
              {
                Label: "PromptUnitPrice",
                Code: 'if ((param.PromptUnitPriceOnNegativeInput) && (param.NegativeInput ? context.$PromptQuantity.numpad * -1 < 0 : context.$PromptQuantity.numpad < 0)) { numpad({caption: labels.PriceCaption, value: data("15")})};',
              },
              {
                Label: "EndOfWorkflow",
                Code: "respond()",
              },
            ],
            Content: {},
          },
          Parameters: {
            ChangeToQuantity: "0",
            _option_Constraint: {
              "No Constraint": 0,
              "Positive Quantity Only": 1,
              "Negative Quantity Only": 2,
            },
            Constraint: 0,
            IncrementQuantity: 0,
            _option_InputType: {
              Ask: 0,
              Fixed: 1,
              Increment: 2,
            },
            InputType: 0,
            NegativeInput: false,
            PromptUnitPriceOnNegativeInput: true,
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a build in function to change quantity.",
            param_option_ConstraintoriginalValue: "No Constraint",
            param_option_InputTypeoriginalValue: "Ask",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-minus-circle",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 1,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 12,
        },
      },
      {
        Caption: "Cancel Sale",
        Tooltip: "Cancel the current sale",
        Action: {
          State: {},
          Workflow: {
            Name: "CANCEL_POS_SALE",
            RequestContext: true,
            Steps: [
              {
                Label: "",
                Code: "confirm(labels.title, labels.prompt).respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Security: {
              None: 0,
              SalespersonPassword: 1,
              CurrentSalespersonPassword: 2,
              SupervisorPassword: 3,
            },
            Security: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "Cancel Sale",
            param_option_SecurityoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-undo",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 13,
        },
      },
      {
        Caption: "Other Functions (menu)",
        Tooltip: "",
        Action: {
          MenuId: "MORE_SALE_FUNC",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-grid",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SALE-TOP",
          keyId: 16,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "STATISTICS",
    Caption: "Statistics",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Turnover Report",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SALES_STATISTICS",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_StatisticType: {
              Report: 0,
              Sale: 1,
              Statistics: 2,
            },
            StatisticType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function reports on various turnover statistics",
            param_option_StatisticTypeoriginalValue: "Report",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 1,
        },
      },
      {
        Caption: "Turnover Sale",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SALES_STATISTICS",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_StatisticType: {
              Report: 0,
              Sale: 1,
              Statistics: 2,
            },
            StatisticType: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function reports on various turnover statistics",
            param_option_StatisticTypeoriginalValue: "Sale",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 2,
        },
      },
      {
        Caption: "Turnover Statistics",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SALES_STATISTICS",
            RequestContext: false,
            Steps: [
              {
                Label: "",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_StatisticType: {
              Report: 0,
              Sale: 1,
              Statistics: 2,
            },
            StatisticType: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This built in function reports on various turnover statistics",
            param_option_StatisticTypeoriginalValue: "Statistics",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 3,
        },
      },
      {
        Caption: "Sales Pr. Week Year / Last Year",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNREPORT",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Record: {
              None: 0,
              "Sale Line": 1,
              "Sale Header": 2,
            },
            Record: 0,
            ReportId: 6014456,
            RequestPage: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a report",
            param_option_RecordoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 5,
        },
      },
      {
        Caption: "Sales Top 20",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNREPORT",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Record: {
              None: 0,
              "Sale Line": 1,
              "Sale Header": 2,
            },
            Record: 0,
            ReportId: 6014406,
            RequestPage: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a report",
            param_option_RecordoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 6,
        },
      },
      {
        Caption: "Time Report",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "RUNREPORT",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Record: {
              None: 0,
              "Sale Line": 1,
              "Sale Header": 2,
            },
            Record: 0,
            ReportId: 6014411,
            RequestPage: false,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for running a report",
            param_option_RecordoriginalValue: "None",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "STATISTICS",
          keyId: 7,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SYSTEM_MENU_LEFT",
    Caption: "System Menu ",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "(Pepper) Install",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PEPPER_TERMINAL",
            RequestContext: false,
            Steps: [
              {
                Label: "EFT_dowork",
                Code: "respond();",
              },
              {
                Label: "EFT_wait",
                Code: "respond();",
              },
              {
                Label: "EFT_checkresult",
                Code: "respond();",
              },
              {
                Label: "done",
                Code: "",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_auxCommand: {
              StrMenu: 0,
              Abort: 1,
              "PAN Suppression ON": 2,
              "PAN Suppression OFF": 3,
              "Custom Menu": 4,
              "Ticket Reprint": 5,
              "Summary Report": 6,
              Diagnostics: 7,
              "System Info": 8,
              "Display with Num Input": 9,
              "TINA Activation": 10,
              "TINA Query": 11,
              "Show Custom Menu": 12,
            },
            auxCommand: 5,
            _option_commandId: {
              Open: 0,
              EndOfDay: 1,
              Aux: 2,
              Install: 3,
              Other: 4,
            },
            commandId: 3,
            _option_otherCommand: {
              StrMenu: 0,
              "Activate Offline Mode": 1,
              "Deactivate Offline Mode": 2,
            },
            otherCommand: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This command sends different commands to the Pin Pad. Specify command using the Parameters.",
            param_option_auxCommandoriginalValue: "Ticket Reprint",
            param_option_commandIdoriginalValue: "Install",
            param_option_otherCommandoriginalValue: "Activate Offline Mode",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_LEFT",
          keyId: 5,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "SYSTEM_MENU_RIGHT",
    Caption: "Function Menu ",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Print Receipt - Last",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Last Receipt",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_RIGHT",
          keyId: 1,
        },
      },
      {
        Caption: "Print Receipt - Last (Large)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Last Receipt Large",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_RIGHT",
          keyId: 2,
        },
      },
      {
        Caption: "Print Receipt - Choose",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "PRINT_RECEIPT",
            RequestContext: false,
            Steps: [],
            Content: {},
          },
          Parameters: {
            "Print Credit Voucher": false,
            "Print Memberships": false,
            "Print Terminal Receipt": false,
            "Print Tickets": false,
            _option_Setting: {
              "Last Receipt": 0,
              "Last Receipt Large": 1,
              "Choose Receipt": 2,
              "Choose Receipt Large": 3,
              "Last Receipt and Balance": 4,
              "Last Receipt and Balance Large": 5,
              "Last Balance": 6,
              "Last Balance Large": 7,
            },
            Setting: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This is a built-in action for printing a receipt for the current or selected transaction.",
            param_option_SettingoriginalValue: "Choose Receipt",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_RIGHT",
          keyId: 3,
        },
      },
      {
        Caption: "Pin Pad Functions Menu",
        Tooltip: "",
        Action: {
          MenuId: "PINPAD",
          OpenAsPopup: true,
          Parameters: {
            Columns: 5,
            Rows: 6,
          },
          Type: "Menu",
          Content: {},
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-calculator",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 4,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_RIGHT",
          keyId: 4,
        },
      },
      {
        Caption: "Change Register",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "SWITCH_REGISTER",
            RequestContext: false,
            Steps: [
              {
                Label: "textfield",
                Code: 'if (param.DialogType == param.DialogType["TextField"]) {input(labels.prompt).respond();}',
              },
              {
                Label: "numpad",
                Code: 'if (param.DialogType == param.DialogType["Numpad"]) {numpad(labels.prompt).respond();}',
              },
              {
                Label: "list",
                Code: 'if (param.DialogType == param.DialogType["List"]) {respond();}',
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_DialogType: {
              TextField: 0,
              Numpad: 1,
              List: 2,
            },
            DialogType: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "Switch to a different register",
            param_option_DialogTypeoriginalValue: "TextField",
          },
        },
        BackgroundColor: "green",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 5,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "SYSTEM_MENU_RIGHT",
          keyId: 5,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "TAXFREE",
    Caption: "Tax Free Functions",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Toggle Tax Free",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TAX_FREE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Operation: {
              "Sale Toggle": 0,
              "Voucher List": 1,
              "Unit List": 2,
              "Print Last": 3,
              Consolidate: 4,
            },
            Operation: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for toggling tax free before completing sale",
            param_option_OperationoriginalValue: "Sale Toggle",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fa-plane",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TAXFREE",
          keyId: 1,
        },
      },
      {
        Caption: "Void Voucher",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TAX_FREE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Operation: {
              "Sale Toggle": 0,
              "Voucher List": 1,
              "Unit List": 2,
              "Print Last": 3,
              Consolidate: 4,
            },
            Operation: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for toggling tax free before completing sale",
            param_option_OperationoriginalValue: "Sale Toggle",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "fi-page-filled",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TAXFREE",
          keyId: 2,
        },
      },
      {
        Caption: "Reprint Voucher",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TAX_FREE",
            RequestContext: false,
            Steps: [
              {
                Label: "1",
                Code: "respond();",
              },
            ],
            Content: {},
          },
          Parameters: {
            _option_Operation: {
              "Sale Toggle": 0,
              "Voucher List": 1,
              "Unit List": 2,
              "Print Last": 3,
              Consolidate: 4,
            },
            Operation: 0,
          },
          Type: "Workflow",
          Content: {
            DataBinding: true,
            Description: "This is a built-in action for toggling tax free before completing sale",
            param_option_OperationoriginalValue: "Sale Toggle",
          },
        },
        BackgroundColor: "",
        Color: "",
        IconClass: "ion-android-print",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 0,
        Column: 0,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TAXFREE",
          keyId: 3,
        },
      },
    ],
    Content: {},
  },
  {
    Id: "TICKETMGT",
    Caption: "Ticket Management ",
    Tooltip: "",
    Class: "",
    MenuButtons: [
      {
        Caption: "Scan Member Card",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 0,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Member Card Number",
            param_option_FunctionoriginalValue: "Member Arrival",
          },
        },
        BackgroundColor: "orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 1,
        },
      },
      {
        Caption: "Scan Member Face",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "MM_MEMBERMGT",
            RequestContext: false,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Member Arrival","Select Membership","View Membership Entry","Regret Membership Entry","Renew Membership","Extend Membership","Upgrade Membership","Cancel Membership","Edit Membership","Show Member"];windowTitle = labels.MembershipTitle.substitute (optionNames[param.Function].toString()); ',
              },
              {
                Label: "membercard_number",
                Code: "(param.DefaultInputValue.length == 0) && (param.DialogPrompt <= 0) && input ({caption: labels.MemberCardPrompt, title: windowTitle}).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
            ],
            Content: {},
          },
          Parameters: {
            DefaultInputValue: "",
            _option_DialogPrompt: {
              "Member Card Number": 0,
              "Facial Recognition": 1,
              "No Dialog": 2,
            },
            DialogPrompt: 1,
            _option_Function: {
              "Member Arrival": 0,
              "Select Membership": 1,
              "View Membership Entry": 2,
              "Regret Membership Entry": 3,
              "Renew Membership": 4,
              "Extend Membership": 5,
              "Upgrade Membership": 6,
              "Cancel Membership": 7,
              "Edit Membership": 8,
              "Show Member": 9,
            },
            Function: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles member management functions.",
            param_option_DialogPromptoriginalValue: "Facial Recognition",
            param_option_FunctionoriginalValue: "Member Arrival",
          },
        },
        BackgroundColor: "orange",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 1,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 2,
        },
      },
      {
        Caption: "Register Arrival (Castle)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "CASTLE",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 1,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Register Arrival",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 3,
        },
      },
      {
        Caption: "Revoke Reservation",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 2,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Revoke Reservation",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 4,
        },
      },
      {
        Caption: "Edit Reservation",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 3,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Edit Reservation",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 5,
        },
      },
      {
        Caption: "Reconfirm Reservation",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 4,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Reconfirm Reservation",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 3,
        Column: 3,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 6,
        },
      },
      {
        Caption: "Edit Ticketholder",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 5,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Edit Ticketholder",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 2,
        Column: 2,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 7,
        },
      },
      {
        Caption: "Admission Count (Statistics)",
        Tooltip: "",
        Action: {
          State: {},
          Workflow: {
            Name: "TM_TICKETMGMT",
            RequestContext: true,
            Steps: [
              {
                Label: "0",
                Code: 'var optionNames = ["Admission Count","Register Arrival","Revoke Reservation","Edit Reservation","Reconfirm Reservation","Edit Ticketholder","Change Confirmed Ticket Quantity","Pickup Ticket Reservation","Convert To Membership"];if (param.Function < 0) {param.Function = 1;}; windowTitle = labels.TicketTitle.substitute (optionNames[param.Function].toString());',
              },
              {
                Label: "ticketnumber",
                Code: "(context.ShowTicketDialog) && input ({caption: labels.TicketPrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "ticketquantity",
                Code: "(context.ShowTicketQtyDialog) && numpad ({caption: labels.TicketQtyPrompt.substitute(context.TicketMaxQty), title: windowTitle, value: context.TicketQty}).cancel(abort);",
              },
              {
                Label: "ticketreference",
                Code: "(context.ShowReferenceDialog) && input ({caption: labels.ReferencePrompt, title: windowTitle}).ok(respond).cancel(abort);",
              },
              {
                Label: "9",
                Code: "respond ();",
              },
              {
                Label: "verbose",
                Code: "(context.Verbose) && message ({caption: context.VerboseMessage, title: windowTitle});",
              },
            ],
            Content: {},
          },
          Parameters: {
            "Admission Code": "",
            DefaultTicketNumber: "",
            _option_Function: {
              "Admission Count": 0,
              "Register Arrival": 1,
              "Revoke Reservation": 2,
              "Edit Reservation": 3,
              "Reconfirm Reservation": 4,
              "Edit Ticketholder": 5,
              "Change Confirmed Ticket Quantity": 6,
              "Pickup Ticket Reservation": 7,
              "Convert To Membership": 8,
            },
            Function: 0,
          },
          Type: "Workflow",
          Content: {
            Description: "This action handles ticket management functions.",
            param_option_FunctionoriginalValue: "Admission Count",
          },
        },
        BackgroundColor: "purple",
        Color: "",
        IconClass: "",
        Class: "",
        Bold: false,
        FontSize: 2,
        Row: 1,
        Column: 4,
        Enabled: 0,
        MenuButtons: [],
        Content: {
          keyMenu: "TICKETMGT",
          keyId: 8,
        },
      },
    ],
    Content: {},
  },
];
