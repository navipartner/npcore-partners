;

if (typeof Microsoft === "undefined") {
    var Microsoft = {
        Dynamics: {
            NAV: {
                InvokeExtensibilityMethod: function () { return null; },
                GetEnvironment: function () { return null; },
                GetImageResource: function () { return null; }
            }
        }
    }
};

var NaviPartner = { Controls: {}, View: {} };
var n$ = NaviPartner, l$ = {}, m$ = Microsoft.Dynamics.NAV;

;
n$.Behavior = {
    RaiseOnReadyEvent: true,
    DebuggingEnabled: true
};

;
(function () {
    var done = false;
    var initializers = [];
    initializers.index = {};

    function initialize() {
        this.done ||
            (
                console.info("Initializing module [" + this.name + "]"),
                initRequire.call(this),
                this.function(),
                this.done = true
            );
    };

    function initRequire() {
        if (!this.required)
            return;

        var me = this;
        var logged = false;
        var count = 0;

        this.required.forEach(function (required) {
            var init = initializers.index[required];
            init.done ||
                (
                    logged || (console.info("-> Initializing required modules for [" + me.name + "]:"), logged = true),
                    initialize.call(init),
                    count++
                );
        });
        count && console.info("-> Done initializing required modules for [" + this.name + "]:");
    };

    function addInitializer(init) {
        initializers.push(init);
        initializers.index[init.name] = init;
        done && initialize.call(init);
        return init;
    };

    n$.initialize = function () {
        initializers.forEach(function (init) { initialize.call(init); });
        done = true;
    };
    n$.addModule = function (name, initializer) {
        if (typeof initializer !== "function")
            throw new Error("Initializer " + name + " is not a function.");

        return addInitializer({
            name: name,
            priority: typeof priority === "number" ? priority : 100,
            "function": initializer,
            depend: function () {
                [].slice.call(arguments).forEach(function (module) {
                    this.required = this.required || [];
                    this.required.push(module);
                }.bind(this));
                return this;
            }
        });
    };
    n$.available = {
        external: typeof window.external === "object" && !!window.external
    };

    var initReady = {};
    function isInitReady() {
        var ready = true;
        for (var p in initReady) {
            if (initReady.hasOwnProperty(p))
                ready = ready && initReady[p];
        };
        return ready;
    };

    n$.initReady = function (id, is) {
        initReady[id] = is;
        if (is)
            delete initReady[id];
    };
    n$.awaitInit = function (callback) {
        if (isInitReady()) {
            callback();
            return;
        };
        var count = 0;
        var interval = setInterval(function () {
            if (isInitReady() || count++ === 100) {
                clearInterval(interval);
                callback();
            };
        }, 100);
    };

    // This is the "safe" entry point that's currently only invoked from the embedded script in Major Tom
    window.top.npretail = {
        focus: function (refocus) {
            window.focus();
            refocus && n$.Focus && n$.Focus.refocus && n$.Focus.refocus();
        }
    };
})();
;
n$.NAV = {
    Busy: false,
    OnBusyChanged: function() {}
};

;
(function () {
    var handlers = [];
    var delayedHandlers = [];
    var finalizers = [];
    var done = false;
    var finalized = false;

    n$.ready = function (handler, delay) {
        /// <summary>Registers a handler to execute when the NaviPartner framework is fully loaded.</summary>
        /// <param name="handler">A function to execute. If this parameter is ommitted, all attached handlers will execute. Never omit this parameter.</param>
        if (typeof handler === "function") {
            (!delay ? handlers : delayedHandlers).push(handler);
            done && n$.ready(delay);
            return;
        };

        setTimeout(function () {
            if (handler === true || handler === undefined) {
                (handler === true ? delayedHandlers : handlers).forEach(function (h) {
                    h.done || (h(), h.done = true);
                });
                done = true;
            };
        });
    };

    // Finalization block
    function finalize(finalizer) {
        return new Promise(resolve => {
            var resolved = false;

            function fulfill(error) {
                finalizer.done = true;
                error
                    ? console.warn(
                        "Finalization failed on a finalizer (" +
                        finalizer.finalizerName +
                        "). Please use the debugger to determine. Error was: " +
                        error)
                    : console.log("Finalization completed successfully on " + finalizer.finalizerName);

                if (resolved)
                    return;

                resolved = true;
                resolve(!error);
            }

            try {
                var finalized = finalizer(fulfill);
                if (finalized instanceof Promise)
                    finalized.then(fulfill).catch(fulfill);
            } catch (e) {
                fulfill(e);
            }
        });
    };

    function completeFinalization(callback) {
        if (finalized)
            return;

        console.log("Finalization completed on " + finalizers.length + " finalizers");
        finalized = true;
        typeof callback === "function" && callback();
    };

    function performFinalization(callback) {      
        console.log("Beginning finalization on " + finalizers.length + " finalizers.");
        Promise
            .all(finalizers.map(finalizer => finalize(finalizer)))
            .then(() => completeFinalization(callback))
            .catch(() => {
                completeFinalization(callback);
            });
        setTimeout(() => {
            if (finalized)
                return;
            console.warn(
                "Awaiting for finalizers to complete has exceeded maximum time. Finalizers will be allowed to finalize, but framework initialization continues.");
            completeFinalization(callback);
        }, 2500);
    };

    n$.ready.addFinalizer = function (finalizer, name) {
        if (typeof finalizer !== "function")
            return;

        finalizer.finalizerName = name || finalizer.name;
        finalizers.push(finalizer);
        finalized && finalize(finalizer);
    };

    n$.ready.finalize = function (callback) {
        if (finalized)
            return;

        performFinalization(callback);
    };
})();

;
n$.addModule("Capabilities",

    /*
        Module is used to keep track of front-end capabilities. Each JavaScript function that requires some front-end (Major Tom) communication should
        register itself in n$.Capabilities. Then, a module which requires talking to Major Tom could first check whether this communication is allowed
        and if it is not, then it could gracefully handle the situation.
    */
    function () {

        var capabilities = {};

        function checkDescriptor(obj, descriptor) {
            var invalidNames = ["name", "id", "description", "external", "supported"];

            var result = false;
            if (obj && (typeof obj === "object"))
                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop)) {
                        if (typeof obj[prop] === "function")
                            result = true;
                        if (invalidNames.indexOf(prop) >= 0) {
                            n$.Debug.Capabilities.warning("Descriptor [" +
                                descriptor +
                                "] contains a function definition with an invalid name [" +
                                prop +
                                "]");
                            return false;
                        };
                    }
                };
            result ||
                n$.Debug.Capabilities.log("Descriptor [" +
                    descriptor +
                    "] contains no functions. This is only critical if none of descriptors contains any functions.");
            return result;
        };

        n$.Capability = function (name, id, description, descriptor) {
            if (!(
                name &&
                id &&
                description &&
                (typeof name === "string") &&
                (typeof id === "string") &&
                (typeof description === "string"))
            )
                n$.Debug.Capabilities
                    .error("An attempt was made to register a capability without necessary describing information.",
                        false,
                        true);

            if (!descriptor)
                descriptor = { empty: true };

            if (!descriptor.empty && !(descriptor &&
                (typeof descriptor === "object") &&
                (checkDescriptor(descriptor.methods, "methods") || checkDescriptor(descriptor.events, "events"))))
                n$.Debug.Capabilities
                    .error("An attempt was made to create an instance of a n$.Capability object [" +
                        name +
                        ", " +
                        id +
                        "] without providing a valid capability descriptor object. Check the log for details.",
                        false,
                        true);

            Object.defineProperties(this,
                {
                    name: { value: name },
                    id: { value: id },
                    description: { value: description }
                });

            Object.defineProperty(this, "external", { value: n$.ExternalObject.getActual() });
            Object.defineProperty(this, "ifSupported", {
                value: function (thenFunc, elseFunc) {
                    this.external.getCapability(this.id)
                        .then(supported => {
                            supported
                                ? typeof thenFunc === "function" && thenFunc(true)
                                : typeof elseFunc === "function"
                                    ? elseFunc()
                                    : typeof thenFunc === "function" && thenFunc(false);
                        });
                }
            });

            var notSupportedReported;
            function reportNotSupported() {
                if (notSupportedReported)
                    return;
                n$.Debug.Capabilities.warning("Capability [" +
                    name +
                    "] is not supported. No function calls on this capability will be placed during this session.");
                notSupportedReported = true;
            };

            function implementFunc(name, f) {
                var invokers = [];
                var me = this;

                // Preparing a temporary promise-based method to respond to all invocations that occur before the ifSupported promise below resolves
                this[name] = function () {
                    var promise = new Promise((fulfill, reject) => invokers.push({ this: me, arguments, fulfill, reject }));
                    promise.catch(() => { n$.Debug.Capabilities.log(`Just-in-case rejection for ${name}, to prevent uncaught rejection errors.`); });
                    return promise;
                }

                this.ifSupported(
                    // then: supported
                    () => {
                        // Deleting the temporary method
                        delete me[name];

                        // Redefining the method to be invoked on subsequent calls
                        Object.defineProperty(this,
                            name,
                            {
                                value: function () {
                                    return f.apply(this, arguments);
                                }
                            });

                        // Invoking any temporary invocations that occurred before the ifSupported promise resolved
                        invokers.forEach(invokeInfo => {
                            var result = this[name].apply(invokeInfo.this, invokeInfo.arguments);
                            result && typeof result.then === "function"
                                ? result.then(output => invokeInfo.fulfill(output))
                                : invokeInfo.fulfill(result);
                        });
                    },

                    // else: not supported
                    () => {
                        // Deleting the temporary method
                        delete me[name];

                        // Redefining the method to be invoked on subsequent calls
                        Object.defineProperty(this,
                            name,
                            {
                                value: function () {
                                    reportNotSupported();
                                    return descriptor.noSupport && descriptor.noSupport[name] && typeof descriptor.noSupport[name] === "function"
                                        ? descriptor.noSupport[name].apply(this, arguments)
                                        : void 0;
                                }
                            });

                        // Invoking any temporary invocations that occurred before the ifSupported promise resolved
                        invokers.forEach(invokeInfo => {
                            reportNotSupported();
                            var result = descriptor.noSupport && descriptor.noSupport[name] && typeof descriptor.noSupport[name] === "function"
                                ? descriptor.noSupport[name].apply(invokeInfo.this, invokeInfo.arguments)
                                : void 0;
                            result && typeof result.catch === "function"
                                ? result.catch(output => invokeInfo.reject(output))
                                : invokeInfo.reject(result);
                        });
                    }
                )
            };

            descriptor && n$.ExternalObject.extendPrototype(descriptor.methods);

            if (descriptor && descriptor.methods) {
                for (var func in descriptor.methods) {
                    if (descriptor.methods.hasOwnProperty(func) && typeof descriptor.methods[func] === "function") {
                        implementFunc.call(this, func, descriptor.methods[func]);
                    };
                };
            };

            if (descriptor && descriptor.events) {
                Object.defineProperty(this,
                    "events",
                    {
                        value: descriptor.events
                    });
            };
        };

        n$.Capabilities = {
            register: function (capability) {
                if (!(capability instanceof n$.Capability))
                    n$.Debug.Capabilities
                        .error(
                            "An attempt was made to register a capability while passing a non-capability object to the register method.",
                            false,
                            true);

                if (capabilities.hasOwnProperty(capability.id)) {
                    n$.Debug.Capabilities.error("A module has attempted to register a capability [" +
                        capability.name +
                        ", " +
                        capability.id +
                        ", " +
                        capability.description +
                        "] with an id that has already been registered. The new capability will not be available.");
                };

                if (n$.Capabilities.hasOwnProperty(capability.name)) {
                    n$.Debug.Capabilities.error("A capability is registered with a non-unique name [" +
                        capability.name +
                        "]. A name must be unique, and must not match a property or method of the n$.Capabilities object. The new capability will not be available.");
                };

                capabilities[capability.id] = capability;
                Object.defineProperty(n$.Capabilities,
                    capability.name,
                    {
                        get: function () {
                            return capability;
                        }
                    });

                n$.ready.addFinalizer(fulfill => {
                    try {
                        n$.ExternalObject
                            .getActual()
                            .announceCapability(capability.name, capability.id, capability.description)
                            .then(result => fulfill(result ? null : "Unsupported feature, check the console log for details."));
                    }
                    catch (e) {
                        fulfill(e);
                    }
                }, "Capability: " + capability.name);
            }
        };

        window.top._np_capabilities = {
            invoke: function (id, method, parameters) {
                var handler = capabilities[id];

                if (!handler) {
                    n$.Debug.Capabilities
                        .error("A front-end capability invocation failed: unknown capability id [" +
                            id +
                            "]",
                            true);
                    return;
                };

                if (!handler.events) {
                    n$.Debug.Capabilities.error("Front-end capability [" +
                        handler.name +
                        "] does not support events.", true);
                    return;
                };

                if (typeof handler.events[method] !== "function") {
                    n$.Debug.Capabilities.error(
                        "A front-end capability invocation failed: unknown event [" + method + "]",
                        true);
                    return;
                }

                var p;
                if (parameters) {
                    try {
                        p = JSON.parse(parameters);
                    } catch (e) {
                        n$.Debug.Capabilities.error(
                            "A front-end capability invocation failed: Invalid parameters string passed. Error: " +
                            e +
                            ", parameters string: [" +
                            parameters,
                            true);
                        return;
                    };
                } else {
                    p = undefined;
                };

                p && (p instanceof Array || (p = [p]));
                handler.events[method].apply(handler, p);
            }
        };

    })
    .depend("Debug", "External.Loader", "Localization");
;
n$.addModule("Capability.Async",
        function() {
            n$.Capabilities.register(new n$.Capability(
                "Async",
                "5fcca2d7-ab95-4cee-b30a-c42d0d11db15",
                "Announces asynchronous communication capability between JavaScript and Major Tom."));
            // This capability does nothing but announces its presence.
        })
    .depend("Capabilities");
;
n$.addModule("Capability.Events",
    function () {
        n$.Capabilities.register(new n$.Capability("Events",
            "314f812c-e88c-4aa5-9dfc-a32bb5c61267",
            "Enables sharing relevant transactional state from the POS transaction with the host application, and events from host application back to NAV.",
            {
                methods: {
                    activeSale: function (active) {
                        this.external.activeSale(active);
                    },
                    documentReady: function (name) {
                        this.external.documentReady(name);
                    },
                    getFrontEndId: function () {
                        return this.external.getFrontEndId();
                    },
                    reload: function () {
                        this.external.reload();
                    },
                    invokeFrontEndEvent: function (event, obj) {
                        this.external.invokeFrontEndEvent(event, obj);
                    },
                    eventInvocationCompleted: function (reason) {
                        this.external.eventInvocationCompleted(reason);
                    }
                },
                noSupport: {
                    reload: function () {
                        window.top.location.reload();
                    },
                    invokeFrontEndEvent: function (event, obj) {
                        n$.Debug.Capabilities.log("Invoking front end event [" + event + "], " + JSON.stringify(obj));
                    }
                },
                events: {
                    majorTomEvent: function (reason) {
                        var notifyCompleted = function () {
                            n$.Capabilities.Events.eventInvocationCompleted(reason && reason.source);
                        };
                        var callback = notifyCompleted;

                        if (reason && reason.source === "exitingMajorTom") {
                            callback = function () {
                                n$.Events.CloseRequested.raise(null, function () {
                                    notifyCompleted();
                                });
                            };
                        }

                        n$.Events.MajorTomEvent.raise(reason, callback);
                    },
                    lockRegister: function () {
                        n$.UI.currentView.lock();
                    }
                }
            }));
    })
    .depend("Capabilities");

;
n$.addModule("Capability.SecureInput",
        function() {

            var lastSecure = false;

            n$.Capabilities.register(new n$.Capability(
                "SecureInput",
                "c87cf4ea-31e8-4493-97d4-c359baa4eab9",
                "Removes input into secure controls, such as password boxes, or password numpads, from logging.",
                {
                    methods: {
                        setSecure: function(secureMode) {
                            lastSecure === secureMode || this.external.setSecure(secureMode);
                            lastSecure = secureMode;
                        }
                    }
                }));
        })
    .depend("Capabilities");
;
n$.addModule("Capability.SetBusy",
        function() {
            n$.Capabilities.register(new n$.Capability("SetBusy",
                "dd205380-9c2c-4e27-aa90-616a4c9fb494",
                "Enables sharing of Microsoft Dynamics NAV back-end busy state with the host application.",
                {
                    methods: {
                        setBusy: function(busy) {
                            this.external.setBusy(busy);
                        }
                    },
                    noSupport: {
                        setBusy: function() {
                            return Promise.resolve();
                        }
                    }
                }));
        })
    .depend("Capabilities");

;
n$.addModule("Capability.Walkthrough",
        function() {
            n$.Capabilities.register(new n$.Capability("Walkthrough",
                "54cf107d-b470-42a2-9570-7516bedee51a",
                "Allows the client to store the state of individual walkthroughs, as well as to provide contextual insight into which walkthroughs are available.",
                {
                    methods: {
                        requestWalkthroughs: function() {
                            this.external.requestWalkthroughs();
                        },
                        registerWalkthrough: function(id, name, description) {
                            this.external.registerWalkthrough(id, name, description);
                        },
                        isWalkthroughCompleted: function(id) {
                            return this.external.isWalkthroughCompleted(id);
                        },
                        setWalkthroughCompleted: function(id, completed) {
                            this.external.setWalkthroughCompleted(id, completed);
                        },
                        indicateWalkthroughAvailable: function(id) {
                            this.external.indicateWalkthroughAvailable(id);
                        }
                    },
                    events: {
                        registerWalkthrough: function(guide) {
                            n$.UserGuide.capability.registerWalkthrough(guide);
                        },
                        showWalkthroughs: function() {
                            n$.UserGuide.capability.showWalkthroughs();
                        }
                    }
                }));
        })
    .depend("Capabilities");
;
n$.addModule("Cookies",
    function() {
        n$.Cookies = {
            getCookie: function(cname) {
                var name = cname + "=";
                var decodedCookie = decodeURIComponent(document.cookie);
                var ca = decodedCookie.split(";");
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) === " ") {
                        c = c.substring(1);
                    };
                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    };
                };
                return "";
            },
            setCookie: function(cname, cvalue) {
                var d = new Date();
                d.setTime(d.getTime() + (365 * 24 * 60 * 60 * 1000));
                var expires = "expires=" + d.toUTCString();
                document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
            }
        };
    });

;
n$.addModule("Css",
    function() {

        n$.Css = {
            Alignment:
            {
                None: "np-align-none",
                Left: "np-align-left",
                Right: "np-align-right",
                Middle: "np-align-middle"
            },
            Control:
            {
                Disabled: "np-style-disabled"
            },
            DialogBackground: {
                None: "",
                Message: "np-dialogbackground-message",
                Question: "np-dialogbackground-message",
                Warning: "np-dialogbackground-warning",
                Error: "np-dialogbackground-error"
            },
            FontSize:
            {
                XSmall: "np-fontsize-x-small",
                Small: "np-fontsize-small",
                Normal: "np-fontsize-normal",
                Medium: "np-fontsize-medium",
                Semilarge: "np-fontsize-semilarge",
                Large: "np-fontsize-large",
                XLarge: "np-fontsize-x-large"
            },
            FontStyle:
            {
                Regular: "np-fontstyle-regular",
                Bold: "np-fontstyle-bold",
                Semibold: "np-fontstyle-semibold",
                Uppercase: "np-fontstyle-uppercase",
            },
            ShowBehavior:
            {
                Always: "",
                Desktop: "np-showbehavior-desktop",
                App: "np-showbehavior-app"
            },
            TextAlign:
            {
                None: "np-text-align-none",
                Left: "np-text-align-left",
                Right: "np-text-align-right",
                Center: "np-text-align-center",
                Justify: "np-text-align-justify"
            }
        };

    });

;
n$.addModule("Data",
    function () {
        n$.Data = {};

        // DataStore
        (function() {
            n$.Data.DataStore = function(sources) {
                var me = this;

                me.private = {
                    sources: {},
                    bindings: []
                };

                if (!sources)
                    return;

                for (var source in sources) {
                    if (sources.hasOwnProperty(source)) {
                        me.private.sources[source] = new n$.Data.DataSource(sources[source], me);
                    };
                };
            };

            n$.Data.DataStore.prototype.invokeBinding = function(func, row) {
                this.private.bindings.forEach(function(target) {
                    if (!target.binder || target.dataSource !== row.dataSource)
                        return;
                    var f = target.binder[func];
                    f && typeof f === "function" && f.call(target, row);
                });
            };

            n$.Data.DataStore.prototype.bind = function (target, source) {
                if (!this.private.sources[source]) {
                    n$.Debug.DataBinding.warning("Attempting data binding to an unknown source: " + source);
                    return;
                };

                if (!(target.binder instanceof n$.Data.DataBinder)) {
                    n$.Debug.DataBinding
                        .error("Unsuccessful data binding of a target that does not expose data binding functionality.");
                    return;
                };

                this.private.bindings.push(target);
                source = this.private.sources[source];
                target.dataSource = source;
                typeof target.binder.bind === "function" && target.binder.bind(source);
                // TODO: Add line here
                source.position &&
                    source.currentRow instanceof n$.Data.DataRow &&
                    typeof target.binder.position === "function" &&
                    target.binder.position.call(target, source.currentRow);
            };

            n$.Data.DataStore.prototype.unbind = function (target) {
                for (var i = this.private.bindings.length - 1; i >= 0; i--) {
                    if (this.private.bindings[i] === target)
                        this.private.bindings.splice(i, 1);
                };
            };

            n$.Data.DataStore.prototype.getSource = function(source) {
                (!this.private.sources[source] || !(this.private.sources[source] instanceof n$.Data.DataSource)) &&
                    n$.Debug.DataBinding.error("Attempting to retrieve an unknown data source : " + source + ".");
                return this.private.sources[source];
            };

            n$.Data.DataStore.prototype.getSources = function() {
                return this.private.sources;
            };

            n$.Data.DataStore.prototype.getState = function() {
                var result = { positions: {} };
                for (var source in this.private.sources) {
                    if (this.private.sources.hasOwnProperty(source)) {
                        var src = this.private.sources[source];
                        src instanceof n$.Data.DataSource && (result.positions[source] = src.position);
                    };
                };
                return result;
            };
        })();

        // DataSource
        (function() {
        n$.Data.DataSource = function(source, store) {
            var me = this;

            me.id = source.id;

            me.private = {
                index: {},
                columnById: {},
                rows: [],
                fields: {},
                totals: {}
            };
            me.columns = [];
            me.totalWidth = 0;

            source.columns
                ? source.columns.forEach(function(column) {
                    var col = new n$.Data.DataColumn(column, me);
                    me.totalWidth += col.visible ? col.width : 0;
                    me.columns.push(col);
                    me.private.columnById[column.fieldId] = col;
                    me.private.fields[column.fieldId] = new n$.Data.DataField(column.fieldId, col.dataType, null);
                })
                : n$.Debug.DataBinding.warning("Data source " + source.id + " does not specify any columns.");

            source.totals &&
                source.totals.forEach(function(total) {
                    me.private.totals[total] = new n$.Data.DataField(total, n$.NewEnums.DataType.Decimal, 0);
                });

            me.dataStore = store;
        };

        n$.Data.DataSource.prototype.getTotal = function(total) {
            var tot = this.private.totals[total];
            !tot && n$.Debug.DataBinding.warning("Attempting to access an unknown total field: [" + total + "] for data source " + this.id + ".");
            return tot;
        };

        n$.Data.DataSource.prototype.getField = function(field) {
            var fld = this.private.fields[field];
            (!fld || !(fld instanceof n$.Data.DataField)) &&
                n$.Debug.DataBinding.warning("Attempting to access an unknown field [" +
                    field +
                    "] for data source " +
                    this.id +
                    ".");
            return fld;
        };

        n$.Data.DataSource.prototype.getColumnById = function (id) {
            var column = this.private.columnById[id];
            (!column || !(column instanceof n$.Data.DataColumn)) &&
                n$.Debug.DataBinding.warning("Attempting to access an unknown column [" +
                    id +
                    "] for data source " +
                    this.id +
                    ".");
            return column;
        };

        n$.Data.DataSource.prototype.merge = function(set) {
            var me = this;
            typeof set.rows.forEach === "function" && set.rows.forEach(function(row) {
                row.deleted ? me.deleteRow(row) : me.insertOrUpdate(row);
            });
            if (set.totals && typeof set.totals === "object") {
                for (var total in set.totals) {
                    if (set.totals.hasOwnProperty(total)) {
                        me.private.totals[total] instanceof n$.Data.DataField && (me.private.totals[total].value = set.totals[total]);
                    };
                };
            };

            me.position = set.currentPosition;
        };

        n$.Data.DataSource.prototype.rowPointer = function(position, throwError) {
            var i = this.private.index[position];
            if (i < 0 || i >= this.private.rows.length)
                return null;

            var row = this.private.rows[i];
            if (row.position !== position) {
                return (throwError
                    ? (n$.Debug.DataBinding
                        .error("Attempting to delete a row with mismatching position. Expected: " +
                            position +
                            "; actual: " +
                            row.position +
                            ")",
                            true), null)
                    : null);
            };

            return new n$.Data.DataRowPointer(i, row);
        };

        n$.Data.DataSource.prototype.deleteRow = function (row) {
            var pointer = this.rowPointer(row.position, true);
            if (!pointer)
                return;

            var oldRow = this.private.rows.splice(pointer.index, 1)[0];
            var oldIndex = this.private.index[row.position];
            delete this.private.index[row.position];

            for (var i in this.private.index) {
                if (this.private.index.hasOwnProperty(i) && this.private.index[i] > oldIndex) {
                    this.private.index[i]--;
                };
            };

            oldRow.delete();

            this.dataStore.invokeBinding("delete", pointer.row);
        };

        n$.Data.DataSource.prototype.insertRow = function (row) {
            var newRow = new n$.Data.DataRow(row, this);
            this.private.index[row.position] = this.private.rows.length;
            this.private.rows.push(newRow);

            this.dataStore.invokeBinding("insert", newRow);
        };

        n$.Data.DataSource.prototype.updateRow = function (row) {
            var pointer = this.rowPointer(row.position, true);

            var isCurrent = row.position === this.position;
            for (var field in row.fields) {
                if (row.fields.hasOwnProperty(field)) {
                    pointer.row.private.fields[field].value = row.fields[field];
                    isCurrent && (this.private.fields[field].value = row.fields[field]);
                };
            };

            this.dataStore.invokeBinding("update", pointer.row);
        };

        n$.Data.DataSource.prototype.insertOrUpdate = function (row) {
            this.private.rows[this.private.index[row.position]] instanceof n$.Data.DataRow ? this.updateRow(row) : this.insertRow(row);
        };

        n$.Data.DataSource.prototype.setPosition = function (position) {
            this.private.position = position;
        };

        n$.Data.DataSource.prototype.updateFields = function() {
            var row = this.currentRow;
            if (!row)
                return;
            this.columns.forEach(function (column) {
                this.private.fields[column.fieldId].value = row.private.fields.hasOwnProperty(column.fieldId)
                    ? row.private.fields[column.fieldId].value
                    : undefined;
            }.bind(this));
        };

        Object.defineProperty(n$.Data.DataSource.prototype,
            "position",
            {
                get: function() {
                    return this.private.position || null;
                },
                set: function(val) {
                    var row = this.private.index[val] >= 0 && this.private.index[val] < this.private.rows.length
                        ? this.private.rows[this.private.index[val]]
                        : null;
                    row
                        ? (val !== this.private.position) && (this.private.position = val, this.updateFields())
                        : !val && (this.private.position = null);
                    this.dataStore.invokeBinding("position", row || { dataSource: this, position: null });
                }
            });

        Object.defineProperty(n$.Data.DataSource.prototype,
            "currentRow",
            {
                get: function () {
                    var row = this.rowPointer(this.position, false);
                    return row ? row.row : null;
                }
            });

        })();

        // DataColumn
        (function() {
            n$.Data.DataColumn = function(column, dataSource) {
                this.dataSource = dataSource;

                this.fieldId = column.fieldId;
                this.dataType = column.dataType; // TODO: create an enum, make is strongly typed!
                this.format = column.format;
                this.ordinal = column.ordinal;
                this.caption = column.caption;
                this.visible = column.visible;
                this.formula = column.formula; // TODO: implement formula functionality
                this.isSubtotal = column.isSubtotal;
                this.width = column.width;
                this.isCheckbox = column.isCheckbox;
            };
        })();

        // DataRow
        (function() {
            n$.Data.DataRow = function(row, source) {
                this.private = {
                    fields: {}
                };

                this.position = row.position;
                this.dataSource = source;
                this.updated = false;

                for (var field in row.fields) {
                    if (row.fields.hasOwnProperty(field)) {
                        this.private.fields[field] = new n$.Data
                            .DataField(field, this.dataSource.private.columnById[field].dataType, row.fields[field], this);
                    };
                };
            };

            n$.Data.DataRow.prototype.delete = function() {
                // TODO: check if this is even needed
            };

            n$.Data.DataRow.prototype.getField = function(field) {
                var fld = this.private.fields[field];
                if (!fld || !(fld instanceof n$.Data.DataField)) {
                    n$.Debug.DataBinding.warning("Attempting to access unknown field [" +
                        field +
                        "] for data source " +
                        this.dataSource.id +
                        ".");
                };
                return fld;
            };
        })();

        // DataRowPointer
        (function() {
            n$.Data.DataRowPointer = function(index, row) {
                this.index = index;
                this.row = row;
            };
        })();

        // DataField
        (function() {
            n$.Data.DataField = function(field, dataType, value, row) {
                this.private = {
                    bindings: [],
                    value: value
                };
                this.field = field;
                this.dataRow = row;
                this.dataType = dataType;
            };
            Object.defineProperty(n$.Data.DataField.prototype,
                "value",
                {
                    get: function() {
                        return n$.NewEnums.DataType.behavior[this.dataType].format(this.private.value);
                    },
                    set: function(val) {
                        this.private.valueSet = true;
                        this.private.value = this.dataType === n$.NewEnums.DataType.DateTime && val ? new Date(val) : val;
                        this.dataRow && (this.dataRow.updated = true);
                        this.__updateBoundObjects();
                    }
                });
            Object.defineProperty(n$.Data.DataField.prototype,
                "rawValue",
                {
                    get: function() {
                        return this.private.value;
                    }
                });
            n$.Data.DataField.prototype.bind = function(target, property, callback) {
                this.private.bindings.push({ object: target, property: property, callback: callback });
                target[property] = this.value;
            };
            n$.Data.DataField.prototype.__updateBoundObjects = function() {
                var me = this;
                setTimeout(function() {
                    me.private.bindings.forEach(function(binding) {
                        binding.object[binding.property] = me.value;
                        binding.callback && typeof binding.callback === "function" && binding.callback(me.rawValue);
                    });
                });
            };
        })();

        // DataBinder
        (function() {
            n$.Data.DataBinder = function(binder) {
                typeof binder.bind === "function" && (this.bind = binder.bind);
                typeof binder.insert === "function" && (this.insert = binder.insert);
                typeof binder.update === "function" && (this.update = binder.update);
                typeof binder.delete === "function" && (this.delete = binder.delete);
                typeof binder.position === "function" && (this.position = binder.position);
            };
            n$.Data.DataBinder.prototype.insert = function() {
                // Intentionally blank. Default binder does nothing.
            };
            n$.Data.DataBinder.prototype.update = function() {
                // Intentionally blank. Default binder does nothing.
            };
            n$.Data.DataBinder.prototype.delete = function() {
                // Intentionally blank. Default binder does nothing.
            };
        })();
    });

n$.addModule("Debug",
    function () {
        function stringifyObject(obj, stopRecursion) {
            var objToStr = {};
            for (var p in obj) {
                if (obj.hasOwnProperty(p)) {
                    var type = typeof obj[p];
                    if (type === "string" || type === "number" || type === "boolean" || type === "undefined")
                        objToStr[p] = obj[p];
                    if (type === "object") {
                        if (p === "Content") {
                            if (!$.isEmptyObject(obj[p]))
                                objToStr[p] = obj[p];
                        } else
                            objToStr[p] = stopRecursion ? "<object>" : stringifyObject(obj[p], true);
                    }
                };
            };
            return stopRecursion ? objToStr : JSON.stringify(objToStr);
        };

        function jsonStringify(obj) {
            switch (typeof obj) {
                case "undefined":
                    return "undefined";
                case "function":
                    return "<function>";
                case "object":
                    if (obj && obj.__json) {
                        delete obj.__json;
                        return JSON.stringify(obj);
                    };
                    return stringifyObject(obj);
                case "number":
                case "boolean":
                    return obj.toString();
            };
            return obj;
        };

        n$.Debug = {};

        n$.Debug.Source = function (name, verbose) {
            this.name = name;
            this.isVerbose = !!verbose;
        };

        n$.Debug.Source.prototype = {
            alert: function (message, details, isError) {
                typeof details === "boolean" &&
                    typeof isError === "undefined" &&
                    (isError = details, details = undefined);
                alert(message);
                this.log({
                    event: this.name || "window.alert",
                    data: details || message,
                    error: !!isError,
                    warning: !isError
                });
            },
            warning: function (message, error, throwing) {
                this.log({
                    event: "JavaScript [" + this.name + "]",
                    data: message,
                    trace: true,
                    warning: !error,
                    error: !!error && !throwing
                });
            },
            dontPanic: function (message, red) {
                // TODO: Don't Panic message should read something user friendly, with a possibility to show more (in which case actuall error content should be shown)
                message.length > 500 && (message = message.substring(0, 500));
                message = message + "<br/>" + (red ? "This is a critical programming error that must be fixed during development." : l$.Global_ProgrammingBug);
                var dontPanicObject,
                    dontPanic =
                        $("<div class='np-dont-panic" +
                            (red ? " red" : "") +
                            "'><div class='box'><div class='title'>Do" +
                            (red ? "" : "n't") +
                            " panic.</div><div class='message'>" +
                            message.replace(/\n/g, "<br>") +
                            "</div></div></div>")
                            .click(function () {
                                dontPanicRemove();
                            });

                function listenToKeyboard(e) {
                    (e.which === 27) && (dontPanicRemove(), e.stopImmediatePropagation());
                };
                document.addEventListener("keypress", listenToKeyboard, true);

                function dontPanicRemove() {
                    red || dontPanic.remove();
                    n$.Focus.release(dontPanicObject);
                    document.removeEventListener("keypress", listenToKeyboard, true);
                };

                $("body").append(dontPanic);
                n$.Focus.request(dontPanicObject = { focusElement: dontPanic[0] });
            },
            error: function (message, warning, red) {
                this.dontPanic(message, red);
                this.warning(message, true, !warning);
                if (!warning) {
                    var err = new Error(message);
                    err.fromCode = true;
                    throw err;
                };
            },
            todo: function (message) {
                this.log("A TODO function was called with message: " + message);
                console.warn("TODO: " + message + " (check the stack trace)");
                console.trace();
            },
            // TODO: log and logPos should be unified into one!
            // TODO: when logging to Major Tom, there must be severity information!
            log: function (par) {
                if (n$.Behavior.DebuggingEnabled) {
                    var data = par.data ? jsonStringify(par.data) : "";
                    var msg = par.event ? par.event + (data ? (": " + data) : "") : par;
                    msg = msg.replace(/\\n/g, "\n");
                    par.warning ? console.warn(this.name + ": " + msg) : (par.error ? console.error(this.name + ": " + msg) : console.info(this.name + ": " + msg));
                    par.trace && console.trace();
                    window.top.hasOwnProperty("$_npproxy_") && n$.available.external && window.external.Log(msg.substring(0, 400));
                };
            },
            verbose: function (par) {
                if (!this.isVerbose)
                    return;
                this.log(par);
            },

            /// This function logs the JSON object as-is, without trying to optimize it
            logJson: function (par) {
                par && par.data && (par.data.__json = true);
                this.log(par);
            },
            logPos: function (par) {
                var msg = typeof par === "string"
                    ? par
                    : (par.event + ", Data: " + jsonStringify(par.data));
                if (window.top.hasOwnProperty("$_npproxy_") && n$.available.external) {
                    par.info
                        ? window.external.LogPOSInfo(msg)
                        : window.external.LogPos(msg);
                };
                console.info(msg);
            },
        };

        $.extend(n$.Debug,
            {
                // TODO: refactor: names to lowercase
                // TODO: move them to appropriate modules
                // TODO: depend those modules on Debug
                Framework: new n$.Debug.Source("Framework"),
                UI: new n$.Debug.Source("JavaScript UI"),
                Event: new n$.Debug.Source("Event"),
                BackEnd: new n$.Debug.Source("BackEnd"),
                Workflow: new n$.Debug.Source("Workflow"),
                Popup: new n$.Debug.Source("Popup"),
                DataBinding: new n$.Debug.Source("DataBinding"),
                Capabilities: new n$.Debug.Source("Capabilities"),
                External: new n$.Debug.Source("External"),

                // These are correct lowercase
                formatting: new n$.Debug.Source("Formatting")
            });
    }).depend("Focus");

;
n$.ready(function () {
    function cancelWheel(e) {
        e.cancelBubble = true;
        return false;
    };

    document.addEventListener("mousewheel", cancelWheel, false);
    document.addEventListener("DOMMouseScroll", cancelWheel, false);
});

n$.ready(function() {
    /* Installing the generic keydown event handler to prevent the browser from going back on backspace */
    $(document)
        .on("keydown",
            function(e) {
                if (e.which === 8) {
                    if (e.target.tagName !== "INPUT")
                        e.preventDefault();
                }
            });
});
;
n$.addModule("Enums",
        function() {

            // Standalone enums (interdepent come after)
            n$.Enums = {
                Parse: function(value, object) {
                    if (value || typeof value == "number") {
                        if (object.hasOwnProperty(value)) {
                            return object[value];
                        };
                        for (var member in object) {
                            if ((object[member].hasOwnProperty("name") &&
                                    typeof value == "string" &&
                                    object[member].name.toUpperCase() === value.toUpperCase()) ||
                                (object[member].hasOwnProperty("value") && object[member].value === value)
                            ) {
                                return object[member];
                            };
                            if (object[member] === value) {
                                return object[member];
                            }
                        };
                    };
                    return null;
                },
                Alignment: {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    None: { value: -1, name: "None", "class": n$.Css.Alignment.None },
                    Left: { value: 0, name: "Left", "class": n$.Css.Alignment.Left },
                    Right: { value: 1, name: "Right", "class": n$.Css.Alignment.Right },
                    Middle: { value: 2, name: "Middle", "class": n$.Css.Alignment.Middle }
                },
                ButtonType:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Unspecified: { value: 0, name: "Unspecified", caption: "" },
                    Ok: { value: 1, name: "Ok", "class": "ok", caption: "Global_OK" },
                    Yes: { value: 2, name: "Yes", "class": "yes", caption: "Global_Yes" },
                    No: { value: 3, name: "No", "class": "no", caption: "Global_No" },
                    Cancel: { value: 4, name: "Cancel", "class": "cancel", caption: "Global_Cancel" },
                    Abort: { value: 5, name: "Abort", "class": "abort", caption: "Abort" },
                    Retry: { value: 6, name: "Retry", "class": "retry", caption: "Retry" },
                    Back: { value: 7, name: "Back", "class": "back", caption: "Global_Back" }
                },
                ClientType:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Windows: { value: 0, name: "Windows" },
                    Web: { value: 1, name: "Web" },
                    Tablet: { value: 2, name: "Tablet" },
                    Phone: { value: 3, name: "Phone" }
                },
                ContainerType:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Span: { tag: "<span/>" },
                    Div: { tag: "<div/>" }
                },
                DialogType: {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Message: { value: 1, name: "Message" },
                    Confirm: { value: 2, name: "Confirm" },
                    Error: { value: 3, name: "Error" },
                    StrMenu: { value: 4, name: "StrMenu" },
                    NumPad: { value: 5, name: "NumPad" },
                    ButtonGrid: { value: 6, name: "ButtonGrid" },
                    SearchBox: { value: 7, name: "SearchBox" },
                    RegisterBalancing: { value: 8, name: "RegisterBalancing" },
                    CalendarGrid: { value: 9, name: "CalendarGrid" },
                    Lookup: { value: 10, name: "Lookup" }
                },
                EventType:
                {
                    // TODO: this enum goes away - it's not needed after transcendence
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Insert: { value: 110, name: "Insert" },
                    Modify: { value: 120, name: "Modify" },
                    Delete: { value: 130, name: "Delete" },
                    Rename: { value: 150, name: "Rename" },
                    Refresh: { value: 210, name: "Refresh" },
                    Validate: { value: 220, name: "Validate" },
                    ButtonClicked: { value: 300, name: "ButtonClicked" },
                    FunctionsButtonClicked: { value: 310, name: "FunctionsButtonClicked" },
                    EanCodeScanned: { value: 350, name: "EanCodeScanned" },
                    SelectionChanged: { value: 360, name: "SelectionChanged" },
                    KeyDown: { value: 370, name: "KeyDown" },
                    Error: { value: 400, name: "Error" },
                    Ok: { value: 1000, name: "Ok" },
                    Cancel: { value: 1010, name: "Cancel" },
                    LookupOk: { value: 1020, name: "LookupOk" },
                    LookupCancel: { value: 1030, name: "LookupCancel" },
                    Login: { value: 1040, name: "Login" },
                    LookupRequestData: { value: 2110, name: "LookupRequestData" },
                    KeepAlive: { value: 9997, name: "KeepAlive" },
                    CancelRequest: { value: 9998, name: "CancelRequest" },
                    CancelAllProtocolRequests: { value: 9999, name: "CancelAllProtocolRequests" }
                },
                FontSize:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    XSmall: { value: 0, name: "X-Small", "class": n$.Css.FontSize.XSmall },
                    Small: { value: 1, name: "Small", "class": n$.Css.FontSize.Small },
                    Normal: { value: 2, name: "Normal", "class": n$.Css.FontSize.Normal },
                    Medium: { value: 3, name: "Medium", "class": n$.Css.FontSize.Medium },
                    Semilarge: { value: 4, name: "Semilarge", "class": n$.Css.FontSize.Semilarge },
                    Large: { value: 5, name: "Large", "class": n$.Css.FontSize.Large },
                    XLarge: { value: 6, name: "X-Large", "class": n$.Css.FontSize.XLarge }
                },
                FontStyle:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Regular: { value: 0, name: "Regular", "class": n$.Css.FontStyle.Regular },
                    Semibold: { value: 1, name: "Semibold", "class": n$.Css.FontStyle.Semibold },
                    Bold: { value: 2, name: "Bold", "class": n$.Css.FontStyle.Bold },
                    Uppercase: { value: 16, name: "Uppercase", "class": n$.Css.FontStyle.Uppercase }
                },
                NumberFormat: {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    IsFormat: function(value, format) { return this.Parse(value) === this.Parse(format); },
                    None: { value: 0, name: "None" },
                    Number: { value: 1, name: "Number" },
                    Percentage: { value: 2, name: "Percentage", format: function(val) { return val + " %"; } },
                    Integer: { value: 3, name: "Integer" },
                    IntegerThousands: { value: 4, name: "IntegerThousands" }
                },
                ShowBehavior:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Always: { value: 0, name: "Always", "class": n$.Css.ShowBehavior.Always },
                    Desktop: { value: 1, name: "Desktop", "class": n$.Css.ShowBehavior.Desktop },
                    App: { value: 2, name: "App", "class": n$.Css.ShowBehavior.App }
                },
                TextAlign:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    None: { value: 0, name: "None", "class": n$.Css.TextAlign.None, css: "inherit" },
                    Left: { value: 1, name: "Left", "class": n$.Css.TextAlign.Left, css: "left" },
                    Right: { value: 2, name: "Right", "class": n$.Css.TextAlign.Right, css: "right" },
                    Center: { value: 3, name: "Center", "class": n$.Css.TextAlign.Center, css: "center" },
                    Justify: { value: 4, name: "Justify", "class": n$.Css.TextAlign.Justify, css: "justify" }
                },
                ViewType:
                {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    Undefined: { value: 0, name: "Undefined" },
                    Login: { value: 1, name: "Login" },
                    Sale: { value: 2, name: "Sale" },
                    Payment: { value: 3, name: "Payment" },
                    BalanceRegister: { value: 4, name: "BalanceRegister" },
                    Locked: { value: 11, name: "Locked" }
                }
            };

            // Interdepent enums
            n$.Enums.ButtonSet = {
                Parse: function(value) { return n$.Enums.Parse(value, this); },
                Ok: { value: 0, name: "Ok", buttons: [n$.Enums.ButtonType.Ok] },
                YesNo: { value: 1, name: "YesNo", buttons: [n$.Enums.ButtonType.Yes, n$.Enums.ButtonType.No] },
                OkCancel: { value: 2, name: "OkCancel", buttons: [n$.Enums.ButtonType.Ok, n$.Enums.ButtonType.Cancel] }
            };

            (function() {
                var captions;

                n$.Enums.DialogStyle = {
                    Parse: function(value) { return n$.Enums.Parse(value, this); },
                    None: {
                        value: 0,
                        name: "None",
                        background: n$.Css.DialogBackground.None,
                        buttons: n$.Enums.ButtonSet.Ok
                    },
                    Message: {
                        value: 1,
                        name: "Message",
                        background: n$.Css.DialogBackground.Message,
                        buttons: n$.Enums.ButtonSet.Ok
                    },
                    Confirm: {
                        value: 2,
                        name: "Confirm",
                        background: n$.Css.DialogBackground.Confirm,
                        buttons: n$.Enums.ButtonSet.YesNo
                    },
                    Error: {
                        value: 3,
                        name: "Error",
                        background: n$.Css.DialogBackground.Error,
                        buttons: n$.Enums.ButtonSet.Ok
                    },

                    getCaption: function(style) {
                        captions = captions ||
                        {
                            None: "",
                            Message: l$.DialogCaption_Message,
                            Confirm: l$.DialogCaption_Confirmation,
                            Error: l$.DialogCaption_Error
                        };
                        return captions[style.name];
                    }
                };
            })();

            // TODO: rename NewEnums with Enums when all enums are properly refactored
            n$.NewEnums = {
                WorkflowStage: {
                    BeforeWorkflow: 0,
                    Action: 10,
                    ActionDbWrite: 20
                },

                ThemeType: {
                    Logo: 0,
                    Background: 1,
                    Stylesheet: 2,
                    JavaScript: 3
                },
                ThemeTargetType: {
                    View: 0,
                    ViewType: 1,
                    Client: 2
                },
                ThemeTargetViewType: {
                    Login: 0,
                    Sale: 1,
                    Payment: 2
                },

                DataType: {
                    Undefined: 0,
                    Boolean: 1,
                    Integer: 2,
                    DateTime: 3,
                    Decimal: 4,
                    String: 5,

                    behavior: {
                        0: {
                            textAlign: n$.Enums.TextAlign.None,
                            format: function(val) { return val; },
                            parse: function(val) { return val; }
                        },
                        1: {
                            textAlign: n$.Enums.TextAlign.Center,
                            format: function(val) { return val ? l$.Global_Yes : l$.Global_No; },
                            parse: function(val) {
                                return typeof val === "string"
                                    ? (
                                        l$.Global_Yes.toUpperCase() === val.toUpperCase() ||
                                            val.toUpperCase() === "TRUE"
                                            ? true
                                            : (l$.Global_No.toUpperCase() === val.toUpperCase() ||
                                                val.toUpperCase() === "FALSE"
                                                ? false
                                                : !!val))
                                    : !!val;
                            }
                        },
                        2: { // Integer
                            textAlign: n$.Enums.TextAlign.Right,
                            format: function(val) { return numeral(val).format(n$.State.format.number.integerFormat); },
                            parse: function(val) { return numeral(val).value(); }
                        },
                        3: { // DateTime
                            textAlign: n$.Enums.TextAlign.Right,
                            format: function(val) {
                                return moment(val).format(n$.State.format.date.ShortDatePattern.toUpperCase());
                            },
                            parse: function(val) {
                                // This function is to be called only when a date object passed by NAV is to be converted to a date
                                if (val && typeof val === "string") {
                                    var date = moment(val.substring(0, 10), "YYYY-MM-DD");
                                    if (date.isValid())
                                        return date.toDate();
                                };
                                // some default behavior must exist if an invalid date is returned
                                return new Date();
                            },
                            calculate: function(val) {
                                var date = moment(val, n$.State.format.date.ShortDatePattern.toUpperCase());
                                if (date.isValid())
                                    return date.toDate();

                                if (typeof val === "string") {
                                    var v = val.toUpperCase();
                                    if (v.length >= 2) {
                                        function calculateDay(dayIndex) {
                                            var now = new Date();
                                            var calc = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                                            while (calc.getDay() !== dayIndex) {
                                                calc.setDate(calc.getDate() + 1);
                                            };
                                            return calc;
                                        };

                                        var calculatedDate = null;
                                        n$.State.format.date.DayNames.forEach(function(day, i) {
                                            day = day.toUpperCase();
                                            if (day === v || day.substring(0, v.length) === v)
                                                calculatedDate = calculateDay(i);
                                        });
                                        if (calculatedDate)
                                            return calculatedDate;
                                    };

                                    if (v.length >= 1) {
                                        function offsetDay(days) {
                                            var now = new Date();
                                            var calc = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                                            calc.setDate(calc.getDate() + days);
                                            return calc;
                                        };

                                        var today = l$.Global_Today.toUpperCase();
                                        var yesterday = l$.Global_Yesterday.toUpperCase();
                                        var tomorrow = l$.Global_Tomorrow.toUpperCase();

                                        if (today && typeof today === "string")
                                            if (v === today || today.substring(0, v.length) === v)
                                                return offsetDay(0);

                                        if (tomorrow && typeof tomorrow === "string")
                                            if (v === tomorrow || tomorrow.substring(0, v.length) === v)
                                                return offsetDay(1);

                                        if (yesterday && typeof yesterday === "string")
                                            if (v === yesterday || yesterday.substring(0, v.length) === v)
                                                return offsetDay(-1);
                                    }
                                };
                                n$.Debug.formatting.warning("Unknown date string \"" +
                                    val +
                                    "\" cannot be parsed, calculated or processed.");
                                return new Date();
                            }
                        },
                        4: { // Decimal
                            textAlign: n$.Enums.TextAlign.Right,
                            format: function(val, adjust) {
                                var format = n$.State.format.number.decimalFormat;
                                if (val && (typeof val === "number") && adjust) {
                                    var valstr = val.toString();
                                    var dec = valstr.substring(valstr.indexOf(".") + 1);
                                    dec.length >= 2 && (format += "0".repeat(Math.max(dec.length - 2, 5)));
                                };
                                return numeral(val).format(format);
                            },
                            parse: function(val) { return numeral(val).value(); }
                        },
                        5: {
                            textAlign: n$.Enums.TextAlign.Left,
                            format: function(val) { return val; },
                            parse: function(val) { return val; }
                        }
                    }
                },

                NumpadType: {
                    Decimal: 0,
                    Integer: 1,
                    Date: 2,
                    Text: 3,

                    behavior: {
                        functions: {
                            calculateNumeric: function(val) {
                                function evalStrict(v) {
                                    "use strict";
                                    return eval(v);
                                };

                                function calculateNumeric(octalsAllowed) {
                                    if (typeof val === "number")
                                        return val;

                                    var v = "";
                                    for (var i = 0; i < val.length; i++)
                                        val[i] === n$.State.format.number.NumberDecimalSeparator
                                            ? v += "."
                                            : val[i] !== " " &&
                                            val[i] !== n$.State.format.number.NumberGroupSeparator &&
                                            (v += val[i]);
                                    v = v || "0";
                                    try {
                                        return (octalsAllowed ? eval : evalStrict)(v.replace(/x/g, "*"));
                                    } catch (er) {
                                        return NaN;
                                    }
                                };

                                typeof val === "string" && (val = val.trim());
                                var ret = calculateNumeric(false);
                                if (isNaN(ret)) {
                                    ret = calculateNumeric(true);
                                    if (!isNaN(ret)) {
                                        val = val.replace(/\b0+/g, "");
                                        ret = calculateNumeric(false);
                                    };
                                };
                                return ret;
                            }
                        },

                        0: {
                            calculate: function(val) {
                                return n$.NewEnums.NumpadType.behavior.functions.calculateNumeric(val);
                            },
                            format: function(val) {
                                return n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.Decimal].format(val);
                            },
                            parse: function(val) {
                                return (typeof val === "number")
                                    ? val
                                    : n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.Decimal].parse(val);
                            }
                        },
                        1: {
                            calculate: function(val) {
                                var num = n$.NewEnums.NumpadType.behavior.functions.calculateNumeric(val);
                                return num === Math.round(num) ? num : NaN;
                            },
                            format: function(val) {
                                return n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.Integer].format(val);
                            },
                            parse: function(val) {
                                return (typeof val === "number")
                                    ? Math.round(val)
                                    : n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.Integer].parse(val);
                            }
                        },
                        2: {
                            calculate: function(val) {
                                return n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.DateTime].calculate(val);
                            },
                            format: function(val) {
                                return n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.DateTime].format(val);
                            },
                            parse: function(val) {
                                return (val instanceof Date)
                                    ? val
                                    : n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.DateTime].parse(val);
                            }
                        },
                        3: {
                            calculate: function(val) {
                                return val;
                            },
                            format: function(val) {
                                return val;
                            },
                            parse: function(val) {
                                return val;
                            }
                        }
                    }
                },

                ButtonEnabledState: {
                    Enabled: 0,
                    Auto: 1,
                    Disabled: 2
                }
            };

            function getFormat(e) {
                return function(val) {
                    for (var p in e) {
                        if (e.hasOwnProperty(p)) {
                            if (e[p] === val)
                                return p;
                        };
                    };
                    return undefined;
                };
            };

            function getParse(e) {
                return function(val) {
                    return e[val];
                }
            }

            for (var e in n$.NewEnums) {
                if (n$.NewEnums.hasOwnProperty(e) && e !== "behavior") {
                    var thisEnum = n$.NewEnums[e];
                    thisEnum.format = getFormat(thisEnum);
                    thisEnum.parse = getParse(thisEnum);
                };
            };
        })
    .depend("Css");
;
n$.addModule("Events",
    function () {

        var state = {
            events: [],
            inEvent: null,
            dimTimeout: 0,
            dimmed: false,

            processNextEvent: function () {
                var e = this.events.pop();
                n$.Debug.Event.log({
                    event: "Dequeueing next InvokeExtensibilityMethod",
                    data: {
                        event: e.event.name,
                        args: e.args,
                        eventsInQueue: this.events.length
                    }
                });
                setTimeout(function () {
                    e.args &&
                        (
                            e.args.ready = true,
                            e.args.originalArgs = e.originalArgs
                        );
                    e.event.raise(e.args, e.callback);
                    if (state.events.length === 0) {
                        state.inEvent = null;
                    };
                });
            }
        };

        n$.Event = function (event, skipIfBusy, rejectDuplicate) {
            typeof event === "object" &&
                event &&
                (
                    event.skipIfBusy !== undefined && (skipIfBusy = event.skipIfBusy),
                    event.rejectDuplicate !== undefined && (rejectDuplicate = event.rejectDuplicate),
                    event = event.name
                );
            if (!event) {
                debugger;
                throw "An attempt was made to instantiate an instance of n$.Event without specifying the event name. Switch the debugger on, and inspect the stack trace.";
            };
            this.name = event;
            this.skipIfBusy = !!skipIfBusy;
            this.rejectDuplicate = rejectDuplicate === undefined ? true : !!rejectDuplicate;
            this.isMethod = false;
            this.extensibilityMethodName = this.name;
        };
        n$.Event.prototype.raise = function (args, callback) {
            var me = this, originalArgs = undefined;

            typeof args === "function" && typeof callback === "undefined" && (callback = args, args = undefined);
            (!args || !args.ready) &&
                me.isMethod &&
                (
                    (originalArgs = me.processArguments(args === undefined ? {} : args)),
                    (args = [me.name, originalArgs])
                );

            if (!n$.NAV.Busy) {
                state.inEvent = { event: me, args: args };
                n$.Debug.Event.log({ event: "n$.Event.prototype.raise", data: { event: me.name, args: args } });
                typeof me.filter === "function" && me.filter(args);
                Microsoft.Dynamics.NAV.InvokeExtensibilityMethod(me.extensibilityMethodName,
                    args,
                    false,
                    function () {
                        n$.Debug.Event.log({ event: "Finished executing", data: { event: me.name, args: args } });
                        callback && setTimeout(callback);
                        me.isMethod &&
                            me.callback &&
                            setTimeout(function () {
                                me.callback(args && args.ready
                                    ? args.originalArgs
                                    : originalArgs);
                            });

                        if (state.events.length === 0) {
                            state.inEvent = null;
                        } else {
                            n$.NAV.Busy || state.processNextEvent();
                        };
                    });
            } else {
                if (me.skipIfBusy) {
                    n$.Debug.Event
                        .log({ event: "Client is busy, skipping event", data: { event: me.name, args: args } });
                    return;
                };

                var eventData = { event: me, args: args, callback: callback, originalArgs: originalArgs };
                n$.Debug.Event.log({
                    event: "Queueing InvokeExtensibilityMethod",
                    data: eventData
                });
                state.events.push(eventData);
            }
        };

        n$.Event.Method = function (event, skipIfBusy, rejectDuplicate) {
            var processArguments = function (args) { return args; };

            var filter = function () { };
            var noSupport = function () {
                return false;
            };

            typeof event === "object" &&
                event &&
                (
                    typeof event.filter === "function" && (filter = event.filter),
                    event.skipIfBusy !== undefined && (skipIfBusy = event.skipIfBusy),
                    event.rejectDuplicate !== undefined && (rejectDuplicate = event.rejectDuplicate),
                    typeof event.processArguments === "function" && (processArguments = event.processArguments),
                    typeof event.callback === "function" && (this.callback = event.callback),
                    typeof event.noSupport === "function" && (noSupport = event.noSupport),
                    event = event.name
                );
            this.name = event;
            this.skipIfBusy = !!skipIfBusy;
            this.rejectDuplicate = rejectDuplicate === undefined ? true : !!rejectDuplicate;
            this.isMethod = true;
            this.processArguments = processArguments;
            this.filter = filter;
            n$.Event.Method.noSupport[event] = noSupport;
        };
        n$.Event.Method.prototype = new n$.Event("OnInvokeMethod");
        n$.Event.Method.noSupport = {};

        n$.Events = {
            FrameworkReady: new n$.Event("OnFrameworkReady"),
            Action: new n$.Event({ name: "OnAction" }),

            // Methods
            KeepAlive: new n$.Event.Method({ name: "KeepAlive", skipIfBusy: true }),
            AbortWorkflow: new n$.Event.Method({ name: "AbortWorkflow" }),
            AbortAllWorkflows: new n$.Event.Method({ name: "AbortAllWorkflows" }),
            BeforeWorkflow: new n$.Event.Method({ name: "BeforeWorkflow" }),
            Login: new n$.Event.Method({ name: "Login" }),
            Unlock: new n$.Event.Method({ name: "Unlock" }),
            TextEnter: new n$.Event.Method({
                name: "TextEnter",
                filter: function (args) {
                    if (!args || !args.length || args.length < 1)
                        return;
                    args[1].data = args[1].data || (n$.State.dataStore instanceof n$.Data.DataStore && n$.State.dataStore.getState());
                }
            }),
            RequestView: new n$.Event.Method({ name: "RequestView" }),
            CloseRequested: new n$.Event.Method({ name: "CloseRequested" }),
            FrontEndId: new n$.Event.Method({ name: "FrontEndId" }),
            InitializationComplete: new n$.Event.Method({ name: "InitializationComplete" }),
            MajorTomEvent: new n$.Event.Method({ name: "MajorTomEvent" })
        };

        n$.NAV.OnBusyChanged = function () {
            n$.Debug.Event.log({ event: "Client busy state changed", data: n$.NAV.Busy ? "Busy" : "Idle" });
            n$.Capabilities.SetBusy.setBusy(n$.NAV.Busy);

            if (n$.NAV.Busy) {
                state.dimmed = false;
                state.dimTimeout = setTimeout(function () {
                    state.dimmed = true;
                    n$.Window.DimScreen(true);
                },
                    2000);
            } else {
                clearTimeout(state.dimTimeout);
                state.dimmed && n$.Window.DimScreen(false);
                state.events.length && state.processNextEvent();
            }
        };
    });

;
n$.addModule("External.Android",
    function () {
        var android = window.top.AndroidPOS;

        n$.ExternalObject.Android = function () {
            n$.ExternalObject.call(this, "Android App");

            // Specific function implementations
            Object.defineProperties(this,
                {
                    announceCapability:
                    {
                        value: (name, id, description) => new Promise(function (fulfill) {
                            try {
                                android.announceCapability(name, id, description);
                                fulfill();
                            } catch (e) {
                                n$.Debug.External.warning(
                                    "Android app does not seem to support the capabilities feature. Please upgrade to a new version. Error: " + e);
                                fulfill(e);
                            }
                        })
                    },
                    getCapability: {
                        value:
                            guid => new Promise(function (fulfill) {
                                try {
                                    fulfill(android.getCapability(guid));
                                } catch (e) {
                                    n$.Debug.External.warning(
                                        "Android app does not seem to support the capabilities feature. Please upgrade to a new version. Error: " + e);
                                    fulfill(false);
                                }
                            })
                    },

                    // Secure Input
                    setSecure: {
                        value: secure => android.setSecure(secure)
                    },

                    // Stargate
                    invokeProxy: {
                        value: (envelope, handle) => Promise.resolve(android.invokeProxy(envelope, handle))
                    },
                    invokeProxyAsync: {
                        value: envelope => android.invokeProxyAsync(envelope)
                    },
                    advertiseStargatePackages: {
                        value: content => Promise.resolve(android.advertiseStargatePackages(content))
                    },
                    appGatewayProtocolResponse: {
                        value: (event, data) => android.appGatewayProtocolResponse(event, data)
                    },

                    // Walkthrough
                    setWalkthroughCompleted: {
                        value: (id, completed) => android.setWalkthroughCompleted(id, completed)
                    },
                    isWalkthroughCompleted: {
                        value: id => Promise.resolve(android.isWalkthroughCompleted(id))
                    },
                    indicateWalkthroughAvailable: {
                        value: id => android.indicateWalkthroughAvailable(id)
                    },
                    registerWalkthrough: {
                        value: (id, name, description) => android.registerWalkthrough(id, name, description)
                    },
                    requestWalkthroughs: {
                        value: () => android.requestWalkthroughs()
                    },

                    // SetBusy
                    setBusy: {
                        value: busy => android.setBusy(busy)
                    },

                    // Events
                    activeSale: {
                        value: active => android.activeSale(active)
                    },
                    documentReady: {
                        value: name => android.documentReady(name)
                    },
                    getFrontEndId: {
                        value: () => Promise.resolve(android.getFrontEndId())
                    },
                    reload: {
                        value: () => android.reload()
                    },
                    invokeFrontEndEvent: {
                        value: (event, obj) => android.invokeFrontEndEvent(event, obj)
                    },
                    eventInvocationCompleted: {
                        value: reason => android.eventInvocationCompleted(reason)
                    },

                    // Keyboard Presses
                    registerKeyPress: {
                        value: keypress => android.registerKeyPress(keypress)
                    },
                    popupActive: {
                        value: active => android.popupActive(active)
                    },
                    actionActive: {
                        value: active => android.actionActive(active)
                    },
                    navDialogActive: {
                        value: active => android.navDialogActive(active)
                    },

                    // Kiosk
                    isKiosk: {
                        value: () => Promise.resolve(android.isKiosk())
                    },
                    disableKiosk: {
                        value: () => Promise.resolve(android.disableKiosk())
                    },

                    // Events
                    activeSale: {
                        value: function (active) {
                            android.activeSale(active);
                        }
                    },
                    documentReady: {
                        value: function (name) {
                            android.documentReady(name);
                        }
                    },
                    getFrontEndId: {
                        value: function () {
                            return Promise.resolve(android.getFrontEndId());
                        }
                    },
                    invokeFrontEndEvent: {
                        value: function (event, obj) {
                            android.invokeFrontEndEvent(event, JSON.stringify(obj));
                        }
                    }
                });
        };

        // Mandatory part - always inherit from n$.ExternalObject
        n$.inherit(n$.ExternalObject.Android, n$.ExternalObject);

        // ExternalObject prototype overriders
        (function () {
            n$.ExternalObject.Android.prototype.priority = function () {
                return 10;
            };
            n$.ExternalObject.Android.prototype.isApplicable = function () {
                return n$.Framework.Environment.Android() && typeof android === "object";
            };
        })();

        n$.ExternalObject.registerExternalObject(new n$.ExternalObject.Android());
    })
    .depend("External");
;
n$.addModule("External.Browser",
    function () {
        var cookieBasedWalkthrough = {
            isWalkthroughCompleted: function (w) {
                return Promise.resolve(n$.Cookies.getCookie("walkthrough_" + w) === "true");
            },
            setWalkthroughCompleted: function (w, completed) {
                n$.Cookies.setCookie("walkthrough_" + w, completed);
            },
            indicateWalkthroughAvailable: function () {
                // TODO: do something in the browser
            }
        };

        // Plain browser external communication management object
        n$.ExternalObject.Browser = function () {
            n$.ExternalObject.call(this, "Plain browser");

            // Specific function implementations
            Object.defineProperties(this,
                {
                    // Capabilities
                    announceCapability:
                    {
                        value:
                            function (name, id) {
                                n$.Debug.External
                                    .log("Announcing capability to browser: [" + name + ", " + id + "]");
                                return Promise.resolve();
                            }
                    },
                    getCapability: {
                        value:
                            function (id) {
                                return Promise.resolve([
                                    "54cf107d-b470-42a2-9570-7516bedee51a",
                                    "c87cf4ea-31e8-4493-97d4-c359baa4eab9",
                                    "__test__"
                                ].indexOf(id) >=
                                    0);
                            }
                    },

                    // Secure Input
                    setSecure: {
                        value: function () {
                            // Nothing to do in the browser mode.
                        }
                    },

                    // Walkthrough
                    setWalkthroughCompleted: {
                        value: function (id, completed) {
                            cookieBasedWalkthrough.setWalkthroughCompleted(id, completed);
                        }
                    },
                    isWalkthroughCompleted: {
                        value: function (id) {
                            return cookieBasedWalkthrough.isWalkthroughCompleted(id);
                        }
                    },
                    indicateWalkthroughAvailable: {
                        value: function (id) {
                            cookieBasedWalkthrough.indicateWalkthroughAvailable(id);
                        }
                    },
                    registerWalkthrough: {
                        value: function () {
                            // Nothing to do in the browser mode.
                        }
                    },
                    requestWalkthroughs: {
                        value: function () {
                            // Nothing to do in the browser mode
                        }
                    }
                });
        };

        // Mandatory part - always inherit from n$.ExternalObject
        n$.inherit(n$.ExternalObject.Browser, n$.ExternalObject);

        // ExternalObject prototype overriders
        (function () {
            // When inheriting from n$.ExternalObject you must provide these two functions to enable the framework to find the
            // applicable object capable of handling external calls to the environment.

            n$.ExternalObject.Browser.prototype.priority = function () {
                // Return a relative priority. Objects with smaller priority number will be evaluated for applicability first.
                return 99;
            };
            n$.ExternalObject.Browser.prototype.isApplicable = function () {
                // Evaluates the applicability of this object to the current environment.
                n$.Debug.External.log(
                    "Browser-only host handler. This session will use reduced functionality and is recommended only for testing, debugging, and support purposes.");
                return true;
            };
        })();

        n$.ExternalObject.registerExternalObject(new n$.ExternalObject.Browser());
    })
    .depend("Cookies", "External");
// TODO: FIX ALL TODOs in this file
;
(function () {
    var isCef = /CefSharp/i.test(navigator.userAgent) && typeof CefSharp === "object" && CefSharp;
    var isAsync = window.top.$_np_cef_async;
    if (isCef) {
        n$.available.external = false;
        n$.initReady("cef", false);
        CefSharp.BindObjectAsync("csharpHost").then(function (result) {
            n$.ready(function () {
                window.top.$cefSharp = csharpHost;
            });
            n$.initReady("cef", true);
        });
    };

    n$.addModule("External.Chromium.async",
        function () {
            n$.ExternalObject.Chromium = function () {
                n$.ExternalObject.call(this, "Chromium-based Major Tom (asynchronous)");

                // Specific function implementations
                Object.defineProperties(this,
                    {
                        // Capabilities
                        announceCapability:
                        {
                            value:
                                function (name, id, description) {
                                    return new Promise(function (fulfill) {
                                        try {
                                            csharpHost
                                                .announceCapability(name, id, description)
                                                .then(fulfill);
                                        } catch (e) {
                                            n$.Debug.External.warning(
                                                "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                            fulfill(e);
                                        }
                                    });
                                }
                        },
                        getCapability: {
                            value:
                                function (id) {
                                    try {
                                        return csharpHost.getCapability(id);
                                    } catch (e) {
                                        n$.Debug.External.warning(
                                            "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                        return Promise.resolve(false);
                                    }
                                }
                        },

                        // Secure Input
                        setSecure: {
                            value: function (secure) {
                                try {
                                    csharpHost.setSecure(!!secure);
                                } catch (e) {
                                    n$.Debug.External.warning(
                                        "Major Tom does not seem to support the SetSecure method. Please upgrade Major Tom to a new version.");
                                }
                            }
                        },

                        // Stargate
                        invokeProxy: {
                            value: function (envelope, handle) {
                                return csharpHost.invokeProxyWithHandle(envelope, handle);
                            }
                        },
                        invokeProxyAsync: {
                            value: function (envelope) {
                                csharpHost.invokeProxyAsync(envelope);
                            }
                        },
                        advertiseStargatePackages: {
                            value: function (content) {
                                try {
                                    return csharpHost.advertiseStargatePackages(JSON.stringify(content));
                                } catch (e) {
                                    n$.Debug.External.warning(
                                        "Major Tom does not seem to support the AdvertiseStargatePackages method. Please upgrade Major Tom to a new version.");
                                    return null;
                                }
                            }
                        },
                        appGatewayProtocolResponse: {
                            value: function (event, data) {
                                csharpHost.protocolResponse(event, data);
                            }
                        },

                        // Walkthrough
                        setWalkthroughCompleted: {
                            value: function (id, completed) {
                                csharpHost.setWalkthroughCompleted(id, completed);
                            }
                        },
                        isWalkthroughCompleted: {
                            value: function (id) {
                                return csharpHost.isWalkthroughCompleted(id);
                            }
                        },
                        indicateWalkthroughAvailable: {
                            value: function (id) {
                                csharpHost.indicateWalkthroughAvailable(id);
                            }
                        },
                        registerWalkthrough: {
                            value: function (id, name, description) {
                                csharpHost.registerWalkthrough(id, name, description);
                            }
                        },
                        requestWalkthroughs: {
                            value: function () {
                                csharpHost.requestWalkthroughs();
                            }
                        },

                        // SetBusy
                        setBusy: {
                            value: function (busy) {
                                csharpHost.setBusy(busy);
                            }
                        },

                        // Events
                        activeSale: {
                            value: function (active) {
                                csharpHost.activeSale(active);
                            }
                        },
                        documentReady: {
                            value: function (name) {
                                csharpHost.documentReady(name);
                            }
                        },
                        getFrontEndId: {
                            value: function () {
                                return csharpHost.getFrontEndId();
                            }
                        },
                        reload: {
                            value: function () {
                                csharpHost.reload();
                            }
                        },
                        invokeFrontEndEvent: {
                            value: function (event, obj) {
                                csharpHost.invokeFrontEndEvent(event, JSON.stringify(obj));
                            }
                        },
                        eventInvocationCompleted: {
                            value: function (reason) {
                                typeof csharpHost.eventInvocationCompleted === "function" && csharpHost.eventInvocationCompleted(reason);
                            }
                        },

                        // Keyboard Presses
                        registerKeyPress: {
                            value: function (keypress) {
                                csharpHost.registerKeyPress(keypress);
                            }
                        },
                        popupActive: {
                            value: function (active) {
                                csharpHost.popupActive(active);
                            }
                        },
                        actionActive: {
                            value: function (active) {
                                csharpHost.actionActive(active);
                            }
                        },
                        navDialogActive: {
                            value: function (active) {
                                csharpHost.navDialogActive(active);
                            }
                        },

                        // Kiosk
                        isKiosk: {
                            value: function () {
                                return csharpHost.isKiosk();
                            }
                        },
                        disableKiosk: {
                            value: function () {
                                csharpHost.disableKiosk();
                            }
                        },

                        // Administrative Templates
                        applyTemplate: {
                            value: template => csharpHost.applyTemplate(template)
                        }
                    });
            };

            // Mandatory part - always inherit from n$.ExternalObject
            n$.inherit(n$.ExternalObject.Chromium, n$.ExternalObject);

            // ExternalObject prototype overriders
            (function () {
                n$.ExternalObject.Chromium.prototype.priority = function () {
                    return 5; // Evaluates before MajorTom evaluation
                };
                n$.ExternalObject.Chromium.prototype.isApplicable = function () {
                    return isCef && isAsync;
                };
            })();

            n$.ExternalObject.registerExternalObject(new n$.ExternalObject.Chromium());
        })
        .depend("External");
})();
;
(function () {
    var isCef = /CefSharp/i.test(navigator.userAgent) && typeof CefSharp === "object" && CefSharp;
    var isAsync = window.top.$_np_cef_async;
    if (isCef) {
        n$.available.external = false;
        n$.initReady("cef", false);
        CefSharp.BindObjectAsync("csharpHost").then(function (result) {
            n$.ready(function () {
                window.top.$cefSharp = csharpHost;
            });
            n$.initReady("cef", true);
        });
    };

    n$.addModule("External.Chromium",
        function () {
            n$.ExternalObject.Chromium = function () {
                n$.ExternalObject.call(this, "Chromium-based Major Tom (synchronous)");

                // Specific function implementations
                Object.defineProperties(this,
                    {
                        // Capabilities
                        announceCapability:
                        {
                            value:
                                function (name, id, description) {
                                    return new Promise(function (fulfill) {
                                        try {
                                            csharpHost.announceCapability(name, id, description);
                                            fulfill();
                                        } catch (e) {
                                            n$.Debug.External.warning(
                                                "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                            fulfill(e);
                                        }
                                    });
                                }
                        },
                        getCapability: {
                            value:
                                function (id) {
                                    return new Promise(function (fulfill) {
                                        try {
                                            fulfill(csharpHost.getCapability(id));
                                        } catch (e) {
                                            n$.Debug.External.warning(
                                                "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                            fulfill(false);
                                        }
                                    });
                                }
                        },

                        // Secure Input
                        setSecure: {
                            value: function (secure) {
                                try {
                                    csharpHost.setSecure(!!secure);
                                } catch (e) {
                                    n$.Debug.External.warning(
                                        "Major Tom does not seem to support the SetSecure method. Please upgrade Major Tom to a new version.");
                                }
                            }
                        },

                        // Stargate
                        invokeProxy: {
                            value: function (envelope, handle) {
                                return Promise.resolve(csharpHost.invokeProxyWithHandle(envelope, handle));
                            }
                        },
                        invokeProxyAsync: {
                            value: function (envelope) {
                                csharpHost.invokeProxyAsync(envelope);
                            }
                        },
                        advertiseStargatePackages: {
                            value: function (content) {
                                return new Promise(function (fulfill, reject) {
                                    try {
                                        fulfill(csharpHost.advertiseStargatePackages(JSON.stringify(content)));
                                    } catch (e) {
                                        n$.Debug.External.warning(
                                            "Major Tom does not seem to support the AdvertiseStargatePackages method. Please upgrade Major Tom to a new version.");
                                        reject(e);
                                    }
                                });
                            }
                        },
                        appGatewayProtocolResponse: {
                            value: function (event, data) {
                                csharpHost.protocolResponse(event, data);
                            }
                        },

                        // Walkthrough
                        setWalkthroughCompleted: {
                            value: function (id, completed) {
                                csharpHost.setWalkthroughCompleted(id, completed);
                            }
                        },
                        isWalkthroughCompleted: {
                            value: function (id) {
                                return Promise.resolve(csharpHost.isWalkthroughCompleted(id));
                            }
                        },
                        indicateWalkthroughAvailable: {
                            value: function (id) {
                                csharpHost.indicateWalkthroughAvailable(id);
                            }
                        },
                        registerWalkthrough: {
                            value: function (id, name, description) {
                                csharpHost.registerWalkthrough(id, name, description);
                            }
                        },
                        requestWalkthroughs: {
                            value: function () {
                                csharpHost.requestWalkthroughs();
                            }
                        },

                        // SetBusy
                        setBusy: {
                            value: function (busy) {
                                csharpHost.setBusy(busy);
                            }
                        },

                        // Events
                        activeSale: {
                            value: function (active) {
                                csharpHost.activeSale(active);
                            }
                        },
                        documentReady: {
                            value: function (name) {
                                csharpHost.documentReady(name);
                            }
                        },
                        getFrontEndId: {
                            value: function () {
                                return Promise.resolve(csharpHost.getFrontEndId());
                            }
                        },
                        reload: {
                            value: function () {
                                csharpHost.reload();
                            }
                        },
                        invokeFrontEndEvent: {
                            value: function (event, obj) {
                                csharpHost.invokeFrontEndEvent(event, JSON.stringify(obj));
                            }
                        },
                        eventInvocationCompleted: {
                            value: function (reason) {
                                typeof csharpHost.eventInvocationCompleted === "function" && csharpHost.eventInvocationCompleted(reason);
                            }
                        },

                        // Keyboard Presses
                        registerKeyPress: {
                            value: function (keypress) {
                                csharpHost.registerKeyPress(keypress);
                            }
                        },
                        popupActive: {
                            value: function (active) {
                                csharpHost.popupActive(active);
                            }
                        },
                        actionActive: {
                            value: function (active) {
                                csharpHost.actionActive(active);
                            }
                        },
                        navDialogActive: {
                            value: function (active) {
                                csharpHost.navDialogActive(active);
                            }
                        },

                        // Kiosk
                        isKiosk: {
                            value: function () {
                                return Promise.resolve(csharpHost.isKiosk());
                            }
                        },
                        disableKiosk: {
                            value: function () {
                                csharpHost.disableKiosk();
                            }
                        },

                        // Administrative template
                        applyTemplate: {
                            value: template=> Promise.resolve(csharpHost.applyTemplate(template))
                        }
                    });
            };

            // Mandatory part - always inherit from n$.ExternalObject
            n$.inherit(n$.ExternalObject.Chromium, n$.ExternalObject);

            // ExternalObject prototype overriders
            (function () {
                n$.ExternalObject.Chromium.prototype.priority = function () {
                    return 5; // Evaluates before MajorTom evaluation
                };
                n$.ExternalObject.Chromium.prototype.isApplicable = function () {
                    return isCef && !isAsync;
                };
            })();

            n$.ExternalObject.registerExternalObject(new n$.ExternalObject.Chromium());
        })
        .depend("External");
})();
;
n$.addModule("External.iOS",
    function () {
        n$.ExternalObject.iOS = function () {
            n$.ExternalObject.call(this, "iOS App");

            var methodInvocationId = 0;
            var isBusy = false;
            var funnel = [];

            function postMessage(method, callback, args) {
                if (isBusy) {
                    console.debug(`iOS Funnel is busy. ${method} with callback at ${callback} is queued.`);
                    funnel.push({ method, callback, args });
                    return;
                }
                isBusy = true;

                var handler = window.webkit.messageHandlers[method];
                if (!handler || !handler.postMessage)
                    throw new Error(`The iOS app does not seem to implement the ${method} postMessage handler.`);

                var message = {
                    callbackExpected: !!callback,
                    callbackFunctionName: callback || null,
                    arguments: args
                };
                console.debug(`iOS postMessage invocation for ${method} with callback at ${callback}`);
                handler.postMessage(JSON.stringify(message));
            }

            function openFunnel() {
                if (!funnel.length)
                    return;

                var { method, callback, args } = funnel.shift();
                console.debug(`Processing next message through the funnel. ${funnel.length} remaining`);
                postMessage(method, callback, args);
            }

            function iOSPromise(method, ...args) {
                var promise = new Promise((fulfill, reject) => {
                    var timeout = 60000;
                    var resolved = false;
                    if (typeof method === "object") {
                        timeout = method.timeout || timeout;
                        method = method.name;
                    }

                    var id = setTimeout(() => {
                        if (resolved)
                            return;

                        resolved = true;
                        reject(`Timeout awaiting iOSPromise '${method}' to resolve.`);
                        deleteMethodResponseCallback();
                    }, timeout);

                    function deleteMethodResponseCallback() {
                        if (window.top[methodResponseId])
                            delete window.top[methodResponseId];
                    }

                    var methodResponseId = `_np_methodResponse_${method}_${++methodInvocationId}`;
                    window.top[methodResponseId] = result => {
                        console.debug(`iOS postMessage response received on ${methodResponseId}`),
                        isBusy = false;

                        if (resolved) {
                            openFunnel();
                            return;
                        }

                        resolved = true;
                        clearTimeout(id);

                        fulfill(result);
                        deleteMethodResponseCallback();
                        openFunnel();
                    }

                    try {
                        postMessage(method, methodResponseId, args);
                    }
                    catch (e) {
                        console.error(`iOS postMessage failed with ${e}`);
                        clearTimeout(id);
                        deleteMethodResponseCallback();
                        reject(e);
                        setTimeout(openFunnel);
                    }
                });

                promise.catch(e =>
                    n$.Debug.External.warning(`An unexpected error occurred during execution of [${method}] method: ${e}`));

                return promise;
            }

            function iOSVoidCall(method, ...args) {
                try {
                    var promise = iOSPromise(method, ...args);
                    promise.then(() => {}).catch(() => {});
                    //postMessage(method, null, args);
                }
                catch (e) {
                    n$.Debug.External.warning(`Error executing [${method}]: ${e}`);
                }
            }

            // Specific function implementations
            const msgNoCapability = "The iOS app does not seem to support the capabilities feature. Please upgrade the iOS app to a new version.";
            Object.defineProperties(this,
                {
                    announceCapability:
                    {
                        value: (name, id, description) => {
                            return new Promise(fulfill => {
                                try {
                                    iOSPromise("announceCapability", name, id, description)
                                        .then(() => {
                                            fulfill();
                                        })
                                        .catch(e => {
                                            fulfill(e);
                                        });
                                } catch (e) {
                                    n$.Debug.External.warning(msgNoCapability);
                                    fulfill(e);
                                }
                            });
                        }
                    },
                    getCapability: {
                        value: guid => iOSPromise("getCapability", guid)
                    },

                    // Secure Input
                    setSecure: {
                        value: secure => iOSVoidCall("setSecure", secure)
                    },

                    // Stargate
                    invokeProxy: {
                        value: (envelope, handle) => iOSPromise("invokeProxy", envelope, handle)
                    },
                    invokeProxyAsync: {
                        value: envelope => iOSVoidCall("invokeProxyAsync", envelope)
                    },
                    advertiseStargatePackages: {
                        value: content => iOSPromise("advertiseStargatePackages", content)
                    },
                    appGatewayProtocolResponse: {
                        value: (event, data) => iOSVoidCall("appGatewayProtocolResponse", event, data)
                    },

                    // Walkthrough
                    setWalkthroughCompleted: {
                        value: (id, completed) => iOSVoidCall("setWalkthroughCompleted", id, completed)
                    },
                    isWalkthroughCompleted: {
                        value: id => iOSPromise("isWalkthroughCompleted", id)
                    },
                    indicateWalkthroughAvailable: {
                        value: id => iOSVoidCall("indicateWalkthroughAvailable", id)
                    },
                    registerWalkthrough: {
                        value: (id, name, description) => iOSVoidCall("registerWalkthrough", id, name, description)
                    },
                    requestWalkthroughs: {
                        value: () => iOSVoidCall("requestWalkthroughs")
                    },

                    // SetBusy
                    setBusy: {
                        value: busy => iOSVoidCall("setBusy", busy)
                    },

                    // Events
                    activeSale: {
                        value: active => iOSVoidCall("activeSale", active)
                    },
                    documentReady: {
                        value: name => iOSVoidCall("documentReady", name)
                    },
                    getFrontEndId: {
                        value: () => iOSPromise("getFrontEndId")
                    },
                    reload: {
                        value: () => iOSVoidCall("reload")
                    },
                    invokeFrontEndEvent: {
                        value: (event, obj) => iOSVoidCall("invokeFrontEndEvent", event, obj)
                    },
                    eventInvocationCompleted: {
                        value: reason => iOSVoidCall("eventInvocationCompleted", reason)
                    },

                    // Keyboard Presses
                    registerKeyPress: {
                        value: keypress => iOSVoidCall("registerKeyPress", keypress)
                    },
                    popupActive: {
                        value: active => iOSVoidCall("popupActive", active)
                    },
                    actionActive: {
                        value: active => iOSVoidCall("actionActive", active)
                    },
                    navDialogActive: {
                        value: active => iOSVoidCall("navDialogActive", active)
                    },

                    // Kiosk
                    isKiosk: {
                        value: () => iOSPromise("isKiosk")
                    },
                    disableKiosk: {
                        value: () => iOSPromise("disableKiosk")
                    }
                });
        };

        // Mandatory part - always inherit from n$.ExternalObject
        n$.inherit(n$.ExternalObject.iOS, n$.ExternalObject);

        // ExternalObject prototype overriders
        (function () {
            n$.ExternalObject.iOS.prototype.priority = function () {
                return 20;
            };
            n$.ExternalObject.iOS.prototype.isApplicable = function () {
                return n$.Framework.Environment.iOS() && window.webkit && window.webkit.messageHandlers;
            };
        })();

        n$.ExternalObject.registerExternalObject(new n$.ExternalObject.iOS());
    })
    .depend("External");
;
n$.addModule("External",
    function () {

        // Objects
        (function () {
            var coreFunctions = [
                "getCapability",
                "announceCapability"
            ],
                registeredExternalObjects = [],
                currentExternalObject;

            function getUnsupportedFunction(name) {
                var shown = false;
                const unsupportedMessage = `Unsupported external method called: [${name}].`;

                return function () {
                    if (!shown) {
                        shown = true;
                        n$.Debug.Framework.warning(unsupportedMessage);
                    }
                    var promise = Promise.reject(unsupportedMessage);
                    promise.catch(() => { }); // default handler to avoid browser console log errors
                    return promise;
                };
            };

            function defineUnsupportedFunction(object, name) {
                Object.defineProperty(object,
                    name,
                    {
                        value: getUnsupportedFunction(name)
                    });
            };

            n$.ExternalObject = function (name) {
                if (!(name && typeof name === "string"))
                    n$.Debug.External.error("An attempt was made to register an external object without a name.",
                        false,
                        true);

                Object.defineProperty(this,
                    "name",
                    {
                        value: name
                    });
            };

            n$.ExternalObject.prototype.isApplicable = function () {
                return false;
            };
            n$.ExternalObject.prototype.priority = function () {
                return 1000;
            };

            n$.ExternalObject.getActual = function () {
                /// <summary>Returns the currently applicable instance of the external object.</summary>
                if (currentExternalObject)
                    return currentExternalObject;

                registeredExternalObjects.sort(function (a, b) {
                    if (a.priority() < b.priority(b))
                        return -1;
                    if (a.priority() > b.priority(b))
                        return 1;
                    return 0;
                })
                    .forEach(function (e) {
                        if (currentExternalObject)
                            return;
                        currentExternalObject = currentExternalObject || (e.isApplicable() && e);
                    });
                currentExternalObject = currentExternalObject || new n$.ExternalObject();

                n$.Debug.External.log(currentExternalObject.name +
                    " is selected as the actual external functionality handler");

                return currentExternalObject;
            };

            n$.ExternalObject.extendPrototype = function (descriptor) {
                if (!descriptor)
                    return;

                for (var func in descriptor) {
                    if (descriptor.hasOwnProperty(func) && typeof descriptor[func] === "function") {
                        defineUnsupportedFunction(n$.ExternalObject.prototype, func);
                    }
                }
            };

            n$.ExternalObject.registerExternalObject = function (object) {
                /// <summary>Registers the presence of an object capable of handling external calls.</summary>
                /// <param name="object">Object to register as external object</param>
                if (!(object instanceof n$.ExternalObject))
                    n$.Debug.External
                        .error("An attempt was made to register an external object that is not an instance of n$.ExternalObject.", false, true);

                n$.Debug.External.log("Registering an external object handler: " + object.name);

                currentExternalObject = null;
                registeredExternalObjects.push(object);
            };

            // Initializes the base external object prototype with core functions
            coreFunctions.forEach(function (name) {
                defineUnsupportedFunction(n$.ExternalObject.prototype, name);
            });
        })();
    })
    .depend("Debug", "Framework");
;
n$.addModule("External.Loader",
        function() {
            /*
            
            The purpose of this module is to make sure all individual external object handler modules are properly loaded, before functionality that depends on external object can be initialized.
        
            Make sure to list here any external modules you create.
        
            */
        })
    .depend(
        "External",
        "External.Browser",
        "External.Chromium",
        "External.Chromium.async",
        "External.MajorTom",
        "External.iOS",
        "External.Android");
;
n$.addModule("External.MajorTom",
    function () {

        // Major Tom external communication management object
        n$.ExternalObject.MajorTom = function () {
            n$.ExternalObject.call(this, "Major Tom for Windows, based on Internet Explorer");

            // Specific function implementations
            Object.defineProperties(this,
                {
                    // Core
                    announceCapability: {
                        value:
                            function (name, id, description) {
                                return new Promise(function (fulfill) {
                                    try {
                                        window.external.AnnounceCapability(name, id, description);
                                        fulfill();
                                    } catch (e) {
                                        n$.Debug.External.warning(
                                            "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                        fulfill(e);
                                    }
                                });
                            }
                    },
                    getCapability: {
                        value:
                            function (id) {
                                return new Promise(function (fulfill) {
                                    try {
                                        fulfill(window.external.GetCapability(id));
                                    } catch (e) {
                                        n$.Debug.External.warning(
                                            "Major Tom does not seem to support the capabilities feature. Please upgrade Major Tom to a new version. Error: " + e);
                                        fulfill(false);
                                    }
                                });
                            }
                    },

                    // Secure Input
                    setSecure: {
                        value: function (secure) {
                            try {
                                window.external.SetSecure(!!secure);
                            } catch (e) {
                                n$.Debug.External.warning(
                                    "Major Tom does not seem to support the SetSecure method. Please upgrade Major Tom to a new version.");
                            }
                        }
                    },

                    // Stargate
                    invokeProxy: {
                        value: function (envelope, handle) {
                            return Promise.resolve(window.external.InvokeProxyWithHandle(envelope, handle));
                        }
                    },
                    invokeProxyAsync: {
                        value: function (envelope) {
                            window.external.InvokeProxyAsync(envelope);
                        }
                    },
                    advertiseStargatePackages: {
                        value: function (content) {
                            return new Promise(function (fulfill, reject) {
                                try {
                                    fulfill(window.external.AdvertiseStargatePackages(JSON.stringify(content)));
                                } catch (e) {
                                    n$.Debug.External.warning(
                                        "Major Tom does not seem to support the AdvertiseStargatePackages method. Please upgrade Major Tom to a new version.");
                                    reject(e);
                                }
                            });
                        }
                    },
                    appGatewayProtocolResponse: {
                        value: function (event, data) {
                            window.external.ProtocolResponse(event, data);
                        }
                    },

                    // Walkthrough
                    setWalkthroughCompleted: {
                        value: function (id, completed) {
                            window.external.SetWalkthroughCompleted(id, completed);
                        }
                    },
                    isWalkthroughCompleted: {
                        value: function (id) {
                            return Promise.resolve(window.external.IsWalkthroughCompleted(id));
                        }
                    },
                    indicateWalkthroughAvailable: {
                        value: function (id) {
                            window.external.IndicateWalkthroughAvailable(id);
                        }
                    },
                    registerWalkthrough: {
                        value: function (id, name, description) {
                            window.external.RegisterWalkthrough(id, name, description);
                        }
                    },
                    requestWalkthroughs: {
                        value: function () {
                            window.external.RequestWalkthroughs();
                        }
                    },

                    // SetBusy
                    setBusy: {
                        value: function (busy) {
                            window.external.SetBusy(busy);
                        }
                    },

                    // Events
                    activeSale: {
                        value: function (active) {
                            window.external.ActiveSale(active);
                        }
                    },
                    documentReady: {
                        value: function (name) {
                            window.external.DocumentReady(name);
                        }
                    },
                    getFrontEndId: {
                        value: function () {
                            return Promise.resolve(window.external.GetFrontEndId());
                        }
                    },
                    reload: {
                        value: function () {
                            window.external.Reload();
                        }
                    },
                    invokeFrontEndEvent: {
                        value: function (event, obj) {
                            window.external.InvokeFrontEndEvent(event, JSON.stringify(obj));
                        }
                    },

                    // Keyboard Presses
                    registerKeyPress: {
                        value: function (keypress) {
                            window.external.RegisterKeyPress(keypress);
                        }
                    },
                    popupActive: {
                        value: function () {
                            // Not supported
                        }
                    },
                    actionActive: {
                        value: function () {
                            // Not supported
                        }
                    },
                    navDialogActive: {
                        value: function () {
                            // Not supported
                        }
                    },

                    // Kiosk
                    isKiosk: {
                        value: function () {
                            return Promise.resolve(window.external.IsKiosk());
                        }
                    },
                    disableKiosk: {
                        value: function () {
                            window.external.DisableKiosk();
                        }
                    }
                });
        };

        // Mandatory part - always inherit from n$.ExternalObject
        n$.inherit(n$.ExternalObject.MajorTom, n$.ExternalObject);

        // ExternalObject prototype overriders
        (function () {
            // When inheriting from n$.ExternalObject you must provide these two functions to enable the framework to find the
            // applicable object capable of handling external calls to the environment.

            n$.ExternalObject.MajorTom.prototype.priority = function () {
                // Return a relative priority. Objects with smaller priority number will be evaluated for applicability first.
                return 10;
            };
            n$.ExternalObject.MajorTom.prototype.isApplicable = function () {
                // Evaluates the applicability of this object to the current environment.
                return window.top.hasOwnProperty("$_npproxy_") && n$.available.external;
            };
        })();

        n$.ExternalObject.registerExternalObject(new n$.ExternalObject.MajorTom());
    })
    .depend("External", "External.Browser");
n$.addModule("Focus",
    function () {
        var lastFocus = null, focusCounter = 0, paused, suspended, knownFocusedElements = {};

        function resetEngine(fromId) {
            var i = focusCounter;
            while (i > fromId) {
                knownFocusedElements.hasOwnProperty(i) &&
                    knownFocusedElements[i].focusContext.release();
                i--;
            };
        };

        function FocusContext(thing) {
            var me = this,
                focused = false,
                dimInterval,
                dimmed;

            me.focusHolder = thing;
            me.previousFocus = lastFocus;
            me.previousReference = undefined;
            me.id = ++focusCounter;
            knownFocusedElements[me.id] = me.focusHolder;

            lastFocus = me.focusHolder;

            Object.defineProperty(me,
                "push",
                {
                    value: function () {
                        var focusContext = new FocusContext(this.focusHolder);
                        focusContext.previousReference = this;
                        return focusContext;
                    }
                });

            Object.defineProperty(me,
                "pop",
                {
                    value: function () {
                        return me.focusHolder.focusContext = me.previousReference;
                    }
                });

            Object.defineProperty(me,
                "click",
                {
                    value: function () {
                        if (suspended)
                            return;

                        if (lastFocus === me.focusHolder ||
                            me.focusHolder.focusElement.tagName !== "INPUT" ||
                            n$.Framework.Environment.Mobile())
                            return;

                        // Focus physically attempted on a previously focused control - indicates a possible issue in focus engine
                        resetEngine(me.id);
                        me.setFocus();
                    }
                });

            Object.defineProperty(me,
                "blur",
                {
                    value: function() {
                        if (!focused || paused || dimmed || suspended)
                            return;

                        // Checking for NAV dialogs that dim the screen
                        var overlay = $(".spa-overlay.dimmed", window.top.document);
                        if (overlay.length && overlay.css("z-index") === "2") {
                            dimmed = true;
                            if (dimInterval)
                                clearInterval(dimInterval);
                            dimInterval = setInterval(function() {
                                    if (overlay.css("z-index") === "1") {
                                        setTimeout(function() {
                                            window.focus();
                                            clearInterval(dimInterval);
                                            dimInterval = 0;
                                            dimmed = false;
                                            me.setFocus(10);
                                        });
                                    };
                                },
                                250);
                            return;
                        };

                        me.setFocus();
                    }
                });

            Object.defineProperty(me,
                "focused",
                {
                    get: function() {
                        return focused;
                    },
                    set: function(val) {
                        focused = val;
                        setTimeout(function() {
                            me.switchEvents(focused);
                        });
                    }
                });

            me.focused = true;
        };

        FocusContext.prototype.setFocus = function(delay) {
            n$.Framework.Environment.Mobile() ||
                setTimeout(function() {
                        paused || this.focusHolder.focusElement.focus();
                    }.bind(this),
                    delay || 0);
        };

        FocusContext.prototype.release = function() {
            this.focused = false;
            this.focusHolder.focusContext = this.pop();
            delete knownFocusedElements[this.id];

            lastFocus = this.previousFocus;
        };

        FocusContext.prototype.switchEvents = function(on) {
            on
                ? (this.focusHolder.focusElement.addEventListener("blur", this.blur),
                    this.focusHolder.focusElement.removeEventListener("click", this.click),
                    paused || this.setFocus())
                : (this.focusHolder.focusElement.removeEventListener("blur", this.blur),
                    this.focusHolder.focusElement.addEventListener("click", this.click),
                    this.focusHolder.focusElement.blur());
        };

        n$.Focus = {
            request: function(thing) {
                if (!(thing.focusElement && thing.focusElement instanceof HTMLElement))
                    return;

                lastFocus && lastFocus.focusContext && (lastFocus.focusContext.focused = false);
                thing.focusContext = thing.focusContext
                    ? thing.focusContext.push()
                    : new FocusContext(thing);
            },

            release: function(thing) {
                if (!(thing && thing.focusContext))
                    return;

                thing.focusContext.release();
                lastFocus && lastFocus.focusContext && (lastFocus.focusContext.focused = true);
                thing.focusContext = undefined;
            },

            pause: function() {
                if (!lastFocus)
                    return;
                paused = true;
                lastFocus.focusElement.blur();
            },

            resume: function() {
                if (!lastFocus)
                    return;
                paused = false;
                lastFocus && lastFocus.focusContext && lastFocus.focusContext.setFocus(10);
            },

            suspend: function() {
                /// <summary>Prevents any automatic focusing to take place at all. To not be confused with "pause".</summary>
                this.pause();
                suspended = true;
            },

            "continue": function() {
                /// <summary>Resumes auto-focusing after suspend. To not be confused with "resume".</summary>
                suspended = false;
                this.resume();
                typeof document.focus === "function" ? document.focus() : window.focus();
            },

            refocus: function () {
                window.focus();
                lastFocus && lastFocus.focusContext && lastFocus.focusContext.setFocus();
            }
        };

        function listenerFocus() {
            if (suspended)
                return;

            paused = false;
            n$.Framework.Environment.Mobile() ||
                setTimeout(function () {
                    lastFocus && lastFocus.focusElement && lastFocus.focusElement.focus();
                });
        }

        document.addEventListener("focus", listenerFocus, true);
        window.addEventListener("focus", listenerFocus, true);
        window.addEventListener("blur",
            function() {
                paused = true;
            });
    });
;
n$.addModule("Format",
    function () {
        n$.Format = {
            StringToDecimal: function(str) {
                return str; // TODO
            },
            StringToInteger: function(str) {
                return str; // TODO
            },
            StringToDate: function(str) {
                return str; // TODO
            },
            StringToTime: function(str) {
                return str; // TODO
            },
            DecimalToString: function(dec) {
                return dec.toString(); // TODO
            },
            IntegerToString: function(int) {
                return int.toString(); // TODO
            },
            DateToString: function(date) {
                return date.toString(); // TODO
            },
            TimeToString: function(time) {
                return time.toString(); // TODO
            }
        };
    });

;
n$.addModule("Framework",
    function() {
        n$.inherit = function (object, fromObject) {
            object.prototype = Object.create(fromObject.prototype);
            object.prototype.constructor = object;
        };
        n$.directProperty = function (object, property, directToFunc, directToProperty) {
            Object.defineProperty(object, property, {
                get: function() {
                    var directTo = typeof directToFunc === "function" ? directToFunc.apply(this) : directToFunc;
                    return directTo[directToProperty || property];
                },
                set: function (value) {
                    var directTo = typeof directToFunc === "function" ? directToFunc.apply(this) : directToFunc;
                    directTo[directToProperty || property] = value;
                }
            });
        };

        n$.Framework = {
            // Other methods to facilitate environment management
            Environment: {
                iOS: function() {
                    return /iPad|iPhone|iPod/.test(navigator.platform) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
                },
                Android: function() {
                    return /Android/.test(navigator.userAgent);
                },
                WindowsPhone: function() {
                    return /Windows Phone/.test(navigator.userAgent);
                },
                Mobile: function() {
                    return n$.Framework.Environment.iOS() ||
                        n$.Framework.Environment.Android() ||
                        n$.Framework.Environment.WindowsPhone();
                },
                IE: function () {
                    return /Trident.*rv\:11\./i.test(navigator.userAgent) || /MSIE/i.test(navigator.userAgent);
                },
                externalAvailable: true
            }
        };
    },
    0);

;
n$.addModule("FrontEndAsync",
    function() {
        window["InvokeFrontEndAsync"] = function(request) {
            if (request && request.Content && request.Content._trace) {
                var debugtrace = request.Content._trace.debug_trace;
                if (debugtrace)
                    n$.Debug.BackEnd.log("Asynchronous event " +
                        request.Method +
                        " with debug trace " +
                        debugtrace);
            };

            if (request.Method && typeof n$.AsyncRequestHandlers[request.Method] === "function") {
                var method = n$.AsyncRequestHandlers[request.Method];
                if (!method.notrace && request.Content._trace) {
                    n$.Debug.Workflow.logJson({
                        event: "Trace",
                        data: { method: request.Method, data: request.Content._trace }
                    });
                };

                method.immediate
                    ? invokeFrontEndAsyncSafe(request)
                    : setTimeout(function() { invokeFrontEndAsync(request); });
            } else {
                setTimeout(function() {
                    n$.Debug.BackEnd.warning("A request was received from C/AL that cannot be recognized:\n\n" +
                        JSON.stringify(request));
                });
            };
        };

        n$.AsyncRequestHandlers = {};

        function invokeFrontEndAsyncSafe(request) {
            try {
                invokeFrontEndAsync(request);
            } catch (e) {
                setTimeout(function() {
                    n$.Debug.Framework
                        .error("An error has occurred while processing the front-end request " +
                            (request &&
                                request.Method) +
                            ": " +
                            e.message);
                });
            }
        };

        function invokeFrontEndAsync(request) {
            typeof request === "string" && (request = JSON.parse(request));

            n$.Debug.BackEnd.log({
                    event: "Invoking asynchronous request [" + request.Method + "]",
                    data: request
                }),
                n$.AsyncRequestHandlers[request.Method](request);
        };
    });

;
/*

// Disabling altogether because of #295697

n$.addModule("GoogleAnalytics",
    function () {

        var url = "https://www.google-analytics.com/collect",
            mapping = {
                action: "ea",
                label: "el",

                map: function(property) {
                    return typeof mapping[property] === "string" ? mapping[property] : property;
                }
            };

        function prepare(event) {
            var key,
                result = "",
                payload = {
                    v: 1,
                    t: "event",
                    tid: "UA-3771694-4",

                    // User information
                    cid: n$.NAV.CompanyName,
                    uid: "Demo", // to represent salesperson

                    // Content information
                    dl: n$.NAV.Url,
                    dh: window.top.location.host,

                    // Application information
                    an: "Transcendence", // TODO: this should come from Major Tom / app
                    av: n$.Version.version,
                    aid: n$.Version.product,

                    // Event information
                    ec: "POS", // event category
                    ea: "generic", // event action
                    el: "generic", // event label
                };

            if (event && typeof event === "object") {
                for (key in event) {
                    if (event.hasOwnProperty(key) && typeof event[key] !== "function") {
                        payload[mapping.map(key)] = event[key];
                    };
                };
            };
            for (key in payload) {
                if (payload.hasOwnProperty(key) && typeof payload[key] !== "function") {
                    result = result + (result ? "&" : "") + key + "=" + encodeURI(payload[key]);
                };
            };
            return result;
        };

        n$.analytics = {
            report: function (event) {
                try {
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: prepare(event)
                    });
                } catch (e) {
                    
                };
            }
        };

    }).depend("Version");
*/
;
n$.addModule("InputFilter",
    function () {
        var activeFilters = {},
            filtersToBegin = {},
            filtersToEnd = {},
            runFilterSchedule;

        function forEachOwnProperty(object, callback) {
            if (!(object && typeof object === "object"))
                return;
            for (var prop in object) {
                if (object.hasOwnProperty(prop))
                    callback(object[prop], prop);
            };
        };

        function resetFilters() {
            filtersToEnd = filtersToBegin, filtersToBegin = {};
        };

        function endFilters(source) {
            forEachOwnProperty(filtersToEnd,
                function (filter, name) {
                    delete filtersToEnd[name];
                    try {
                        filter.end();
                        filter.source = null;
                    } catch (e) {
                        n$.Debug.Framework.warning(
                            "An unhandled exception occurred while ending input filter [" +
                            filter.name +
                            "]. Error message is: " +
                            e);
                    };
                });
            source.filteredInputActive = false;
        };

        function beginFilters(source) {
            source.filteredInputActive = false;
            forEachOwnProperty(filtersToBegin,
                function (filter) {
                    try {
                        filter.source = source;
                        filter.begin();
                        source.filteredInputActive = true;
                    } catch (e) {
                        n$.Debug.Framework.warning(
                            "An unhandled exception occurred while beginning input filter [" + filter.name + "]. Error message is: " + e);
                    };
                });
        };

        function scheduleRunFilters(source) {
            function executeScheduled() {
                var value = source.value;

                resetFilters();
                forEachOwnProperty(activeFilters,
                    function(filter, name) {
                        ((typeof filter.trigger === "string" && filter.trigger === value) ||
                                (typeof filter.trigger === "function" && filter.trigger(source))) &&
                            (delete filtersToEnd[name], filtersToBegin[name] = filter);
                    });
                runFilters(source);
            };

            runFilterSchedule && clearTimeout(runFilterSchedule);
            runFilterSchedule = setTimeout(executeScheduled, 200);
        };

        function runFilters(source) {
            endFilters(source);
            beginFilters(source);
        };

        function failOnIncorrectParameter(param, type, name) {
            var correctType = type.indexOf(",") === -1 && typeof param === type, newType = "";
            !correctType
                ? (
                    type.split(",").forEach(function(t) {
                        newType = newType + (newType ? " or " : "") + "\"" + t + "\"";
                        correctType = correctType || (typeof param === t);
                    }),
                    type = newType
                )
                : type = "\"" + type + "\"";
            !correctType &&
                n$.Debug.Framework.error("Attempting to register an input filter without providing [" + name + "] of type " + type + ".",
                    false,
                    true);
        };

        n$.InputFilter = function (descriptor) {
            /// <summary>Creates a new input filter to execute on keypress event in textbox that are created with inputFilter parameter set to true.
            ///  
            /// Descriptor object must provide the following:
            ///   - name: Name of the input filter. Must be unique, otherwise the last activated filter with the same name will prevail.
            ///   - description: Describes the input filter. This is shown in the list of input filters.
            ///   - trigger: Input sequence that will trigger the input filter.
            /// </summary>
            /// <param name="descriptor">Input filter descriptor object. Must contain properties trigger, name, description, and methods action, inspect. See the detailed documentation above.</param>
            failOnIncorrectParameter(descriptor, "object", "descriptor");
            failOnIncorrectParameter(descriptor.trigger, "string,function", "trigger");
            failOnIncorrectParameter(descriptor.name, "string", "name");
            failOnIncorrectParameter(descriptor.description, "string", "description");

            var me = this;

            me.trigger = descriptor.trigger;
            me.name = descriptor.name;
            me.description = descriptor.description;

            function filteredInputComplete(e, value, skipExecution) {
                resetFilters();
                endFilters(e.target);
                skipExecution || me.execute(value);
            };
            var active = false;
            me.begin = function () {
                if (active)
                    return;

                active = true;
                typeof descriptor.begin === "function" && descriptor.begin.apply(me, arguments);
                $(me.source).on("filteredInputComplete", filteredInputComplete);
            };
            me.end = function () {
                if (!active)
                    return;

                typeof descriptor.end === "function" && descriptor.end.apply(this, arguments);
                $(me.source).off("filteredInputComplete", filteredInputComplete);
                active = false;
            };
            me.execute = function(context) {
                if (typeof descriptor.execute !== "function")
                    return;

                descriptor.execute.call(this, context);
            };
            me.click = function(target, context) {
                filteredInputComplete({ target: target }, context, true);
            };

            var beforeShow = function() {
                return {
                    visible: true,
                    enabled: false
                };
            };
            Object.defineProperty(this,
                "beforeShow",
                {
                    get: function() {
                        /// <summary>Method that returns visible and enabled state for this filter. Assign a function that returns a { visible: [bool], enabled: [bool] } object out of this method.</summary>
                        return beforeShow;
                    },
                    set: function (value) {
                        typeof value !== "function" &&
                            n$.Debug.Framework.error(
                                "Attempting to assign a non-function type as filter method for a n$.InputFilter instance.",
                                false,
                                true);
                        beforeShow = value;
                    }
                });
        };

        n$.InputFilter.prototype.activate = function() {
            this.active ||
            (
                activeFilters[this.name] = this,
                this.active = true
            );
        };

        n$.InputFilter.prototype.deactivate = function() {
            this.active &&
            (
                delete activeFilters[this.name],
                this.active = false
            );
        };

        Object.defineProperty(n$.InputFilter,
            "getFilters",
            {
                value: function() {
                    return activeFilters;
                }
            });

        Object.defineProperty(n$.InputFilter,
            "runFilters",
            {
                value: function(source) {
                    scheduleRunFilters(source);
                }
            });

    }).depend("Controls");
;
n$.addModule("InputFilters",
    function () {

        (function () { // Create walkthrough filter
            var commands = [];

            function validObject(cmd) {
                return typeof cmd === "object" && cmd &&
                    typeof cmd.name === "string" && cmd.name &&
                    typeof cmd.description === "string" && cmd.description &&
                    typeof cmd.execute === "function";
            };

            n$.InputFilter.commands = {
                register: function (cmd) {
                    validObject(cmd) &&
                        commands.push(cmd);
                }
            };

            var originalStyle = "", textbox, backPanel, inputWithCaption;
            var commandFilter = new n$.InputFilter(
                {
                    name: "Command Filter",
                    description:
                        "Allows entering commands with \"> commandname\" syntax. It shows registered commands.",

                    trigger: function(source) {
                        return typeof source.value === "string" && source.value.substring(0, 2) === "> ";
                    },

                    beforeShow: function() {
                        return {
                            visible: true,
                            enabled: true
                        }
                    },

                    begin: function() {
                        textbox = this.source.html;
                        var rect = textbox[0].getBoundingClientRect(), me = this;

                        originalStyle = textbox.attr("style") || "";
                        textbox.css({
                            width: rect.width,
                            height: rect.height,
                            position: "fixed",
                            top: rect.top,
                            left: rect.left,
                            "z-index": 20
                        });

                        inputWithCaption = this.source.parent &&
                            this.source.parent instanceof n$.Controls.Container &&
                            this.source.parent.parent &&
                            this.source.parent.parent instanceof n$.Controls.InputWithCaption &&
                            this.source.parent.parent.ctrlLabel.html;

                        var starting =
                            inputWithCaption
                                ? this.source.parent.parent
                                : this.source;

                        var commandPanel, startingRect = starting.html[0].getBoundingClientRect();
                        backPanel = $("<div>")
                            .addClass("np-inputfilterpanel")
                            .css({
                                top: 0,
                                left: startingRect.left - 16,
                                width: startingRect.width + 32,
                                height: window.innerHeight,
                                position: "fixed",
                                "z-index": 19
                            })
                            .append(commandPanel = $("<div>").addClass("commands").css({
                                top: startingRect.top + startingRect.height + 24,
                                left: startingRect.left - 16,
                                width: startingRect.width + 32,
                                height: window.innerHeight - startingRect.top - startingRect.height - 56,
                                position: "fixed"
                            }));

                        if (inputWithCaption) {
                            var labelRect = inputWithCaption[0].getBoundingClientRect();
                            backPanel.append($("<div><span class=\"np-caption\">Enter command</span></div>").css({
                                top: labelRect.top,
                                left: labelRect.left,
                                width: labelRect.width,
                                height: labelRect.height,
                                position: "fixed"
                            }).attr("class", inputWithCaption.attr("class")));
                        };

                        backPanel.animate().subtleFadeIn();

                        this.source.parent.html.append(backPanel);

                        commands = commands.sort(function (a, b) {
                            return a.name === b.name ? 0 : a.name < b.name ? -1 : 1;
                        });
                        commands.forEach(function (cmd) {
                            cmd.panel = {};
                            commandPanel.append(
                                cmd.panel.control = $("<div>")
                                .addClass("command")
                                .append(
                                    cmd.panel.name = $("<div>" + cmd.name + "</div>"),
                                    cmd.panel.description =
                                    $("<div class=\"description\">" + cmd.description + "</div>"))
                                .click(function () {
                                    me.click(me.source, "");
                                    cmd.execute();
                                }));

                            var active = false, visible = true;
                            Object.defineProperty(cmd.panel,
                                "active",
                                {
                                    configurable: true,
                                    get: function() {
                                        return active;
                                    },
                                    set: function(value) {
                                        active = value;
                                        active
                                            ? (
                                                $(".np-inputfilterpanel > .commands > .command.active")
                                                    .removeClass("active"),
                                                cmd.panel.control.addClass("active")
                                            )
                                            : cmd.panel.control.removeClass("active");
                                    }
                                });

                            Object.defineProperty(cmd.panel,
                                "visible",
                                {
                                    configurable: true,
                                    get: function () {
                                        return visible;
                                    },
                                    set: function (value) {
                                        visible = value;
                                        visible
                                            ? cmd.panel.control.css("display", "block")
                                            : cmd.panel.control.css("display", "none");
                                    }
                                });

                        });

                        function findCurrent(curr, step) {
                            var startCurr = curr;
                            curr < 0 && (curr = commands.length - 1);
                            curr >= commands.length && (curr = 0);

                            while (!commands[curr].panel.visible) {
                                curr += step;
                                curr < 0 && (curr = commands.length - 1);
                                curr > commands.length && (curr = 0);
                                if (startCurr === curr)
                                    break;
                            };
                            return curr;
                        };
                        var current = 0;
                        function markCurrent(index) {
                            current = findCurrent(current + index || 0, index || 1);
                            commands[current].panel.active = true;
                            me.currentCommand = commands[current];
                        };

                        markCurrent();
                        this.keyUp = function(e) {
                            if (e.which === 38) {
                                markCurrent(-1);
                                return;
                            };
                            if (e.which === 40) {
                                markCurrent(1);
                                return;
                            };
                        };
                        this.input = function() {
                            if (me.source.value.substring(0, 2) !== "> ")
                                return;

                            var search = me.source.value.substring(2).toLowerCase();
                            commands.forEach(function(cmd) {
                                cmd.panel.visible = true;
                                cmd.panel.name.text(cmd.name);
                            });

                            if (!search) {
                                markCurrent();
                                return;
                            };

                            // Exact match
                            search = search.trim();
                            commands.forEach(function (cmd) {
                                cmd.panel.visible = false;
                                var index = cmd.name.toLowerCase().indexOf(search);
                                if (index >= 0) {
                                    cmd.panel.visible = true;
                                    var orig = cmd.name.substr(index, search.length);
                                    var modif = cmd.name.substr(0, index) +
                                        "<span class=\"match\">" +
                                        orig +
                                        "</span>" +
                                        cmd.name.substr(index + search.length);
                                    cmd.panel.name.html(modif);
                                };
                            });

                            function breakApart(str) {
                                var content = [], left, right;
                                for (var i = 1; i < str.length; i++) {
                                    content.push([left = str.substr(0, i), right = str.substring(i)]);
                                    breakApart(right).map(function (arr) {
                                        arr.splice(0, 0, left);
                                        content.push(arr);
                                    });
                                };
                                return content;
                            };

                            // Individual matches
                            breakApart(search.replace(/\s/g, "")).forEach(function(arr) {

                                commands.forEach(function(cmd) {
                                    if (cmd.panel.visible)
                                        return;

                                    var left = "", right = cmd.name;
                                    for (var i = 0; i < arr.length; i++) {
                                        var el = arr[i];
                                        var match = new RegExp("\\b" + el, "gi").exec(right);
                                        if (!match)
                                            return;

                                        left = left + right.substr(0, match.index) +
                                            "<span class=\"match\">" +
                                            match[0] +
                                            "</span>";
                                        right = right.substr(match.index + el.length);
                                    };

                                    cmd.panel.visible = true;
                                    cmd.panel.name.html(left + right);
                                });
                            });
                            markCurrent();
                        };

                        this.source.html.on("keyup", this.keyUp);
                        this.source.html.on("input", this.input);
                    },

                    end: function () {
                        this.source.html.off("keyup", this.keyUp);
                        this.source.html.off("input", this.input);

                        textbox &&
                            textbox.attr("style", originalStyle);

                        backPanel.subtleFadeOut();
                    },

                    execute: function() {
                        this.currentCommand && this.currentCommand.execute();
                    }
                });
            commandFilter.activate();
        })(); // Create walkthrough filter

        (function() { // Show blocking actions
            var showBlockingActions = new n$.InputFilter(
                {
                    trigger: "show:blocking",
                    name: "Show Blocking Actions",
                    description: "Highlights any actions currently on screen that would result in blocking UI and prevent clicking more buttons until entire action is completed.",

                    immediateInvocation: true,

                    execute: function() {
                        $(".np-blockingui").highlight();
                        setTimeout(function() {
                            $("body > div.np-userguide-highlight").remove();
                        }, 5000);
                    }
                });
            showBlockingActions.activate();
            n$.InputFilter.commands.register(showBlockingActions);
        })(); // Show blocking actions

        (function() { // Show/Hide button badges
            var hideButtonBadges = new n$.InputFilter({
                trigger: "hide:badges",
                name: "Hide Button Badges",
                description: "Hides action button information/warning badges from buttons that are incorrectly configured.",

                execute: function() {
                    $(".np-button div.warning").css("display", "none");
                }
            });
            hideButtonBadges.activate();
            n$.InputFilter.commands.register(hideButtonBadges);

            var showButtonBadges = new n$.InputFilter({
                trigger: "show:badges",
                name: "Show Button Badges",
                description: "Shows action button information/warning badges from buttons that are incorrectly configured.",

                execute: function () {
                    $(".np-button div.warning").css("display", "");
                }
            });
            showButtonBadges.activate();
            n$.InputFilter.commands.register(showButtonBadges);
        })(); // Show/Hide button badges

        (function() { // Walkthrough recorder
            n$.InputFilter.commands.register({
                name: "Walkthrough Recorder",
                description:
                    "Records a walkthrough by following user's clicks around the screen and allowing adding messages, tooltips, and custom actions.",

                execute: function () {
                    setTimeout(function() {
                        n$.Popup.dialog({
                            caption:
                                "This feature is currently in development. But it's cool to know it will be available soon, isn't it?",
                            title: "Work in progress...",
                            style: n$.Enums.DialogStyle.Message,
                            callback: function() {}
                        });
                    });
                }
            });
        })(); // Walkthrough recorder

    }).depend("InputFilter");
n$.addModule("jQuery",
    function() {

        $.copyObject = function(to, from) {
            $.extend(to, from);
            Object.getOwnPropertyNames(from)
                .forEach(function (prop) {
                    to[prop] = from[prop];
                });
        };

        $.bindProperties = function(to, from) {
            function defineProperty(ctx, p) {
                Object.defineProperty(ctx, p,
                    {
                        get: function () {
                            return from[p];
                        },
                        set: function (val) {
                            from[p] = val;
                        }
                    });
            };
            Object.getOwnPropertyNames(from)
                .forEach(function (prop) {
                    defineProperty(to, prop);
                });
        };

        $.fn.extend({
            // Style functions
            setClass: function(className, setClass) {
                if (setClass) {
                    if (!$(this).hasClass(className)) {
                        $(this).addClass(className);
                    };
                } else {
                    if ($(this).hasClass(className)) {
                        $(this).removeClass(className);
                    };
                };
            },
            selectRange: function(start, end) {
                if (!end) end = start;
                return this.each(function() {
                    n$.Framework.Environment.Mobile() || this.focus();
                    var active = document.activeElement;
                    this.setSelectionRange(start, end);
                    if (active !== this) active.focus();
                });
            },
            showCenter: function (z) {
                var mobile = n$.Framework.Environment.Mobile();

                var width = mobile
                    ? "100%"
                    : (this.outerWidth() > window.innerWidth * 0.75
                        ? window.innerWidth * 0.75
                        : this.outerWidth());
                var height = mobile
                    ? "100%"
                    : "auto";
                this.css({
                    "position": "absolute",
                    "z-index": z || 500,
                    "top": mobile ? 0 : window.innerHeight / 2 - this.outerHeight() / 2,
                    "left": mobile ? 0 : window.innerWidth / 2 - width / 2,
                    "width": width,
                    "height": height
                });
                return this;
            },

            // Effects
            highlight: function () {
                var me = this;

                [].slice.call(this).forEach(function(e) {
                    var elem = $(e);
                    $("body").append($("<div class=\"np-userguide-highlight\">")
                        .css({
                            "position": "absolute",
                            "top": elem.offset().top,
                            "left": elem.offset().left,
                            "width": elem.outerWidth(),
                            "height": elem.outerHeight()
                        }));
                });
                return me;
            },
            delayRemove: function() {
                var me = this;
                setTimeout(function() {
                    me.remove();
                }, 1000);
                return me;
            },
            fadeInEffect: function(prepare, complete, delay) {
                typeof prepare === "string" && (prepare = { "class": prepare });
                var me = this,
                    css = me.attr("style"),
                    specificClass = (prepare && prepare.class ? " " + prepare.class : "") || "";
                me.addClass("np-fadein prepare");
                setTimeout(function() {
                    me.addClass(specificClass);
                    prepare &&
                        prepare.css &&
                        me.css(prepare.css);
                    setTimeout(function() {
                            me
                                .removeClass("prepare")
                                .addClass("np-animate complete");
                            setTimeout(function() {
                                    typeof complete === "function" && complete();
                                },
                                300);
                            setTimeout(function() {
                                    me
                                        .removeClass("np-animate np-fadein complete" + specificClass)
                                        .attr("style", css);
                                },
                                300);
                        },
                        25);
                }, delay || 0);
                return me;
            },
            fadeOutEffect: function(prepare) {
                typeof prepare === "string" && (prepare = { "class": prepare });
                var me = this,
                    specificClass = (prepare && prepare.class ? " " + prepare.class : "") || "";
                me
                    .addClass("np-animate np-fadeout complete" + specificClass);
                prepare &&
                    prepare.css &&
                    me.css(prepare.css);
                setTimeout(function() {
                    me.remove();
                }, 300);
                return me;
            },
            animateStyles: function() {
                return this.addClass("np-animate");
            },
            unanimate: function() {
                return this.removeClass("np-animate");
            },
            slideUp: function (pixels, complete) {
                return this.fadeInEffect({
                    "class": "np-slide",
                    css: { transform: "translateY(" + (pixels || 12) + "px)" }
                }, complete);
            },
            zoomInFadeOut: function (ratio) {
                ratio = ratio || 1.05;
                return this.fadeOutEffect({ css: { transform: "scale(" + ratio + ", " + ratio + ")" } });
            },
            inflate: function () {
                return this.fadeInEffect("np-inflate");
            },
            deflate: function() {
                return this.fadeOutEffect("np-deflate");
            },
            subtleFadeIn: function(delay) {
                return this.fadeInEffect("np-subtle-fadein", null, delay);
            },
            subtleFadeOut: function() {
                return this.fadeOutEffect("np-subtle-fadeout");
            },
            viewslideIn: function (delay) {
                return this.fadeInEffect("np-viewslide-in", null, delay);
            },
            viewslideOut: function () {
                return this.fadeOutEffect("np-viewslide-out");
            },

            // TODO: Check these and solve properly
            fadeOutZoom: function (zindex, addToBody) {
                var copy = zindex ? this.clone() : this;
                zindex &&
                    copy.css({
                        position: "fixed",
                        top: this.offset().top,
                        left: this.offset().left,
                        width: this.outerWidth(),
                        height: this.outerHeight(),
                        "z-index": zindex
                    });
                copy.addClass("np-transition prepare");
                zindex && (addToBody ? $("body") : this.parent()).append(copy);
                setTimeout(function () {
                        copy.addClass("fadezoom");
                        setTimeout(function () {
                                copy.remove();
                            },
                            2000);
                    },
                    25);
            },
            fadeOutZoomSmall: function(zindex) {
                var copy = zindex ? this.clone() : this;
                zindex &&
                    copy.css({
                        position: "fixed",
                        top: this.offset().top,
                        left: this.offset().left,
                        width: this.outerWidth(),
                        height: this.outerHeight(),
                        "z-index": zindex
                    });
                copy.addClass("np-transition");
                zindex && this.parent().append(copy);
                setTimeout(function () {
                        copy.addClass("fadezoom small");
                        setTimeout(function () {
                                copy.remove();
                            },
                            550);
                    },
                    25);

            }
        });

        (function() {
            // initializes touch and scroll events
            var supportTouch = $.support.touch,
                touchStartEvent = supportTouch ? "touchstart" : "mousedown",
                touchStopEvent = supportTouch ? "touchend" : "mouseup",
                touchMoveEvent = supportTouch ? "touchmove" : "mousemove";

            // handles swipeup and swipedown
            $.event.special.swipeupdown = {
                setup: function() {
                    var thisObject = this;
                    var $this = $(thisObject);

                    $this.bind(touchStartEvent,
                        function(event) {
                            var data = event.originalEvent.touches ? event.originalEvent.touches[0] : event,
                                start = {
                                    time: (new Date).getTime(),
                                    coords: [data.pageX, data.pageY],
                                    origin: $(event.target)
                                },
                                stop;

                            function moveHandler(e) {
                                if (!start) {
                                    return;
                                }

                                var d = e.originalEvent.touches ? e.originalEvent.touches[0] : e;
                                stop = {
                                    time: (new Date).getTime(),
                                    coords: [d.pageX, d.pageY]
                                };

                                // prevent scrolling
                                if (Math.abs(start.coords[1] - stop.coords[1]) > 10) {
                                    e.preventDefault();
                                }
                            }

                            $this
                                .bind(touchMoveEvent, moveHandler)
                                .one(touchStopEvent,
                                    function() {
                                        $this.unbind(touchMoveEvent, moveHandler);
                                        if (start && stop) {
                                            if (stop.time - start.time < 1000 &&
                                                Math.abs(start.coords[1] - stop.coords[1]) > 30 &&
                                                Math.abs(start.coords[0] - stop.coords[0]) < 75) {
                                                start.origin
                                                    .trigger("swipeupdown")
                                                    .trigger(start.coords[1] > stop.coords[1]
                                                        ? "swipeup"
                                                        : "swipedown");
                                            }
                                        }
                                        start = stop = undefined;
                                    });
                        });
                }
            };

            //Adds the events to the jQuery events special collection
            $.each({
                    swipedown: "swipeupdown",
                    swipeup: "swipeupdown"
                },
                function(event, sourceEvent) {
                    $.event.special[event] = {
                        setup: function() {
                            $(this).bind(sourceEvent, $.noop);
                        }
                    };
                });

        })();
    });
;
n$.addModule("Localization",
    function() {
        n$.Localization = {
            Captions: {
                // These captions are defaults - they must be overriden from witih NAV
                Sale_ReceiptNo: "&lt;undefined&gt;", // "Sale",
                Sale_EANHeader: "&lt;undefined&gt;", // "Item No.",
                Sale_LastSale: "&lt;undefined&gt;", // "Last Sale",
                Login_FunctionButtonText: "&lt;undefined&gt;", // "Function",
                Login_MainMenuButtonText: "&lt;undefined&gt;", // "Main Menu",
                Sale_PaymentAmount: "&lt;undefined&gt;", // "Total",
                Sale_PaymentTotal: "&lt;undefined&gt;", // "Sale (LCY)",
                Sale_ReturnAmount: "&lt;undefined&gt;", // "Balance",
                Sale_RegisterNo: "&lt;undefined&gt;", // "Register",
                Sale_SalesPersonCode: "&lt;undefined&gt;", // "Salesperson Code",
                Login_Clear: "&lt;undefined&gt;", // "Erase",
                Sale_SubTotal: "&lt;undefined&gt;", // "SUBTOTAL",
                Payment_PaymentInfo: "&lt;undefined&gt;", // "Payment Info",
                Locked_RegisterLocked: "&lt;undefined&gt;", // "This register is locked",
                LastSale_Total: "&lt;undefined&gt;", // "Sale (LCY)",
                LastSale_Paid: "&lt;undefined&gt;", // "Paid",
                LastSale_Change: "&lt;undefined&gt;", // "Return",

                Payment_SaleLCY: "&lt;Sale (LCY)&gt;", // "Sale (LCY)",
                Payment_Paid: "&lt;Paid&gt;", // "Paid",
                Payment_Balance: "&lt;Balance&gt;", // "Balance",

                Sale_InfoBox_TotalPaid: "&lt;undefined&gt;", // "Total paid",
                Sale_InfoBox_Change: "&lt;undefined&gt;", // "Change",

                Global_Cancel: "&lt;undefined&gt;", // "Cancel"
                Global_Back: "&lt;undefined&gt;", // "Back"
                Global_Close: "&lt;undefined&gt;", // "Close"
                Global_UnloadDialog: "A dialog box is open. Do you want to navigate away from this page?",
                Global_UnloadView:
                    "If you navigate away from this page, data may be lost. Are you sure you want to continue?",
                Global_UnknownView:
                    "View is unknown or undefined.",

                Global_OK: "&lt;undefined&gt;", // "OK"
                Global_Yes: "&lt;undefined&gt;", // Yes
                Global_No: "&lt;undefined&gt;", // No

                Global_Today: "",
                Global_Tomorrow: "",
                Global_Yesterday: "",

                Global_ProgrammingBug: "This indicates a programming bug, not a user error.",

                Lookup_Search: "%lt;undefined&gt;", // Search
                Lookup_Caption: "&lt;undefined&gt;", // Lookup: 
                Lookup_New: "&lt;undefined&gt;", // New 
                Lookup_Card: "&lt;undefined&gt;", // Show Card

                DialogCaption_Message: "&lt;undefined&gt;", // You might want to know...
                DialogCaption_Confirmation: "&lt;undefined&gt;", // We need your confirmation...
                DialogCaption_Error: "&lt;undefined&gt;", // Something is wrong...
                DialogCaption_Numpad: "&lt;undefined&gt;", // We need more information...

                CaptionBalancingRegisterTransactions: "&lt;undefined&gt;",
                CaptionBalancingRegisters: "&lt;undefined&gt;",
                CaptionBalancingReceipts: "&lt;undefined&gt;",
                CaptionBalancingBeginningBalance: "&lt;undefined&gt;",
                CaptionBalancingCashMovements: "&lt;undefined&gt;",
                CaptionBalancingMidTotal: "&lt;undefined&gt;",
                CaptionBalancingManualCards: "&lt;undefined&gt;",
                CaptionBalancingTerminalCards: "&lt;undefined&gt;",
                CaptionBalancingOtherCreditCards: "&lt;undefined&gt;",
                CaptionBalancingTerminal: "&lt;undefined&gt;",
                CaptionBalancingGiftCards: "&lt;undefined&gt;",
                CaptionBalancingCreditVouchers: "&lt;undefined&gt;",
                CaptionBalancingCustomerOutPayments: "&lt;undefined&gt;",
                CaptionBalancingDebitSales: "&lt;undefined&gt;",
                CaptionBalancingStaffSales: "&lt;undefined&gt;",
                CaptionBalancingNegativeReceiptAmount: "&lt;undefined&gt;",
                CaptionBalancingForeignCurrency: "&lt;undefined&gt;",
                CaptionBalancingReceiptStatistics: "&lt;undefined&gt;",
                CaptionBalancingNumberOfSales: "&lt;undefined&gt;",
                CaptionBalancingCancelledSales: "&lt;undefined&gt;",
                CaptionBalancingNumberOfNegativeReceipts: "&lt;undefined&gt;",
                CaptionBalancingTurnover: "&lt;undefined&gt;",
                CaptionBalancingCOGS: "&lt;undefined&gt;",
                CaptionBalancingContributionMargin: "&lt;undefined&gt;",
                CaptionBalancingDiscounts: "&lt;undefined&gt;",
                CaptionBalancingCampaign: "&lt;undefined&gt;",
                CaptionBalancingMixed: "&lt;undefined&gt;",
                CaptionBalancingQuantityDiscounts: "&lt;undefined&gt;",
                CaptionBalancingSalespersonDiscounts: "&lt;undefined&gt;",
                CaptionBalancingBOMDiscounts: "&lt;undefined&gt;",
                CaptionBalancingCustomerDiscounts: "&lt;undefined&gt;",
                CaptionBalancingOtherDiscounts: "&lt;undefined&gt;",
                CaptionBalancingTotalDiscounts: "&lt;undefined&gt;",
                CaptionBalancingOpenDrawer: "&lt;undefined&gt;",
                CaptionBalancingAuditRoll: "&lt;undefined&gt;",
                CaptionBalancingCashCount: "&lt;undefined&gt;",
                CaptionBalancingCountedLCY: "&lt;undefined&gt;",
                CaptionBalancingDifferenceLCY: "&lt;undefined&gt;",
                CaptionBalancingNewCashAmount: "&lt;undefined&gt;",
                CaptionBalancingPutInTheBank: "&lt;undefined&gt;",
                CaptionBalancingMoneybagNo: "&lt;undefined&gt;",
                CaptionBalancingAmount: "&lt;undefined&gt;",
                CaptionBalancingNumber: "&lt;undefined&gt;",
                CaptionBalancingRemainderTransferred: "&lt;undefined&gt;",
                CaptionBalancingDelete: "&lt;undefined&gt;",
                CaptionBalancingClose: "&lt;undefined&gt;",
                CaptionBalancing1Turnover: "&lt;undefined&gt;",
                CaptionBalancing2Counting: "&lt;undefined&gt;",
                CaptionBalancing3Close: "&lt;undefined&gt;",

                CaptionTablet_ButtonItems: "&lt;undefined&gt;",
                CaptionTablet_ButtonMore: "&lt;undefined&gt;",
                CaptionTablet_ButtonPaymentMethods: "&lt;undefined&gt;"
            },

            SetCaptions: function(captions) {
                $.extend(l$, captions);
            }
        };

        Object.defineProperty(n$.Localization,
            "captions",
            {
                get: function() {
                    return n$.Localization.Captions;
                },
                set: function(val) {
                    n$.Localization.SetCaptions(val);
                }
            });

        window["l$"] = n$.Localization.Captions;
    });

;
n$.addModule("MajorTom",
    function () {
        n$.ready(function () {
            n$.Capabilities.Events.documentReady("posActive");
            n$.Capabilities.Events.documentReady("requestCustomization");
        });

        n$.ready(function () {
            setInterval(function () {
                n$.Events.KeepAlive.raise();
            }, 239000);
        });
    });

;
n$.addModule("Menu",
    function() {
        n$.Menu = function(m, subMenu) {
            var me = this, menuId = m.id;

            this.menu = m.id ? n$.Menu.prototype.__menus[m.id] : subMenu;
            this.rows = [];
            delete m.id;

            var free = [];
            var rowsIsArray = $.isArray(m.rows);
            var columnsIsArray = $.isArray(m.columns);
            var r = rowsIsArray ? m.rows.length : m.rows;
            var c = columnsIsArray ? m.columns.length : m.columns;
            var freeCount = r * c;
            for (var i = 0; i < r; i++) {
                var row = [];
                var freeRow = [];
                for (var j = 0; j < c; j++) {
                    row.push(null);
                    freeRow.push(null);
                };
                this.rows.push(row);
                rowsIsArray && (row.heightFactor = m.rows[i]);
                free.push(freeRow);
            };

            function fitOrContinue(b, x, y) {
                if (!me.rows[y][x]) {
                    var btn;
                    me.rows[y][x] = btn = n$.Menu.newButton(b, subMenu && subMenu.parentBtn);
                    btn.positionReference = { x: x, y: y };
                    btn.menuId || (menuId && (btn.menuId = menuId));
                    btn.widthFactor = columnsIsArray ? m.columns[x] : 1;
                    if (b.Row) btn.row = b.Row;
                    if (b.Column) btn.column = b.Column;

                    btn.action &&
                        btn.action.Type &&
                        btn.action.Type === "Menu" &&
                        (btn.submenu = new n$.Menu(m, { MenuButtons: b.MenuButtons, parentBtn: btn }));
                    free[y][x] = 1;
                    freeCount--;
                    return true;
                };
                return false;
            };

            function placeButton(b, startX, startY, favorColumn) {
                startX >= c && (startX = c - 1);
                startY >= r && (startY = r - 1);
                var x = startX, y = startY;
                while (freeCount > 0) {
                    if (fitOrContinue(b, x, y)) return;
                    favorColumn
                        ? (
                            y++,
                            y >= r && (y = 0, x++),
                            x >= c && (x = 0)
                        )
                        : (
                            x++,
                            x >= c && (x = 0, y++),
                            y >= r && (y = 0)
                        );
                    if (x === startX && y === startY) return;
                };
            };

            function filterButtons(b) {
                function filterOk(filter, value) {
                    var filters = filter.split("|");
                    for (var j = 0; j < filters.length; j++)
                        if (filters[j] === value)
                            return true;
                    return false;
                };

                function shouldShow(button) {
                    if (!button.Content)
                        return true;

                    if (button.Content.filterSalesPerson)
                        return filterOk(button.Content.filterSalesPerson, n$.State.transaction.salesPerson);
                    if (button.Content.filterRegister)
                        return filterOk(button.Content.filterRegister, n$.State.transaction.register);

                    return true;
                };

                var btns = [];
                for (var l = b.length - 1; l >= 0; l--) {
                    shouldShow(b[l]) && btns.push(b[l]); // || buttons.splice(l, 1);
                };
                return btns; //buttons;
            };

            var buttons = filterButtons(this.menu ? this.menu.MenuButtons : []);
            while (buttons.length < c * r) buttons.push({ Enabled: false });
            for (var iter = 0; iter < 4; iter++) {
                var todo = [];
                for (var k = 0; k < buttons.length; k++) {
                    var b = buttons[k];
                    var skip = true;
                    var placeX = 0, placeY = 0, favorColumn = false;
                    iter === 0 &&
                        (b.Row && b.Column) &&
                        (skip = false, placeX = b.Column - 1, placeY = b.Row - 1);
                    iter === 1 && (b.Column) && (skip = false, placeX = b.Column - 1, favorColumn = true);
                    iter === 2 && (b.Row) && (skip = false, placeY = b.Row - 1);
                    iter === 3 && (skip = false);
                    skip ? todo.push(b) : placeButton(b, placeX, placeY, favorColumn);
                };
                buttons = todo;
            };

            if (subMenu) {
                this.rows[r - 1][c - 1] = {
                    caption: l$.Global_Back,
                    enabled: true,
                    backgroundColor: "red",
                    iconClass: "fa-backward",
                    widthFactor: 1,
                    action: { Type: "Back" }
                };
            };
        };

        n$.Menu.prototype.show = function(button, parentGrid) {
            if (!button.inPlaceMenu) {
                var layout = $.extend({}, parentGrid.layout);
                layout.rows = this.rows;
                layout.thisGridControl = parentGrid.eventSource;
                var grid = new n$.Controls.ButtonGrid.Grid(layout);
                grid.visible = false;
                grid.parentGrid = parentGrid;
                button.inPlaceMenu = grid;
                parentGrid.parent.append(button.inPlaceMenu);
            };
            parentGrid.visible = false;
            button.inPlaceMenu.visible = true;
        };
        n$.Menu.prototype.__menus = {};

        n$.Menu.newButton = function(b, parent) {
            if (typeof b !== "object" || b === null) b = {};
            var btn = {
                caption: b.Caption,
                action: b.Action || (b.MenuButtons && { Type: "Menu" }),
                enabled: b.Enabled === n$.NewEnums.ButtonEnabledState.Enabled,
                autoEnable: b.Enabled === n$.NewEnums.ButtonEnabledState.Auto,
                backgroundColor: b.BackgroundColor,
                bold: b.Bold,
                "class": b.Class,
                color: b.Color,
                fontSize: b.FontSize, // TODO: parseEnum!
                iconClass: b.IconClass,
                tooltip: b.Tooltip,
                content: b.Content
            };
            if (parent) {
                if (parent.menuId)
                    btn.menuId = parent.menuId;
                if (parent.content.keyId)
                    btn.parentKeyId = parent.content.keyId;
            };
            return btn;
        };

    });

n$.addModule("Polyfills",
    function () {
        Object.defineProperty(Date.prototype,
            "toJSON",
            {
                value: function() {
                    return moment(this).format();
                }
            });

        if (!String.prototype.repeat) {
            Object.defineProperty(String.prototype,
                "repeat",
                {
                    value: function(count) {
                        "use strict";
                        if (this == null) {
                            throw new TypeError("can't convert " + this + " to object");
                        }
                        var str = "" + this;
                        count = +count;
                        // ReSharper disable once CoercedEqualsUsing
                        // ReSharper disable once SimilarExpressionsComparison
                        if (count != count) {
                            count = 0;
                        }
                        if (count < 0) {
                            throw new RangeError("repeat count must be non-negative");
                        }
                        if (count === Infinity) {
                            throw new RangeError("repeat count must be less than infinity");
                        }
                        count = Math.floor(count);
                        if (str.length === 0 || count === 0) {
                            return "";
                        }
                        // Ensuring count is a 31-bit integer allows us to heavily optimize the
                        // main part. But anyway, most current (August 2014) browsers can't handle
                        // strings 1 << 28 chars or longer, so:
                        if (str.length * count >= 1 << 28) {
                            throw new RangeError("repeat count must not overflow maximum string size");
                        }
                        var rpt = "";
                        for (;;) {
                            if ((count & 1) === 1) {
                                rpt += str;
                            }
                            count >>>= 1;
                            if (count === 0) {
                                break;
                            }
                            str += str;
                        }
                        // Could we try:
                        // return Array(count + 1).join(this);
                        return rpt;
                    }
                });
        };

        Object.defineProperty(String.prototype,
            "substitute",
            {
                value: function() {
                    var str = this, i = 0;
                    [].slice.call(arguments)
                        .forEach(function(a) {
                            str = str.replace(new RegExp("%" + ++i), a);
                        });
                    return str;
                }
            }
        );

        if (!Array.prototype.findIndex) {
            Object.defineProperty(Array.prototype, 'findIndex', {
                value: function (predicate) {
                    // 1. Let O be ? ToObject(this value).
                    if (this == null) {
                        throw new TypeError('"this" is null or not defined');
                    }

                    var o = Object(this);

                    // 2. Let len be ? ToLength(? Get(O, "length")).
                    var len = o.length >>> 0;

                    // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                    if (typeof predicate !== 'function') {
                        throw new TypeError('predicate must be a function');
                    }

                    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                    var thisArg = arguments[1];

                    // 5. Let k be 0.
                    var k = 0;

                    // 6. Repeat, while k < len
                    while (k < len) {
                        // a. Let Pk be ! ToString(k).
                        // b. Let kValue be ? Get(O, Pk).
                        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                        // d. If testResult is true, return k.
                        var kValue = o[k];
                        if (predicate.call(thisArg, kValue, k, o)) {
                            return k;
                        }
                        // e. Increase k by 1.
                        k++;
                    }

                    // 7. Return -1.
                    return -1;
                }
            });
        };

        if (!Array.prototype.find) {
            Object.defineProperty(Array.prototype, 'find', {
                value: function (predicate) {
                    // 1. Let O be ? ToObject(this value).
                    if (this == null) {
                        throw new TypeError('"this" is null or not defined');
                    }

                    var o = Object(this);

                    // 2. Let len be ? ToLength(? Get(O, "length")).
                    var len = o.length >>> 0;

                    // 3. If IsCallable(predicate) is false, throw a TypeError exception.
                    if (typeof predicate !== 'function') {
                        throw new TypeError('predicate must be a function');
                    }

                    // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
                    var thisArg = arguments[1];

                    // 5. Let k be 0.
                    var k = 0;

                    // 6. Repeat, while k < len
                    while (k < len) {
                        // a. Let Pk be ! ToString(k).
                        // b. Let kValue be ? Get(O, Pk).
                        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                        // d. If testResult is true, return kValue.
                        var kValue = o[k];
                        if (predicate.call(thisArg, kValue, k, o)) {
                            return kValue;
                        }
                        // e. Increase k by 1.
                        k++;
                    }

                    // 7. Return undefined.
                    return undefined;
                }
            });
        };
    });
;
n$.addModule("Popup",
    function() {

        n$.Popup = {
            popups: [],
            Count: 0,

            dialog: function(par) {
                new n$.Popup.Dialog(par).show();
            },
            input: function(par) {
                new n$.Popup.EditBoxDialog(par).show();
            },
            numpad: function(par) {
                new n$.Popup.NumpadDialog(par).show();
            },
            calendar: function(par) {
                new n$.Popup.CalendarGridDialog(par).show();
            },
            FunctionsPad: function(par) {
                new n$.Popup.FunctionspadDialog({
                    caption: par.Caption,
                    callback: par.callback,
                    width: "65%",
                    height: "75%",
                    rows: par.rows,
                    columns: par.columns,
                    menu: par.menu,
                    dataSource: par.dataSource
                }).show();
            },
            Lookup: function(par) {
                n$.Debug.Popup.log({ event: "n$.Popup.Lookup", data: par });
                new n$.Popup.Lookup(par).show();
            },

            error: function(text, callback) {
                return new n$.Popup.Dialog({
                    caption: text,
                    style: n$.Enums.DialogStyle.Error,
                    title: l$.DialogCaption_Error,
                    callback: callback
                }).show();
            },
            confirm: function(text, callback) {
                return new n$.Popup.Dialog({
                    caption: text,
                    style: n$.Enums.DialogStyle.Confirm,
                    title: l$.DialogCaption_Confirmation,
                    callback: callback
                }).show();
            },
            message: function(text, callback) {
                return new n$.Popup.Dialog({
                    caption: text,
                    style: n$.Enums.DialogStyle.Message,
                    title: l$.DialogCaption_Message,
                    callback: callback
                }).show();
            }
        };
        n$.Popup.current = null;

        var awaiters = [];
        function fireAwaiters(sender) {
            var retain = [];
            awaiters.forEach(function(a) {
                a.type === sender.subtype || !a.type
                    ? a.callback(sender)
                    : retain.push(a);
            });
            awaiters = retain;
        };
        Object.defineProperty(n$.Popup,
            "await",
            {
                value: function (type, callback) {
                    typeof type === "function" && (callback = type, type = null);
                    awaiters.push({
                        type: type,
                        callback: callback
                    });
                }
            });

        //**************************************************************************************
        //
        //                                   Popup Base Control
        //
        //**************************************************************************************

        n$.Popup.Base = function(par) {
            this.__contentContainer = {};
            this.__shown = false;
            this.__completeCallback = false;
            this.__okButton = null;
            this.__popupControl = null;
            this.__titlebar = null;

            var me = this;

            // Functions to provide callbacks in derived classes
            this.__dialogContent = undefined;
            this.__dialogActions = undefined;

            this.getZIndex = function() {
                return n$.Popup.Base.prototype.zbase + n$.Popup.Count;
            };
            this.append = function(html) {
                this.html = html;
                this.html.style("position: absolute; visibility: hidden");
            };
            this.init = function(p) {
                me = this;

                if (p && typeof p.callback === "function") {
                    this.__completeCallback = p.callback;
                };

                if (!par || !par.class) {
                    n$.Debug
                        .error("The dialog was not properly initialized.");
                }

                me.html =
                    new n$.Controls.Container({
                        "class": "np-popup " + par.class,
                        width: this.__content.width,
                        height: this.__content.height
                    }).append(
                        new n$.Controls.Label({ "class": "titlebar", caption: p.title || "" }),
                        new n$.Controls.Container({ "class": "body" }).assignTo(this, "__body")
                        .append(
                            new n$.Controls.Container({ "class": "content" }).assignTo(this, "__contentContainer")
                            .append(this.__dialogContent)
                        ),
                        new n$.Controls.Container({ "class": "actions" }).assignTo(this, "__actions")
                        .append(new n$.Controls.Container({ "class": "buttons" }).append(this.__dialogActions))
                    )
                    .assignTo(this, "__popupControl");
                this.__dialogActions instanceof Array &&  this.__dialogActions.forEach(function(btn) {
                    btn.button.dialogAction = true;
                });
                me.html.attr("np-control", "np-popup");
                me.html.eventSource = me;
            };
            this.show = function(p) {
                // p { callback, clickCallback }
                if (typeof p !== "object")
                    p = me.__content;

                if (!me.__shown)
                    setTimeout(function() {
                        n$.Popup.Count += 1;
                        n$.Popup.popups.push(me);
                        n$.Capabilities.KeyboardBindings.popupActive(n$.Popup.Count);

                        me.previousPopup = n$.Popup.popups.current;
                        n$.Popup.popups.current = me;

                        n$.Window.DimScreen(true, p ? p.clickCallback : undefined);
                        (n$.State.wysiwyg ? n$.UI.controlAddIn : $("body")).prepend(me.html.html);
                        typeof me.focusing === "function" &&
                            (me.focusElement = me.focusing(), n$.Focus.request(me));

                        me.__shown = true;
                        var width = me.html.html.width() > window.innerWidth * 0.55
                            ? window.innerWidth * 0.55
                            : me.html.html.width();
                        if (!n$.Framework.Environment.Mobile() && width < me.html.html.height() / 1.3)
                            width = me.html.html.height() / 1.3;

                        var top = window.innerHeight / 2 - me.html.html.height() / 2;
                        var left = (window.innerWidth * (n$.State.wysiwyg ? 0.75 : 1)) / 2 - width / 2;

                        n$.State.wysiwyg &&
                            n$.State.wysiwyg.onClose(function () {
                                if (!me.__shown)
                                    return;
                                me.html.html.css("left",
                                    window.innerWidth / 2 - width / 2);
                            });

                        $(me.html.html)
                            .css({
                                "position": "absolute",
                                "visibility": "visible",
                                "z-index": me.getZIndex(),
                                "left": left,
                                "top": top,
                                "display": "block",
                                "width": width
                            })
                            .addClass("np-popup-js")
                            .select()
                            .slideUp(12,
                                function() {
                                    fireAwaiters(me);
                                });

                        if (typeof me.extendShow === "function") {
                            me.extendShow(p);
                        };

                        if (p && typeof p.callback !== "undefined") {
                            me.__completeCallback = p.callback;
                        };
                        document.addEventListener("keyup", me.onDocumentKeyUp, true);
                        document.addEventListener("keydown", me.onDocumentKeyDown, true);
                    });

                return me;
            };
            this.hide = function () {
                n$.Focus.release(me);
                if (n$.Popup.popups.current === me)
                    n$.Popup.popups.current = me.previousPopup;

                if (me.html instanceof n$.Controls.Container && !me.html.disposed)
                    me.html.dispose();

                if (!me.__shown)
                    return me;

                n$.Popup.Count -= 1;
                n$.Capabilities.KeyboardBindings.popupActive(n$.Popup.Count);
                var i = n$.Popup.popups.findIndex(function (a) { return a === me; });
                if (i >= 0)
                    n$.Popup.popups.splice(i, 1);

                n$.Window.DimScreen(false);
                me.html.html.zoomInFadeOut();
                me.__shown = false;

                document.removeEventListener("keyup", me.onDocumentKeyUp, true);
                document.removeEventListener("keydown", me.onDocumentKeyDown, true);
                $(me).trigger("closed");
                return me;
            };

            this.validValue = function () { return true; };
            this.alarmInvalidValue = function() {};
            this.removeInvalidValueAlarm = function() {};

            this.completed = false;
            this.complete = function (a) {
                if (this.completed)
                    return;

                this.removeInvalidValueAlarm();
                if (!a.Cancelled) {
                    if (!this.validValue()) {
                        this.alarmInvalidValue();
                        return;
                    };
                };
                this.completed = true;

                n$.Debug.Popup.logPos({ event: "Dialog completed", data: { dialog: par, context: a } });
                if (typeof this.__completeCallback === "function") {
                    this.__completeCallback(a);
                }
                this.hide();
            };

            var downWhich;
            this.onDocumentKeyDown = function(e) {
                downWhich = e.which;
            };
            this.onDocumentKeyUp = function (e) {
                if (e.which !== downWhich)
                    return;

                if (e.which === 27) {
                    if (me && typeof me === "object" && typeof me.complete === "function") {
                        me.complete({
                            Cancelled: true
                        });
                    };
                    e.stopImmediatePropagation();
                    e.stopPropagation();
                    return;
                };
                if (e.which === 13 && me.__okButton && me.okOnEnter) {
                    $(me.__okButton.html).click();
                };
            }
        };
        n$.Popup.Base.prototype.zbase = 30;
        n$.Popup.Base.prototype.count = 1;


        //**************************************************************************************
        //
        //                                Popup Dialog Control
        //
        //**************************************************************************************

        n$.Popup.Dialog = function(par) {
            n$.Popup.Base.call(this, { "class": "dialog" });

            // par { callback, caption, style }
            n$.Debug.Popup.logPos({ event: "Dialog", data: par });

            var me = this;
            this.__content = par;

            this.__dialogContent = new n$.Controls.Label({ "class": "text", caption: par.caption.replace(/\n/g, "<br>") });
            this.__dialogActions = par.style.buttons.buttons.map(function(button) {
                return new n$.Controls.Button(
                {
                    html: $("<span/>"),
                    "class": button.class,
                    button: { type: button },
                    on: {
                        clicked: function() {
                            me.complete(button);
                        }
                    }
                }).assignTo(me, "__okButton");
            });

            this.init(par);

            this.focusing = function() {
                return this.__okButton.html[0];
            };
        };
        n$.inherit(n$.Popup.Dialog, n$.Popup.Base);


        //**************************************************************************************
        //
        //                                  Popup NumPad Control
        //
        //**************************************************************************************

        n$.Popup.NumpadDialog = function (par) {
            n$.Popup.Base.call(this, { "class": "numpad" });

            // par { masked, caption, text, notBlank, type }
            n$.Debug.Popup.logPos({ event: "NumpadDialog", data: par });

            var me = this;
            me.okOnEnter = true;
            me.subtype = "Numpad";
            this.__content = par;
            var dataEntryPad = null;

            par.value = n$.NewEnums.NumpadType.behavior[par.type].parse(par.value); // To obtain a strong type
            par.value = n$.NewEnums.NumpadType.behavior[par.type].format(par.value, true); // To format it for the screen

            var value;
            this.__dialogContent = [
                new n$.Controls.Container().append(
                    new n$.Controls.Label({ "class": "entry-label", caption: par.caption })
                ),
                dataEntryPad = new n$.Controls.DataEntryPad({
                    masked: !!par.masked,
                    text: par.value,
                    type: par.type,
                    secure: !!par.masked,
                    on: {
                        cancelled: function() {
                            me.complete({ Cancelled: true });
                        },
                        inputComplete: function() {
                            me.complete({ Text: dataEntryPad.getCalculatedValue(), Cancelled: false });
                        },
                        input: function() {
                            me.__okButton.enabled = !(!(dataEntryPad.value)) || !par.notBlank;

                            value !== dataEntryPad.value && $(me).trigger("valueChanged", me);
                        }
                    }
                }).assignTo(me, "dataEntryPad")
            ];
            this.__dialogActions = [
                new n$.Controls.Button(
                {
                    html: $("<span/>"),
                    "class": "ok",
                    button: { type: n$.Enums.ButtonType.Ok },
                    enabled: par.value || !par.notBlank,
                    on: {
                        clicked: function() {
                            ((dataEntryPad.value && par.notBlank) || !par.notBlank) &&
                                me.complete({ Text: dataEntryPad.getCalculatedValue(), Cancelled: false });
                        }
                    }
                }).assignTo(me, "__okButton"),
                new n$.Controls.Button(
                {
                    html: $("<span/>"),
                    "class": "cancel",
                    button: { type: n$.Enums.ButtonType.Cancel },
                    on: {
                        clicked: function() {
                            me.complete({ Cancelled: true });
                        }
                    }
                })
            ];

            if (!n$.Framework.Environment.Mobile())
                this.focusing = function () {
                    return dataEntryPad.__numpadInput.html[0];
                };

            this.extendShow = function() {
                if (dataEntryPad) {
                    me.dataEntryPad = dataEntryPad;
                    dataEntryPad.__numpadInput &&
                        setTimeout(function() { dataEntryPad.__numpadInput.selectAll(); });
                };
            };

            this.validValue = function () {
                if (par.type === n$.NewEnums.NumpadType.Text)
                    return true;

                var v = n$.NewEnums.NumpadType.behavior[par.type].calculate(dataEntryPad.value);
                par.type === n$.NewEnums.NumpadType.Date && (v = v.getTime());
                return typeof v === "number" && !isNaN(v);
            };

            this.alarmInvalidValue = function() {
                dataEntryPad.alarmInvalidValue();
            };

            this.removeInvalidValueAlarm = function() {
                dataEntryPad.removeInvalidValueAlarm();
            };

            Object.defineProperty(this,
                "value",
                {
                    get: function() {
                        return dataEntryPad.getCalculatedValue();
                    }
                });

            this.init(par);
        };
        n$.inherit(n$.Popup.NumpadDialog, n$.Popup.Base);


        //**************************************************************************************
        //
        //                             Popup Functions Pad Control
        //
        //**************************************************************************************

        n$.Popup.FunctionspadDialog = function (par) {
            n$.Popup.Base.call(this, { "class": "functionspopup" });

            // par { caption, rows, columns }

            n$.Debug.Popup.logPos({ event: "FunctionsDialog", data: par });

            this.__content = par;
            var me = this;
            me.subtype = "Functions";

            par.title = par.caption;
            this.__dialogContent = [
                new n$.Controls.Container({ "class": "buttongrid" }).append(
                    new n$.Controls.ButtonGrid.Grid({
                            rows: new n$.Menu({ id: par.menu, columns: par.columns || 5, rows: par.rows || 6 }).rows,
                            dataSource: par.dataSource,
                            oneRow: true,
                            on: {
                                buttonClicked: function(event, button) {
                                    // TODO: send message to Major Tom
                                    if (button.button.action &&
                                        ((button.button.action.Type === "Menu" &&
                                            !button.button.action.OpenAsPopup)) ||
                                        (button.button.action.Type === "Back"))
                                        return;

                                    me.complete(button.button);
                                }
                            }
                        }
                    ).assignTo(me, "buttonGrid"))
            ];
            this.__dialogActions = [
                new n$.Controls.Button({
                    button: {
                        caption: l$.Global_Close,
                        backgroundColor: "dark-red",
                        on: {
                            clicked: function() {
                                me.html.html.removeClass("active");
                                me.complete({ Cancelled: true });
                            }
                        }
                    }
                })
            ];
            this.init(par);

            //if (par.dataSource) {
            //    setTimeout(function() {
            //        var dataSource = n$.State.dataStore instanceof n$.Data.DataStore &&
            //            n$.State.dataStore.getSource(par.dataSource);
            //        dataSource instanceof n$.Data.DataSource && (dataSource.position = dataSource.position);
            //    });
            //};
        };
        n$.inherit(n$.Popup.FunctionspadDialog, n$.Popup.Base);


        //**************************************************************************************
        //
        //                                Popup Edit Box Control
        //
        //**************************************************************************************

        n$.Popup.EditBoxDialog = function (par) {
            n$.Popup.Base.call(this, { "class": "searchbox" });

            // par { caption, text, maxLength }

            n$.Debug.Popup.logPos({ event: "EditBoxDialog", data: par });

            var me = this;
            me.okOnEnter = true;
            this.__content = par;
            var searchBoxInput = null;
            me.subtype = "Edit";

            this.__dialogContent = [
                new n$.Controls.Label({ "class": "caption", caption: par.caption }),
                searchBoxInput = new n$.Controls.TextBox({
                    "class": "input",
                    value: par.value,
                    type: par.masked === true ? "password" : "text",
                    on: {
                        input: function() {
                            me.__okButton.enabled = !(!(searchBoxInput.value)) || !par.notBlank;
                        }
                    }
                }),
                new n$.Controls.Label({ "class": "text", caption: par.instruction })
            ];
            this.__dialogActions = [
                me.__okButton = new n$.Controls.Button({
                    button: {
                        "class": "button ok",
                        caption: l$.Global_OK,
                        enabled: par.value || !par.notBlank,
                        on: {
                            clicked: function() {
                                ((searchBoxInput.value && par.notBlank) || !par.notBlank) &&
                                    me.complete({
                                        Text: searchBoxInput.value.substring(0, par.maxLength),
                                        Cancelled: false
                                    });
                            }
                        }
                    }
                }),
                new n$.Controls.Button({
                    button: {
                        "class": "button cancel",
                        caption: l$.Global_Cancel,
                        on: {
                            clicked: function() {
                                me.complete({ Cancelled: true });
                            }
                        }
                    }
                })
            ];

            n$.Framework.Environment.Mobile() ||
            (this.focusing = function () {
                return searchBoxInput && searchBoxInput.html[0];
            });
            this.searchBoxInput = searchBoxInput;

            this.init(par);
        };
        n$.inherit(n$.Popup.EditBoxDialog, n$.Popup.Base);


        //**************************************************************************************
        //
        //                              Popup CalendarGrid Control
        //
        //**************************************************************************************

        n$.Popup.CalendarGridDialog = function (par) {
            par.width = "85%";
            par.height = "60%";

            n$.Popup.Base.call(this, { "class": "calendargrid" });

            // par { caption, text}
            n$.Debug.Popup.logPos({ event: "CalendarGridDialog", data: par });


            var me = this;
            this.__content = par;
            this.__datePicker = null;
            this.__grid = null;
            this.__keyFields = par.keyFields;
            me.subtype = "Calendar";

            par.data.options = {
                withCheckboxes: true,
                checkedByDefault: !!par.checkedByDefault,
                doNotSyncPosition: true
            };
            par.columns && (par.data.columns = par.columns, par.data.columns.source = "json");

            this.__dialogContent = [
                new n$.Controls.Container({ "class": "all" }).append(
                    new n$.Controls.Container({ "class": "caption" }).append(
                        new n$.Controls.Label({ "class": "text", caption: par.caption.replace(/\n/g, "<br>") })
                    ),
                    new n$.Controls.Container({ "class": "controlcontent" }).append(
                        new n$.Controls.Container({ "class": "left" }).append(
                            me.__datePicker = new n$.Controls.DatePicker({
                                options: {
                                    monthNames: par.monthNames,
                                    monthNamesShort: par.monthNamesShort,
                                    dayNames: par.dayNames,
                                    dayNamesMin: par.dayNamesMin,
                                    dayNamesShort: par.dayNamesShort,
                                    firstDay: par.firstDayOfWeek,
                                    isRTL: par.isRTL,
                                    nextText: par.nextText,
                                    prevText: par.prevText,
                                    numberOfMonths: par.numberOfMonths
                                },
                                date: par.date
                            })
                        ),
                        new n$.Controls.Container({ "class": "right" }).append(
                            me.__grid = new n$.Controls.Grid(par.data)
                        )
                    )
                )
            ];
            this.__dialogActions = [
                new n$.Controls.Button({
                    button: {
                        "class": "button ok",
                        caption: l$.Global_OK,
                        on: {
                            clicked: function () {
                                var d = me.__datePicker.value;
                                d.setHours(d.getHours() - d.getTimezoneOffset() / 60);
                                var selected = {
                                    count: me.__grid.getSelectedRows().length
                                };
                                for (var i = 0; i < me.__grid.getSelectedRows().length; i++)
                                    selected[i] = me.__grid.getSelectedRows()[i].position;
                                me.complete({ Cancelled: false, Date: d, Rows: selected });
                            }
                        }
                    }
                }),
                new n$.Controls.Button({
                    button: {
                        "class": "button cancel",
                        caption: l$.Global_Cancel,
                        on: {
                            clicked: function() {
                                me.complete({ Cancelled: true });
                            }
                        }
                    }
                })
            ];
            this.init(par);
            setTimeout(function () {
                    me.datePicker = me.__datePicker;
                    me.__grid.rebindAllData();
                },
                100);
        };
        n$.inherit(n$.Popup.CalendarGridDialog, n$.Popup.Base);
    });

;
n$.addModule("ScreenSizeAndOrientation",
    function() {
        n$.ready(function() {
                try {
                    function suggestBetterResolution(message) {
                        n$.Popup.dialog({
                            title: "Consider this...",
                            caption: message,
                            style: n$.Enums.DialogStyle.Message
                        });
                    };

                    function refresh() {
                        $("body").empty().css("background-color", "#0072C6");
                        setTimeout(function() {
                            n$.Capabilities.Events.reload();
                        });
                    };

                    var minimum = {
                            width: screen.width * 0.9,
                            height: screen.height - 64
                        },
                        actual = {
                            width: window.outerWidth,
                            height: window.outerHeight
                        },
                        landscape = window.innerWidth > window.innerHeight,
                        orientation = typeof screen.orientation === "object" ? screen.orientation.type : screen.msOrientation || screen.mozOrientation;

                    if (n$.Framework.Environment.Mobile()) {
                        $(window).resize(refresh);
                    } else {
                        if (actual.width < minimum.width || actual.height < minimum.height) {
                            suggestBetterResolution(
                                "This application is optimized to be run in full-screen or maximized when run in the browser.");
                        };

                        var resizing = 0;
                        function resize() {
                            resizing && clearTimeout(resizing);

                            resizing = setTimeout(function() {
                                    var newlandscape = window.innerWidth > window.innerHeight,
                                        newOrientation = typeof screen.orientation === "object"
                                            ? screen.orientation.type
                                            : screen.msOrientation || screen.mozOrientation;
                                    if (newlandscape !== landscape || newOrientation !== orientation)
                                        refresh();
                                },
                                100);
                        };
                        window.addEventListener("resize", resize);
                        window.addEventListener("orientationchange", refresh);
                    };
                } catch (e) {
                };
            },
            true);
    });
;
n$.addModule("State",
    function() {

        // Private state
        var bindings = {};
        var lockTimeout = 0;
        var timeoutTriggersSet = false;

        n$.State = {
            options: {},

            transaction: {},
            dataStore: null,

            clearState: function() {
                /// <summary>
                /// Clears the state.
                /// </summary>
                bindings = {};
                this.transaction = {};
            },

            format: {
                date: {},
                number: {}
            },

            resetTimeout: function(lockable) {
                if (!n$.State.options.autoLockTimeout)
                    return;

                lockTimeout && clearTimeout(lockTimeout);

                if (!lockable)
                    return;

                lockTimeout = setTimeout(function () {
                    n$.UI.currentView.lock();
                }, n$.State.options.autoLockTimeout * 1000);

                if (!timeoutTriggersSet) {
                    document.addEventListener("keypress", n$.State.resetTimeout, true);
                    document.addEventListener("click", n$.State.resetTimeout, true);
                    timeoutTriggersSet = true;
                };
            },

            bind: function(control, name) {
                /// <summary>
                /// Binds a control value to a named property of the n$.State._bindings object
                /// </summary>
                /// <param name="control">Control from which the value is being bound.</param>
                /// <param name="name">Name of the n$.State._bindings property that will point to the bound control's value.</param>

                if (bindings.hasOwnProperty(name)) {
                    delete bindings[name];
                };
                Object.defineProperty(bindings,
                    name,
                    {
                        get: function() {
                            return control.value;
                        },
                        set: function(val) {
                            control.value = val;
                        },
                        configurable: true
                    });
            },

            bindObject: function(obj) {
                $.bindProperties(obj, bindings);
            }
        };
    });

;
n$.addModule("UI",
    function () {

        var currentView;

        function showWatermark(img, text) {
            var watermark = $("<div>").addClass("np-watermark");
            var content = $("<div>").addClass("content");

            img
                ? content.append($("<img>").attr("src", n$.UI.images.watermark))
                : (text && content.text(text));

            watermark.append(content);
            $("body").append(watermark);
        };

        var themeType = {
            "Logo": function (content) {
                if (n$.UI.logoSet || !n$.UI.logos || !n$.UI.logos.length)
                    return;

                n$.UI.logos.forEach(function (logo) {
                    logo.alternativeSrc = content;
                });
            },
            "Background": function (content) {
                $("body").css("background-image", "url(" + content + ")");
            },
            "Stylesheet": function (content) {
                $("body").append("<style>" + content + "</style>");
            },
            "JavaScript": function (content) {
                try {
                    eval(content);
                } catch (e) {
                    n$.Debug.UI.warning("Error while running custom theme JavaScript: " + e);
                }
            }
        };

        var theme = {
            viewType: {

            },
            view: {

            },
            available: false
        };

        var Theme = function (t) {
            var type = n$.NewEnums.ThemeType.format(t.type);
            var applier = typeof themeType[type] === "function" ? themeType[type] : function () { };
            var content = t.content;
            theme.available = true;

            this.apply = function () {
                applier(content);
            }
        };

        n$.UI = {
            controlAddIn: $("#controlAddIn"),
            clear: function () {
                this.controlAddIn.empty();
            },
            setWatermarkText: function (text) {
                showWatermark("", text);
            },
            setWatermarkImage: function () {
                showWatermark(true);
            },
            theme: {
                register: {
                    view: function (t) {
                        if (!theme.view[t.view])
                            theme.view[t.view] = [];
                        theme.view[t.view].push(new Theme(t));
                    },
                    viewType: function (t) {
                        var type = n$.NewEnums.ThemeTargetViewType.format(t.viewType);
                        if (!theme.viewType[type])
                            theme.viewType[type] = [];
                        theme.viewType[type].push(new Theme(t));
                    }
                },
                apply: function (view, viewType) {
                    if (n$.UI.images["loginbackground"]) {
                        $("body").css({
                            "background-image": "url(" + n$.UI.images["loginbackground"] + ")",
                            "background-size": "cover"
                        });
                    }
                    if (!theme.available)
                        return;

                    if (viewType && theme.viewType[viewType]) {
                        theme.viewType[viewType].forEach(function (t) {
                            t.apply();
                        });
                    }
                    if (view && theme.view[view]) {
                        theme.view[view].forEach(function (t) {
                            t.apply();
                        });
                    }
                }
            },
            showMessage: function (text, closed) {
                var div = $("<div class=\"np-userguide-message\">");
                div.append(text);
                n$.Window.DimScreen(true);
                $("body").append(div);
                div
                    .showCenter()
                    .focus()
                    .slideUp()
                    .find("input[type=button]")
                    .on("click",
                        function () {
                            div.remove();
                            n$.Window.DimScreen(false);
                            typeof closed === "function" && closed(this);
                        });
            },
            showTooltip: function (elem, text) {
                var tooltip = $("<div class=\"np-userguide-tooltip tooltiptext\">").subtleFadeIn();

                tooltip.append(text);
                $("body").append(tooltip);

                var mobile = n$.Framework.Environment.Mobile(), minMargin = (mobile ? 8 : 16);

                var top,
                    left,
                    bottom,
                    right,
                    positions = ["over", "under", "right", "left"],
                    index,
                    elemBounds = elem[0].getBoundingClientRect(),
                    position = "over";
                var bounds = {
                    "over": function () {
                        top = Math.max(elem.offset().top - tooltip.outerHeight() - minMargin, minMargin);
                        left = Math.max(elem.offset().left + elem.outerWidth() / 2 - tooltip.outerWidth() / 2,
                            minMargin);
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 0;
                        if (left + tooltip.outerWidth() > window.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.innerWidth) - minMargin;
                    },
                    "under": function () {
                        top = elem.offset().top + elem.outerHeight() + minMargin;
                        left = Math.max(elem.offset().left + elem.outerWidth() / 2 - tooltip.outerWidth() / 2,
                            minMargin);
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 1;
                        if (top + tooltip.outerHeight() > window.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.innerHeight) - minMargin;
                        if (left + tooltip.outerWidth() > window.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.innerWidth) - minMargin;
                    },
                    "right": function () {
                        left = elem.offset().left + elem.outerWidth() + minMargin;
                        top = elem.offset().top + elem.outerHeight() / 2 - tooltip.outerHeight() / 2;
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 2;
                        if (left + tooltip.outerWidth() > window.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.innerWidth) - minMargin;
                        if (top + tooltip.outerHeight() > window.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.innerHeight) - minMargin;
                    },
                    "left": function () {
                        left = Math.max(elem.offset().left - tooltip.outerWidth() - minMargin, minMargin);
                        top = elem.offset().top + elem.outerHeight() / 2 - tooltip.outerHeight() / 2;
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 3;
                        if (top + tooltip.outerHeight() > window.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.innerHeight) - minMargin;
                    }
                };

                function overlap(r1, r2) {
                    return !(r1.right < r2.left || r2.right < r1.left || r1.bottom < r2.top || r2.bottom < r1.top);
                };

                var count = 4;
                while (bounds[position]() ||
                    overlap(elemBounds, { top: top, left: left, right: right, bottom: bottom }) && count-- > 0) {
                    if (++index > 3)
                        index = 0;
                    position = positions[index];
                };

                tooltip.css("top", top);
                tooltip.css("left", left);
                tooltip.addClass(position);

                return tooltip;
            },

            images: {
                logo: Microsoft.Dynamics.NAV.GetImageResource("npretaillogo_med.png"),
                watermark: ""
            }
        };

        Object.defineProperty(n$.UI,
            "currentView",
            {
                get: function () { return currentView && currentView instanceof n$.View.BaseView && currentView; },
                set: function (val) { currentView = val; }
            });
    });

;
n$.addModule("UserGuide",
    function () {
        var constants = {
            icons: {
                completed: "fa-check",
                running: "fa-gear",
                auto: "fa-magic",
                available: "fa-play"
            },
            styles: {
                completed: "completed",
                running: "running",
                auto: "waiting",
                available: "available"
            }
        },
            lastClosePosition,
            scheduledWalkthroughs = [],
            isEngineRunning;

        // Copying styles to parent window
        function copyRequiredStylesToParentDocument() { };
        n$.ready(function () {
            var stylesCopied;

            function copyToTop(from) {
                var node = from.cloneNode();
                node.innerHTML = from.innerHTML;
                window.top.document.head.appendChild(node);
            };

            function processHeadElementsByTagName(tag, callback) {
                var tags = document.head.getElementsByTagName(tag);
                tags &&
                    [].slice.call(tags)
                        .forEach(function (elem) {
                            callback(elem);
                        });
            };

            copyRequiredStylesToParentDocument = function () {
                if (stylesCopied)
                    return;

                processHeadElementsByTagName("link",
                    function (style) {
                        if (style.rel.toLowerCase() !== "stylesheet")
                            return;
                        style.href.indexOf("NaviPartner.UserGuide.Style.css") >= 0 && copyToTop(style);
                    });

                processHeadElementsByTagName("style",
                    function (style) {
                        style.innerText.indexOf("FontAwesome") >= 0 && copyToTop(style);
                    });

                stylesCopied = true;
            };
        });

        // Warnings
        function warn(message, isError) {
            isError
                ? n$.Debug.UI.error(message)
                : n$.Debug.UI.warning(message);
        };
        function invalidJson(additional, isError) {
            (typeof additional !== "string" && typeof isError === "undefined") &&
                (isError = additional, additional = undefined);
            warn("Invalid JSON passed to User Guide" + (additional ? ": " + additional : "."), isError);
        };

        n$.UserGuide = function (json) {
            var me = this;

            if (me.validate(json))
                me.json = json;

            me.name = json.name;
            me.description = json.description;
            me.id = json.id;
            me.auto = json.auto;
            me.standalone = json.standalone;

            var triggerViewTypes = [];

            function evaluateOnView(v) {
                var result = false;
                triggerViewTypes.forEach(function (t) {
                    if (result)
                        return;
                    if ((typeof t.view === "string" && t.view === v.type.name) || (v.type === t.view)) {
                        result = {
                            ok: true,
                            guide: me,
                            auto: t.auto
                        };
                        // TODO: do additional filtering or whatever
                        return;
                    };
                });
                return result ||
                    {
                        ok: false
                    };
            };

            json.trigger && (json.trigger instanceof Array || (json.trigger = [json.trigger]));
            json.trigger &&
                json.trigger.forEach(function (t) {
                    me.hasOwnProperty("evaluateOnView") || (me.evaluateOnView = evaluateOnView);
                    t.view && triggerViewTypes.push(t);
                });
        };
        n$.UserGuide.prototype = Object.create({});
        n$.UserGuide.constructor = n$.UserGuide;

        n$.UserGuide.prototype.evaluateOnView = function () {
            return {
                available: true
            };
        };
        n$.UserGuide.prototype.evaluateOnDataUpdate = function () { };
        n$.UserGuide.prototype.validate = function (json) {
            var me = this;
            me.valid = false;

            if (!json)
                return invalidJson();
            if (!json.id)
                return invalidJson("Missing id");

            Object.defineProperty(me,
                "completed",
                {
                    get: function () {
                        return n$.Capabilities.Walkthrough.isWalkthroughCompleted(json.id);
                    }
                });


            me.auto && me.completed.then(completed =>
                completed || setTimeout(() => json.trigger || me.run(null, !completed))
            );

            var steps = [];
            json.steps.forEach(function (step) {
                if (typeof step === "object" && step)
                    steps.push(step);
            });
            json.steps = steps;

            return me.valid = true;
        };

        n$.UserGuide.prototype.run = function (root, explicit) {
            var me = this;
            var running = false, guidePanel;

            // Making sure it is allowed to run
            if (!me.valid)
                return void invalidJson();
            if (!explicit && !me.auto)
                return void 0;

            if (n$.UserGuide.isRunning) {
                scheduledWalkthroughs.push({ guide: this, root: root });
                return void 0;
            };
            isEngineRunning = true;

            copyRequiredStylesToParentDocument();

            !this.hasOwnProperty("isRunning") && delete this.isRunning;
            Object.defineProperty(this,
                "isRunning",
                {
                    get: function () {
                        return running;
                    },
                    configurable: true
                });

            // Locating the control in the UI
            var knownInstances = {};
            function instanceOf(type) {
                if (typeof type !== "string")
                    return typeof type === "function" && type;

                var instance = knownInstances[type];
                if (instance)
                    return instance;

                instance = n$.Controls, type = type.split(".");
                for (var i = 0; i < type.length; i++) {
                    instance = instance[type[i]];
                    if (!instance)
                        return void 0;
                };
                knownInstances[type] = instance;
                return instance;
            };
            function thisControl(ctrl, tag) {
                if (!tag || !tag.type)
                    return void 0;

                var instance = instanceOf(tag.type);
                if (!instance)
                    return void 0;

                if (ctrl instanceof instance) {
                    if (!ctrl.visible)
                        return void 0;

                    if (tag.value) {
                        if (ctrl.value === tag.value)
                            return ctrl;
                        return void 0;
                    };
                    if (tag.caption) {
                        if (typeof ctrl.caption === "string" && ctrl.caption.indexOf(tag.caption) >= 0) {
                            return ctrl;
                        };
                        return void 0;
                    };
                    if (tag.action) {
                        if (ctrl.button && ctrl.button.action) {
                            if (ctrl.button.action.Type === tag.action.type) {
                                switch (tag.action.type) {
                                    case "Workflow":
                                        if (tag.action.workflow === ctrl.button.action.Workflow.Name)
                                            return ctrl;
                                        break;
                                    case "Payment":
                                        if (tag.action.code === ctrl.button.action.Code)
                                            return ctrl;
                                        break;
                                };
                            };
                        };
                        return void 0;
                    };
                    return ctrl;
                };
                return void 0;
            };

            function getControl(rootControl, target, complete) {
                function locateControl(startAt, tag) {
                    if (thisControl(startAt, tag))
                        return startAt;

                    var ctrl = null;
                    for (var i = 0; i < startAt.__controls.length; i++) {
                        ctrl = locateControl(startAt.__controls[i], tag);
                        if (ctrl)
                            break;
                    };
                    return ctrl;
                };

                var locators = {
                    Popup: function () {
                        var found;
                        n$.Popup.popups.forEach(function (p) {
                            if (found)
                                return;
                            target.subtype && target.subtype === p.subtype && (found = p.html);
                        });
                        if (found) {
                            complete(found);
                            return;
                        };
                        n$.Popup.await(target.subtype, function (p) {
                            setTimeout(function () {
                                complete(p.html);
                                setTimeout(function () {
                                    refresh();
                                });
                            });
                        });
                    },
                    html: function () {
                        setTimeout(function () {
                            var context = target.context ? eval(target.context) : window, delay = 0;
                            function scheduleNext() {
                                setTimeout(function () {
                                    var ctrl = $(target.selector, context);
                                    if (ctrl.length && ctrl.offset().top >= 0 && ctrl.offset().left >= 0) {
                                        complete({ html: ctrl, eventSource: ctrl });
                                        return;
                                    };
                                    delay += 100;
                                    delay < 1000
                                        ? scheduleNext()
                                        : complete(null);
                                }, delay);
                            };

                            scheduleNext();
                        });
                    },
                    gridLine: function () {
                        var control = locateControl(rootControl, { type: "Grid" }),
                            delay = 0,
                            selectors = {
                                newLine: function () {
                                    return control.tableBody.find("tr:last-child");
                                }
                            },
                            selector = selectors[target.selector || "newLine"],
                            lastTr = selector();

                        function scheduleNext() {
                            setTimeout(function () {
                                var tr = selector();
                                if (tr.length) {
                                    if (!lastTr.length || lastTr[0] !== tr[0]) {
                                        setTimeout(function () {
                                            tr = selector();
                                            complete({ html: tr, eventSource: tr });
                                        }, 200);
                                        return;
                                    };
                                };
                                delay += 100;
                                delay < 1000
                                    ? scheduleNext()
                                    : complete(control);
                            });
                        };

                        control == null
                            ? complete(null)
                            : scheduleNext();
                    }
                };

                var locator = locators[target.type];
                typeof locator === "function"
                    ? locator(target)
                    : complete(locateControl(rootControl, target));
            };

            // UI functions
            var lastTooltip = null,
                lastHighlight = null,
                lastMessage = null,
                lastEvents = [],
                refreshFuncs = [],
                lastScheduled,
                lastTooltipRemove,
                lastMessageRemove,
                closePresent = false,
                advancePresent = false,
                isLastStep = false,
                lastTooltipRect,
                showClose;

            function scheduleRefresh(func) {
                typeof func === "function" && refreshFuncs.push(func);
            };
            function refresh() {
                refreshFuncs.forEach(function (f) {
                    f();
                });
                refreshFuncs = [];
            };
            function showGuide() {
                if (guidePanel)
                    return;
                $("body", window.top.document).append(guidePanel = $("<div>").addClass("np-userguide"));
            };
            function highlight(elem) {
                var highlighted;
                guidePanel
                    .append(highlighted = $("<div class=\"np-userguide-highlight\">")
                        .css({
                            "position": "absolute",
                            "top": elem.offset().top,
                            "left": elem.offset().left,
                            "width": elem.outerWidth(),
                            "height": elem.outerHeight()
                        }));
                return highlighted;
            };
            function showTooltip(elem, text, pos) {
                var tooltip = $(".np-userguide-tooltip.tooltiptext:not(.removing)", window.top.document).removeClass("over under right left").animateStyles(), existing;
                tooltip.length ? (existing = true, clearTimeout(lastTooltipRemove)) : (tooltip = $("<div class=\"np-userguide-tooltip tooltiptext\">").subtleFadeIn());

                tooltip.empty().append(text).append(!isLastStep && !advancePresent
                    ? htmlize(null, n$.UserGuide.getDefaultButtons(false))
                    : "");
                existing || guidePanel.append(tooltip);

                var mobile = n$.Framework.Environment.Mobile(), minMargin = (mobile ? 8 : 16);

                var top,
                    left,
                    bottom,
                    right,
                    positions = ["over", "under", "right", "left"],
                    index,
                    elemBounds = elem[0].getBoundingClientRect(),
                    position = pos || "over";
                var bounds = {
                    "over": function () {
                        top = Math.max(elem.offset().top - tooltip.outerHeight() - minMargin, minMargin);
                        left = Math.max(elem.offset().left + elem.outerWidth() / 2 - tooltip.outerWidth() / 2,
                            minMargin);
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 0;
                        if (left + tooltip.outerWidth() > window.top.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.top.innerWidth) - minMargin;
                    },
                    "under": function () {
                        top = elem.offset().top + elem.outerHeight() + minMargin;
                        left = Math.max(elem.offset().left + elem.outerWidth() / 2 - tooltip.outerWidth() / 2,
                            minMargin);
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 1;
                        if (top + tooltip.outerHeight() > window.top.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.top.innerHeight) - minMargin;
                        if (left + tooltip.outerWidth() > window.top.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.top.innerWidth) - minMargin;
                    },
                    "right": function () {
                        left = elem.offset().left + elem.outerWidth() + minMargin;
                        top = elem.offset().top + elem.outerHeight() / 2 - tooltip.outerHeight() / 2;
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 2;
                        if (left + tooltip.outerWidth() > window.top.innerWidth - minMargin)
                            left = left - (left + tooltip.outerWidth() - window.top.innerWidth) - minMargin;
                        if (top + tooltip.outerHeight() > window.top.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.top.innerHeight) - minMargin;
                    },
                    "left": function () {
                        left = Math.max(elem.offset().left - tooltip.outerWidth() - minMargin, minMargin);
                        top = elem.offset().top + elem.outerHeight() / 2 - tooltip.outerHeight() / 2;
                        bottom = top + tooltip.outerHeight();
                        right = left + tooltip.outerWidth();
                        index = 3;
                        if (top + tooltip.outerHeight() > window.top.innerHeight - minMargin)
                            top = top - (top + tooltip.outerHeight() - window.top.innerHeight) - minMargin;
                    }
                };

                var count = 4;
                while (bounds[position]() || overlap(elemBounds, { top: top, left: left, right: right, bottom: bottom }) && count-- > 0) {
                    if (++index > 3)
                        index = 0;
                    position = positions[index];
                };

                tooltip.css("top", top);
                tooltip.css("left", left);
                tooltip.addClass(position);

                lastTooltipRect = { top: top, left: left };

                return tooltip;
            };
            function overlap(r1, r2) {
                return !(r1.right < r2.left || r2.right < r1.left || r1.bottom < r2.top || r2.bottom < r1.top);
            };
            function dim(elem) {
                lastScheduled && clearTimeout(lastScheduled);
                var top, left, bottom, right, squareLeft, squareRight, squareTop, squareBottom;
                if (elem) {
                    (top = elem.offset().top,
                        left = elem.offset().left,
                        bottom = top + elem.outerHeight(),
                        right = left + elem.outerWidth(),
                        squareLeft = left && $("<div>").addClass("np-userguide-dim left").css("width", left),
                        squareRight = right < window.top.innerWidth &&
                        $("<div>")
                            .addClass("np-userguide-dim right")
                            .css({
                                "width": window.top.innerWidth - right,
                                "left": right
                            }),
                        squareTop = top &&
                        $("<div>")
                            .addClass("np-userguide-dim top")
                            .css({
                                "left": left,
                                "height": top,
                                "width": elem.outerWidth()
                            }),
                        squareBottom = (bottom - window.top.innerHeight) &&
                        $("<div>")
                            .addClass("np-userguide-dim")
                            .css({
                                "left": left,
                                "top": bottom,
                                "width": elem.outerWidth(),
                                "height": window.top.innerHeight - bottom
                            }));
                    scheduleRefresh(function () {
                        guidePanel.append(squareLeft || null, squareRight || null, squareTop || null, squareBottom || null);
                    });
                } else {
                    scheduleRefresh(function () {
                        guidePanel.append("<div class=\"np-userguide-dim full\">");
                    });
                };

                closePresent || (isLastStep && advancePresent) ||
                    scheduleRefresh(function () {
                        guidePanel.append($("<div>")
                            .addClass("close")
                            .append($("<div id=\"np-userguide-closebtn\"> &nbsp; " + "Close this walkthrough" + "</div>")
                                .addClass("fa fa-close button")
                                .on("click", close)));
                        var closeBtn = $("#np-userguide-closebtn", window.top.document);

                        lastClosePosition = lastClosePosition ||
                            {
                                top: window.top.innerHeight - closeBtn.outerHeight(true),
                                left: window.top.innerWidth - closeBtn.outerWidth(true),
                                bottom: window.top.innerHeight,
                                right: window.top.innerWidth,
                                pos: 3
                            };
                        closeBtn
                            .css("top", lastClosePosition.top)
                            .css("left", lastClosePosition.left);

                        showClose = function () {
                            var hl = null, ho, tt = null;
                            if (elem)
                                (ho = elem.offset(), hl = {
                                    top: ho.top,
                                    left: ho.left,
                                    bottom: ho.top + elem.outerHeight(true),
                                    right: ho.left + elem.outerWidth(true)
                                });
                            if (lastTooltip)
                                (tt = {
                                    top: lastTooltipRect.top,
                                    left: lastTooltipRect.left,
                                    bottom: lastTooltipRect.top + lastTooltip.outerHeight(true),
                                    right: lastTooltipRect.left + lastTooltip.outerWidth(true)
                                });
                            !tt && hl && (tt = hl);
                            !hl && tt && (hl = tt);

                            if (tt && hl) {
                                var ir = {
                                    top: Math.min(tt.top, hl.top),
                                    left: Math.min(tt.left, hl.left),
                                    bottom: Math.max(tt.bottom, hl.bottom),
                                    right: Math.max(tt.right, hl.right)
                                };

                                var tempRect = lastClosePosition, i = lastClosePosition.pos + 1;
                                var rects = {
                                    1: {
                                        top: 0,
                                        left: 0,
                                        bottom: closeBtn.outerHeight(true),
                                        right: closeBtn.outerWidth(true),
                                        pos: 1
                                    },
                                    2: {
                                        top: 0,
                                        left: window.top.innerWidth - closeBtn.outerWidth(true),
                                        bottom: closeBtn.outerHeight(true),
                                        right: window.top.innerWidth,
                                        pos: 2
                                    },
                                    3: {
                                        top: window.top.innerHeight - closeBtn.outerHeight(true),
                                        left: window.top.innerWidth - closeBtn.outerWidth(true),
                                        bottom: window.top.innerHeight,
                                        right: window.top.innerWidth,
                                        pos: 3
                                    },
                                    4: {
                                        top: window.top.innerHeight - closeBtn.outerHeight(true),
                                        left: 0,
                                        bottom: window.top.innerHeight,
                                        right: closeBtn.outerWidth(true),
                                        pos: 4
                                    }
                                };
                                while (i !== lastClosePosition.pos) {
                                    if (!overlap(ir, tempRect)) {
                                        lastClosePosition = tempRect;
                                        break;
                                    };
                                    i === 5 && (i = 1);
                                    tempRect = rects[i++];
                                };
                            };

                            closeBtn
                                .animateStyles()
                                .css("top", lastClosePosition.top)
                                .css("left", lastClosePosition.left);
                        };
                    });
                refresh();
            };
            function openOverlay(elem) {
                dim(elem.html);
                var e = elem instanceof n$.Controls.ButtonGrid.Grid ? elem.parent : elem;
                lastHighlight = highlight(e.html);
            };
            function htmlize(arr, buttons) {
                function checkActionsPresent(action) {
                    action = action || "advance";
                    action === "advance" && (advancePresent = true);
                    action === "close" && (closePresent = true);
                };

                typeof arr === "string" && (arr = [arr]);
                arr instanceof Array &&
                    (arr = arr.map(function (e) {
                        if (typeof e !== "string" || !e)
                            return void 0;
                        e = e.replace(/\[(.+?)\](?:\.(.+?\b(\(?.+\))?))?/g,
                            function (match, text, func) {
                                checkActionsPresent(func);
                                return "<input type=\"button\" np-userguide=\"" +
                                    (func || "advance") +
                                    "\" value=\"" +
                                    text +
                                    "\">";
                            });
                        return ("<p>" + e + "</p>");
                    }));
                var text = arr instanceof Array ? arr.join("") : "";
                if (buttons) {
                    !(buttons instanceof Array) && (buttons = [buttons]);
                    text += "<div class=\"buttonrow\">" +
                        buttons.map(function (b) {
                            if (typeof b !== "object" || !b)
                                return void 0;
                            checkActionsPresent(b.action);
                            return "<input type=\"button\" np-userguide=\"" +
                                (b.action || "advance") +
                                "\" value=\"" +
                                b.caption +
                                "\">";
                        })
                            .join("") +
                        "</h1>";
                };
                return text;
            };

            // Step logic
            function close() {
                running = false;
                hideLastStep();
                refresh();
                n$.Capabilities.Walkthrough.setWalkthroughCompleted(me.id, true);
                setTimeout(function () {
                    var called = false;
                    while (scheduledWalkthroughs.length) {
                        var guide = scheduledWalkthroughs.shift();
                        guide.guide.completed.then(completed => {
                            if (called)
                                return;

                            if (!completed) {
                                guide.guide.run(guide.root, true);
                                called = true;
                            }
                        });
                    };
                    n$.Focus.resume();
                });
                isEngineRunning = false;
            };

            function hideLastStep() {
                var lt = lastTooltip, lh = lastHighlight, lm = lastMessage;
                lastTooltip = null, lastHighlight = null, lastMessage = null;
                scheduleRefresh(function () {
                    lt && (lastTooltipRemove = setTimeout(function () { lt.subtleFadeOut().addClass("removing"); }));
                    lh && lh.remove();
                    $("div.np-userguide-dim, div.np-userguide > div.close", window.top.document).remove();
                    lm && (lastMessageRemove = setTimeout(function () { lm.zoomInFadeOut(); }));
                });
                lastEvents.forEach(function (e) {
                    e.element.off(e.event, e.handler);
                });
                closePresent = false;
                advancePresent = false;
            };

            function getActionFromButton() {
                var attr = (this.getAttribute("np-userguide") || "advance").replace(/\(([^\"].*?[^\"])\)/g, function (m, param) {
                    return "(\"" + param + "\")";
                });
                attr.match(/\(.*?\)/g) || (attr += "()");
                return attr;
            };

            var step = {
                highlight: function (searchRoot, tag) {
                    function getSearchRoot(s, target) {
                        if (!target || !target.source || target.source === "View")
                            return n$.UI.currentView.ui;
                        if (target.source === "Popup")
                            return n$.Popup.popups[n$.Popup.popups.length - 1].html;

                        // TODO: fallback, add more conditions as necessary
                        return s;
                    };
                    function complete(control) {
                        var subscriberDone;
                        function subscribe(adv) {
                            return function (c, source) {
                                if (subscriberDone)
                                    return;
                                var successful = (function () {
                                    source = source || c;
                                    if (source && adv.filter) {
                                        if (typeof adv.filter === "function") {
                                            if (!adv.filter(source))
                                                return false;
                                        } else {
                                            if (source instanceof n$.Controls.Button) {
                                                if (source.button.action.Type !== adv.filter)
                                                    return false;
                                            };
                                        }
                                    };
                                    subscriberDone = true;

                                    function doAdvance() {
                                        adv.step
                                            ? goto(adv.step)
                                            : advance();
                                    };

                                    adv.awaitCompletion && source instanceof n$.Controls.Button
                                        ? (function () {
                                            source._awaitWorkflowCompleted = function () {
                                                setTimeout(function () {
                                                    doAdvance();
                                                }, 300);
                                            };
                                        })()
                                        : doAdvance();
                                    return true;
                                })();
                                if (!successful) {
                                    // TODO: whatever?
                                };
                            };
                        };

                        var ctrl = $(control.eventSource || control), event;
                        if (tag.advance) {
                            var adv = tag.advance instanceof Array ? tag.advance.slice() : [tag.advance];
                            adv.forEach(function (a) {
                                var eventCtrl = ctrl;
                                if (a.eventTarget) {
                                    var ctrlTarget = ctrl.find(a.eventTarget);
                                    if (ctrlTarget.length)
                                        eventCtrl = ctrlTarget;
                                };

                                var handler = subscribe(a);
                                eventCtrl.on(
                                    event = typeof a === "string"
                                        ? a
                                        : (a.event || "unknown_event"),
                                    handler),
                                    lastEvents.push({
                                        element: eventCtrl,
                                        event: event,
                                        handler: handler
                                    });
                            });
                        };

                        if (tag.tooltip) {
                            openOverlay(control);
                            lastTooltip = showTooltip(control.html, htmlize(tag.tooltip, tag.buttons), tag.position);
                            lastTooltip
                                .find("input[type=button]")
                                .on("click",
                                    function () {
                                        eval(getActionFromButton.apply(this));
                                    });
                        };

                        control.html.focus();
                    };

                    if (getControl(getSearchRoot(searchRoot, tag.target), tag.target, complete))
                        warn("Control not found: " + JSON.stringify(tag.target));
                },
                message: function (ignore, tag) {
                    var msg = $("div.np-userguide-message", window.top.document);
                    msg.length && (clearTimeout(lastMessageRemove), msg.remove());
                    var div = $("<div class=\"np-userguide-message\">");
                    div.append(htmlize(tag.text, tag.buttons || n$.UserGuide.getDefaultButtons(isLastStep)));
                    dim();
                    guidePanel.append(div);
                    div
                        .showCenter()
                        .focus()
                        .slideUp()
                        .find("input[type=button]")
                        .on("click",
                            function () {
                                eval(getActionFromButton.apply(this));
                            });
                    lastMessage = div;
                }
            };

            root && root instanceof n$.View.BaseView && (root = root.ui);
            if (!me.standalone)
                if (!root || !(root instanceof n$.Controls.BaseControl))
                    return void warn("User Guide invoked with invalid 'root' parameter.");

            // Running
            showGuide();
            var nextStep = 0;
            running = true;
            function goto(label) {
                if (!label)
                    return;

                var l = label.toLowerCase();
                for (var i = 0; i < me.json.steps.length; i++) {
                    if (me.json.steps[i].label && me.json.steps[i].label.toLowerCase() === l) {
                        nextStep = i;
                        advance();
                        return;
                    };
                };
            };
            // TODO: create an advance object and have all "advance" methods on it, and invoke them on it, rather than having them as standalone functions
            function run(id) {
                close();
                n$.UserGuide.run(id);
            };
            function advance() {

                if (!running)
                    return;

                setTimeout(function () {
                    hideLastStep();
                    if (isLastStep) {
                        close();
                        return;
                    };

                    setTimeout(function () {
                        var currentStep = me.json.steps[nextStep++];
                        isLastStep = currentStep.lastStep || (nextStep >= me.json.steps.length);
                        advancePresent = currentStep.advance;
                        closePresent = !!currentStep.hideClose;
                        step[currentStep.action](root, currentStep, advance, goto);
                        setTimeout(function () {
                            typeof showClose === "function" && (showClose(), showClose = null);
                            lastScheduled = setTimeout(refresh);
                        });
                    });
                });
            };

            setTimeout(function () {
                n$.Focus.pause();
                advance();
            },
                300);

            this.stop = function () {
                close();
            };
            return void 0;
        };

        // Global functions
        (function () {
            var userGuides = [], autoForView = {}, availableInView = {}, currentView, oneGuide = [];

            n$.UserGuide.defaultButtons = {
                false: { caption: "Got it. Let's go on." },
                true: { caption: "Great, let's go back to NP Retail." }
            };
            n$.UserGuide.getDefaultButtons = function (lastStep) {
                return n$.UserGuide.defaultButtons[!!lastStep];
            };

            n$.UserGuide.register = function (guide) {
                if (!guide || guide.disabled)
                    return;

                !(guide instanceof n$.UserGuide) && (typeof guide === "object") && (guide = new n$.UserGuide(guide));

                userGuides.push(guide);
                guide.json.trigger && n$.Capabilities.Walkthrough.registerWalkthrough(guide.id, guide.name, guide.description);
            };
            n$.UserGuide.run = function (id) {
                var guide = userGuides.find(function (g) {
                    return g.id === id;
                });
                guide && guide.run(currentView, true);
            };
            Object.defineProperty(n$.UserGuide, "isRunning", {
                get: function () {
                    return isEngineRunning;
                }
            });

            n$.UserGuide.capability = {
                registerWalkthrough: function (guide) {
                    n$.Capabilities.Walkthrough.ifSupported(() => {
                        try {
                            n$.UserGuide.register(guide);
                        } catch (e) {
                            n$.Debug.Framework.warning(
                                "A walkthrough registration attempt by Major Tom has just failed. Complete JSON content follows: " +
                                guide);
                        };
                    })
                },
                showWalkthroughs: function () {
                    n$.Capabilities.Walkthrough.ifSupported(() => {
                        var promise = oneGuide.length === 1 && !oneGuide[0].isRunning
                            ? oneGuide[0].completed
                            : Promise.resolve(true);
                        promise.then(completed => {
                            if (!completed) {
                                oneGuide[0].run(currentView, true);
                                return;
                            }

                            var bottom, walkthroughs, container, buttons;
                            copyRequiredStylesToParentDocument();
                            $("body", window.top.document).append(
                                bottom = $("<div>").addClass("np-userguide-walkthroughsbottom").css("opacity", 0),
                                walkthroughs = $("<div>").addClass("np-userguide-walkthroughs np-fadedout"));
                            walkthroughs.append($("<div>").addClass("titlebox").append($("<div>").addClass("title").text("Available walkthroughs")));
                            walkthroughs.append(container = $("<div>").addClass("container"));
                            walkthroughs.append(buttons = $("<div>").addClass("buttons"));

                            function hideWalkthroughs() {
                                bottom.fadeOutZoomSmall();
                                walkthroughs.fadeOutZoomSmall();
                            };

                            buttons.append($("<input>").attr({
                                type: "button",
                                value: "Close"
                            }).on("click", hideWalkthroughs));
                            bottom.on("click", hideWalkthroughs);

                            var scheduledUpdates = [], lastGuide;
                            userGuides.forEach(function (w) {
                                var item, name, done, icon;
                                container
                                    .append(item = $("<div>").addClass("item")
                                        .append($("<div>").addClass("object")
                                            .append(name = $("<div>").addClass("name").text(w.name))
                                            .append($("<div>").addClass("description").text(w.description)))
                                        .append(done = $("<div>").addClass("np-walkthrough-done")
                                            .append(icon = $("<div>").addClass("icon fa fa-question"))));

                                lastGuide = item;
                                scheduledUpdates.push(function () {
                                    function setDefaultClasses() {
                                        done.attr("class",
                                            "np-walkthrough-done " +
                                            (autoForView[w.id] ? constants.styles.auto : constants.styles.available));
                                        icon.attr("class", "icon fa " +
                                            (autoForView[w.id] ? constants.icons.auto : constants.icons.available));
                                    };

                                    if (!availableInView[w.id]) {
                                        item.attr("class", "item disabled");
                                    } else {
                                        w.isRunning || item.addClass("active");
                                        item.on("click",
                                            function () {
                                                $(this).fadeOutZoom();
                                                setTimeout(function () {
                                                    hideWalkthroughs();
                                                    setTimeout(function () {
                                                        w.isRunning
                                                            ? w.stop()
                                                            : w.run(currentView, true);
                                                    }, 250);
                                                }, 50);
                                            });
                                    };
                                    autoForView[w.id] &&
                                        name.prepend($("<span>").addClass("fa fa-magic").text(" "));
                                    if (w.isRunning) {
                                        done.attr("class", "np-walkthrough-done running");
                                        icon.attr("class", "icon fa fa-gear");
                                    } else {
                                        w.completed.then(completed => {
                                            if (completed) {
                                                done.attr("class", "np-walkthrough-done completed");
                                                icon.attr("class", "icon fa fa-check");
                                                done.on("click",
                                                    function (e) {
                                                        n$.Capabilities.Walkthrough.setWalkthroughCompleted(w.id, false);
                                                        done.fadeOutZoom(405, true);
                                                        setDefaultClasses();
                                                        e.stopPropagation();
                                                        done.off("click");
                                                    });
                                            } else {
                                                setDefaultClasses();
                                            };
                                        });
                                    };
                                    item.addClass("show");
                                });
                            });

                            var lastOffset = lastGuide.offset().left, lastRight = lastOffset + lastGuide.outerWidth();
                            lastRight > window.top.innerWidth - 40 && (lastRight = window.top.innerWidth - 40);
                            walkthroughs.css({
                                left: window.top.innerWidth - lastRight - 40,
                                width: lastRight + 40
                            });

                            setTimeout(function () {
                                walkthroughs.addClass("np-slide left");
                                setTimeout(function () {
                                    bottom.animateStyles().css("opacity", 1);
                                    walkthroughs.addClass("np-animate-400 np-slide done np-fadein");
                                    walkthroughs.focus();
                                    setTimeout(function () {
                                        var i = 1;
                                        scheduledUpdates.forEach(function (f) { setTimeout(f, i++ * 50); });
                                    },
                                        50);
                                },
                                    25);
                            });
                        });
                    });
                }
            };

            function allTriggersAuto(g) {
                var auto = true;
                g.trigger instanceof Array
                    ? g.trigger.forEach(function (t) {
                        auto &= t.auto;
                    })
                    : auto = typeof g.trigger === "object" && g.trigger.auto;
                return auto;
            };

            function processViewActivation(view) {
                var executed, indicator = $(".statusbar #walkthrough").empty(), available = [];
                autoForView = {};
                availableInView = {};
                oneGuide = [];

                userGuides.forEach(function (g) {
                    var evaluation = g.evaluateOnView(view);
                    g.completed.then(completed => {
                        var runThis = !executed && evaluation.auto && !completed;
                        evaluation.ok &&
                            (n$.Capabilities.Walkthrough.indicateWalkthroughAvailable(g.id),
                                g.run(view, runThis, executed = executed || runThis),
                                available.push(g));
                        availableInView[g.id] = evaluation.ok || evaluation.available;
                        autoForView[g.id] = allTriggersAuto(g.json) || evaluation.auto;
                        (evaluation.ok || evaluation.available) && oneGuide.push(g);
                    });
                });
                if (userGuides.length) {
                    indicator.append($("<img src=\"" +
                        m$.GetImageResource("lightbulb_" + (available.length ? "on" : "off")) +
                        "\">")
                        .on("click",
                            function () {
                                n$.UserGuide.capability.showWalkthroughs();
                            }));
                };
            };

            $(n$.UI)
                .on("viewActivated",
                    function (j, view) {
                        n$.Capabilities.Walkthrough.ifSupported(() => {
                            currentView = view;
                            setTimeout(function () {
                                processViewActivation(view);
                            });
                        });
                    });
        })();
    },
    0).depend("UI", "Capabilities");
;
n$.addModule("Version",
    function () {

        n$.Version = {
            version: "5.40.2209.54",
            product: "NP Retail",
            description: "NP Retail \"Transcendence\" JavaScript Framework"
        };

        n$.ready(function () {
            n$.Capabilities.Events.invokeFrontEndEvent("announceFrameworkVersion", { version: n$.Version.version });

            var countClicked = 0;
            var timeout = false;

            document.addEventListener("click", function () {
                if (++countClicked === 13)
                    n$.Capabilities.Walkthrough.ifSupported(supported =>
                        n$.Popup.dialog({
                            caption: "Version: " + n$.Version.version + "\nNavigator: " + navigator.userAgent + "\nExternal object: " + n$.Capabilities.Walkthrough.external.name + "\nWalkthrough supported: " + supported,
                            title: "Version information",
                            style: n$.Enums.DialogStyle.Error
                        }));

                if (timeout)
                    return;

                timeout = true;
                setTimeout(function () {
                    countClicked = 0;
                    timeout = false;
                }, 2000);
            }, true);
        });
    },
    0);

/*

Release notes 5.40.2209.54 - released on January 19, 2021
- Fixes issue with model UI incorrectly completing the initialization.


Release notes 5.40.2154.53 - released on December 2, 2020
- Fixes issue with bottom padding in tablet client on BC170


Release notes 5.40.2096.52 - released on September 28, 2020
- Fixes issue with username shown in input boxes (case #419626)
- Delayed promise rejection on unsupported capability functions, to avoid unnecessary break-on-unhandled-error during initialization.


Release notes 5.40.2045.51 - released on August 8, 2020
- Fixes issue with product name incorrectly reported (case #391333)
- Fixes issue with incorrectly reject promises on unsupported stargate scenarios (reported through case #359062)
- Fixes issue with BC16 product bar being present in desktop version
- Fixes issue with iOS keyboard focus in mPos


Release notes 5.40.1795.50 - released on December 1, 2019
- Fixes issue with iOS 13 incorrectly reporting browser user agent on iPads. (#380295)


Release notes 5.40.1789.49 - released on November 19, 2019
- Provided Business Central 140 layout fix for phone clients (#376820)
- Removed object and array spread syntax in several Workflows 2.0 functions to improve compatibility with Edge browser.
- Included an additional check for window.webkit on iOS to avoid runtime errors with running plain browser on iOS or simulating iOS in Chrome.
- Removed landscape/portrait orientation suggestion messages during mobile device (MPOS) sessions.


Release notes 5.40.1767.48 - released on November 4, 2019
- Dropped support for workflow 2.0 login workflow, due to problems reported after release of 5.40.1767.47.


Release notes 5.40.1767.47 - released on November 4, 2019
- iOS capabilities feature is now turned on.
- Support for workflow sequences in Workflows 2.0 (#362777)
- Support for workflow 2.0 login workflow (including sequences) (#362777)


Release notes 5.40.1659.46 - released on July 19 2019:
- POS Administrative Templates feature implemented.


Release notes 5.40.1650.45 - released on July 9 2019:
- Improved behavior with custom methods that don't have back-end support (yet). For example, this takes care of the green screen during
  invocations of the Require method in databases that do not have Workflows 2.0 feature implemented yet. This will enable better control
  of backwards compatibility in the future. This feature requires NPR 5.50 to fully work (without NPR 5.50 unsupported methods fail just
  as they used to in previous versions).
- Entire JavaScript-to-app communication stack has been refactored and is now based on promises instead of synchronous invocations. This
  makes Transcendence ready for integration with any platform regardless of the way how that platform integrates. For example:
  * IE: integrates on synchronous methods on window.external object which support return values. They are now wrapped in promises.
  * Chromium: depending on configuration it can support:
    ** Synchronous communication: equal to IE, except it uses objects published from the wrapper app, rather than windows.external
    ** Asynchronous communication: similar to synchronous, except that all method invocations returns promises, so no wrapping is needed
  * iOS: integrates on method/event pair. All methods are invoked asynchronously, and cannot return values. They return promises that are
         resolved when iOS app invokes a special response event created before each method invocation, specifically for that method.
  * Android: integrates on synchronous methods on window.top.AndroidPOS object published by the Android app.
- Transcendence now supports both Synchronous and Asynchronous communication with Major Tom, and Major Tom chooses which integration to use.
- Workflows 2.0 now support async/await syntax which allows automatic completion of workflows upon reaching the end of the workflow code.
  It's also possible to manually control the finalization (completion or failing) of workflows by invoking workflow.keepAlive() which then
  indicates to the Workflow engine that the workflow should not be automatically completed, but will be completed by invoking either
  workflow.complete() or workflow.fail(). Finally, it's possible to return a value from an automatically completed workflow by using return
  statement. In short, "return someValue;" has the same effect as "workflow.complete(someValue);".
- Fixing the bug with the pause workflow crash (#344387)
- Disabled automatic walkthroughs for sales view (#324472).
- Android integration prepared so that Android app can communicate with Transcendence.
- Substantial refactoring for iOS external interface.
- Enables showing NPR version number in the status bar. (#361184)


Release notes 5.40.1599.44 - released on May 20 2019:
- Fixed issues during browser navigation to the SignOut.aspx page during shutdown of Major Tom. (#344246)


Release notes 5.40.1594.43 - released on May 15 2019:
- Support for Web client (Default.aspx) POS Page in Business Central (#353737).


Release notes 5.40.1572.42 - released on April 23 2019:

- Introducing method event filters functionality that allows each event to have a filter function that processes the default data before the data
  is passed to the back end. This allows, for example, feeding in context information for TextEnter event if that information hasn't been provided
  by the hosting app (like iOS app after scanning).
- Fixing layout issues with standard NAV pages (#351314)
- Pressing Enter closes the POS input dialogs (those with a textbox allowing users to enter information), such as a text input dialog, or any numpad
  dialog (#352733)


Release notes 5.40.1567.41 - released on April 18 2019:

- Fixes issue with workflow actionId from outer scope being incorrectly captured in a closure, instead of being defined within it, which causes
  workflow callback synchronization issues and green screens.
- Fixes issue with fast scanning resulting in scrambled text, and incorrect EAN codes being passed to the back end.
- Pressing Enter does not close dialogs anymore. Case #346148.
- Clicking 13 times on empty space within 2 seconds shows the version dialog.
- Initial support for Android app.
- Fixing layout issue with grid overflow when too many lines are inserted.
- Introducing NAV dialog keyboard handling feature. JavaScript framework now handles keyboard navigation and closing of NAV standard dialogs (#351471).


Release notes 5.40.1449.39 - released on December 21 2018:

- Implemented new behavior in Data Caption control so that entire data caption row can be skipped if the field it
  is bound to contains a specific value (typically empty string or 0). This allows configuring flexible info boxes
  that show specific information only as needed. (#329992)
- Fixes issue with top navigation bar showing in POS screens in Business Central. (#340613)


Release notes 5.40.1425.38 - released on November 27 2018:

- Fixed the issue with salesperson code not being cleared in the login view after an incorrect attempt (#325339)
- Introduced testing entry points where front-end tests can be employed to simulate user interactions. This is an internal Transcendence feature.
- Support for front-end themes implemented.
- Removed redundant event logs from FrontEndAsync requests (each request previously logged its own log message, right after the framework logged
  a generic log entry - those specific log calls are now removed).
- Allows showing time in status bar.


Release notes 5.40.1400.37 - released on November 2 2018:

- Fixes the issue with data caption box not showing wrapped text for long item descriptions (#329992).
- Fixes the issue with Stargate not properly focusing UI after finishing.
- Fixes the issue with keyboard input in numpad dialogs (#327465).
- Removed the portrait/landscape warning message on non-mobile devices.
- Introduced "style" block to JSON model, it's now possible to set custom styles on any of the elements.
- Fixes a bug with login view doing hardcoded binding of event subscribers to screen elements which may not be present in the view.


Release notes 5.40.1362.36 - released on September 25 2018:

- Introduces the support for "Kiosk Unlock Enabled" feature from the back end (#323728).
- Implemented support for Chromium-based version of Major Tom.


Release notes 5.40.1315.35 - released on August 9 2018:

- Fixes the issue with disproportional size of popup dialog at lower resolutions. (case 324400)
- Fixes the issue with double-modal dialog under certain circumstances (case 324476), which was proven to be caused by changes in 5.40.1314.34.
  All of the setTimeout improvements from 5.40.1314.34 were rolled back. This will cancel out any performance benefits gained in the previous
  release, and will put performance back to where it was in 5.40.1281.33.
- Removes the "busy dots" fix, which now again prevents action buttons to be pressed while the back end is processing a request. This will be put
  back once after Workflows 2.0 feature is introduced using promises JavaScript features on Chromium/Edge. While we stay on Internet Explorer,
  this feature won't be reintroduced.
- Introduces the toast message functionality which can be used from workflows. This feature will be developed further in the following releases.


Release notes 5.40.1314.34 - released on August 8 2018:

- Fixes the issue with popup objects not being accessible from JavaScript when called from iOS app.
- Fixes the issue with calendar control being too big and overlapping with lines grid in Calendar dialog on small resolutions.
- Updated the workflow, data-binding, and eventing logic so that several of setTimeout calls have been removed. This was done to improve
  performance on code execution, and to reduce unnecessary wait times during execution of POS actions.
- "Busy Dots" from standard NAV are only shown during execution of actions marked with "Blocking UI". For all other actions that do not
  block UI, "busy dots" will not show and the user will be able to interact with the application while the back-end is busy processing
  previous actions. Any actions clicked during this time will be queued for later execution.
- Dimming timeout during execution of long-running POS actions has been increased from 1 second to 2.5 seconds. This means that any action
  even if marked as non-UI-blocking will dim the screen after 2.5 seconds of execution. This prevents undesired results that could occur
  if users attempted to queue too many actions during execution of a previous action.
- Subtotal in grids (in Sale and Payment views) are shown in red if the total amount is less than zero. This is to help the salespeople
  notice when money needs to be returned to customers.
- Adding support for trace information coming from the back-end.


Release notes 5.40.1281.33 - released on July 6 2018:

- Modifies the logging behavior of WorkflowCallCompleted request to enable easy parsing of Major Tom logs for the purpose of performance
  analysis. The logged content includes the duration of execution broken down by execution stages, workflow information (id, name,
  step, parameter values) as well as any error information if there was a back-end error.
- Fixes the issue with invoking button enable behavior custom JavaScript function in situations where there were no records in a grid,
  or when the first line was being inserted. This issue has caused browser console to log errors.


Release notes 5.40.1280.32 - released on July 5 2018:

- Allows specifying column captions and overriding default column captions in grid views by using the "columns" property in the
  view JSON definition.
- Enhances the functionality of custom JavaScript code for controlling action enabled state, by allowing direct access to currently
  selected data row from the bound data source.


Release notes 5.40.1277.31 - released on July 2 2018:

- Allows specifying column widhts and overriding default column widths in all grid views, by using the "columns" property in the
  view JSON definition.
- Allows custom-built HTML and JavaScript in protocol model UI to invoke back-end functionality.
- Fixes issue with filtering of menu buttons by salesperson and register, that resulted in missing buttons when registers or
  salespersons were changed back and forth during the same NAV session, with register/salesperson filtering active on buttons.


Release notes 5.40.1273.30 - released on June 28 2018:

- Fixes a problem with showing calendar+grid dialog where grid showed default columns from the data source, rather than explicitly
  declared columns from the calendar invocation code (case #305061)
- Fixes issue with column widths being incorrectly assigned in a grid.


Release notes 5.40.1272.29 - released on June 27 2018:

- Fixes a problem with excluding Content info from debug log, which made it impossible to measure performance of workflow actions.
  (case #315838)


Release notes 5.40.1271.28 - released on June 26 2018:

- Fixes a bug with changing views that caused grid columns to get out of sync.


Release notes 5.40.1259.27 - released on June 14 2018:

- Logs extra context information for all Stargate calls if they are present inside of the device request message sent from NAV.
- Fixes issue with payment view toggle buttons when defined in the view JSON file.
- Introduces functionality for calendar grid.
- Allows using "calendar" function in workflow JavaScript code.
- Allows specifying "columns" array for grid controls in JSON view definition.
- Implemented secure method workflow which allows securing buttons with a secure method, such as client-side password validation,
  server-side password validation, or similar. It is also open for future or custom validation methods so it can be easily extended
  to support other validation types, such as camera, fingerprint, etc.


Release notes 5.40.1239.26 - released May 25 2018:

- Allows fallback functionality for defining mobile and desktop views, as well as binding explicit JSON view structures to both desktop and mobile for the same register at once.


Release notes 5.40.1222.25 - released May 8 2018:

- Fixes the problem with button caption cropping in Transcendence.
- Fixes the problem with passing custom JSON to mobile views and failure to properly bind onclick events to menu buttons.
- Sends the version information to Major Tom for the support purposes.


Release notes 5.40.1197.24 - released April 13 2018:

- Provides a fallback path for interference-free communication between Stargate AppGateway protocol and C/AL. This is a service fix to avoid issues experienced at RetailTeam
  customer who was working on a very old NP release (5.25) that used older approach (full Standard framework instead of Proxy framework) for Stargate AppGateway. This fix is
  merely to provide future backwards compatibility ahead of Major Tom service release.


Release notes 5.40.1193.23 - released April 9 2018:

- Updated default payment view to change the default captions for info-box fields: Sale (LCY), Paid, Balance.
- It is now possible to register custom modules in Transcendence, to invoke any custom front-end functionality that can then talk to custom back-end functionality encapsulated in
  codeunits in C/AL (e.g. Geolocation)
- Info-box captions without translation provided by the back end are indicated visually with lighter gray color, dotted underline, and "No translation provided" tooltip on hover.
- Improved features for WYSIWYG editor:
    - saving, undo, deleting buttons, looking up items, customers, actions, and parameters.
    - grouping properties into sections
    - editing submenus
    - editing popup menus
    - editing additional button properties (position, tooltip, image URL, caption position)
    - drag and drop positioning of buttons
    - lookup for menus for popup buttons
    - colums x rows dimensions for popup buttons
- Implemented support for asynchronous Stargate invocations.
- Setting size of font in infobox and status bar is now possible through view JSON configuration.
- Fixing layout issue with Edge and Firefox that caused lines grid to expand indefinitely.
- Fixing focusing issue with protocol model UI, where EAN box would retain focus, instead of yielding it to the protocol UI.
- Input filters commands (e.g. WYSIWYG editor in the "> " filter) can now be invoked with click on the command name, rather than by only pressing enter on keyboard.
- Changed behavior of popup dialog showing and dimming to support popup menu WYSIWYG editing. This may require testing of popup dialogs especially in the context of changing views.
- Debug tracing feature is implemented to log debug trace events as reported by the back-end. This enabled performance profiling of the back end, which cna help identify performance issues.
- RequestMethod method implemented to allow invoking custom JavaScript from C/AL and creating custom modules in JavaScript from C/AL
- Fixed phone layout issues
- Fixed issue with focus not properly going back to "Item no." ("EAN" box) field after some workflows, especially those that involved NAV UI (popups, lookups, etc.)

*/

;
/*
    Reference:
*/
(function () {
    return {
        name: "Walkthrough name",                       // Shown in Major Tom and when "bulb" is clicked
        id: "00000000-0000-0000-0000-000000000000",     // Walkthrough GUID (must be unique!), Major Tom remembers walkthrough history based on this
        description: "Walkthrough description",         // Optional. Shown when more info about the walkthrough is requested
        trigger: {                                      // Can also be array of objects. Defines what triggers the walkthrough to run or conditions for it to be present.
            view: n$.Enums.ViewType["type"],            // Defines in which view types the walkthrough is present
            auto: true // or false                      // Defines whether the walkthrough runs automatically or it has to be invoked manually
        },
        steps: [                                        // Defines steps to execute
            {
                label: "label",                         // Label for the purpose of jumping between steps
                action: "step_action",                  // Defines the action to run
                                                        // - message: shows a message on screen
                                                        // - highlight: highlights an element on screen and shows instructions in a tooltip

                // message action elements
                text: [                                 // It does not have to be array of strings, it can be a single string if there is only one line to show.
                    "Line 1",                           // You can use HTML tags
                    "Line 2 [Inline button].action"     // You can include an inline button with [Button Caption].action (where .action is optional, and ommitting it equals "advance")
                ],
                buttons: [                              // Defines buttons to show, may be non-array (just {} object). Optional. If ommitted, a default button with advance action is shown.
                    {
                        caption: "Caption",             // Button caption
                        action: "button_action"         // Action on click, optional. If ommitted, "advance" is assumed.
                                                        // - advance: advances the walkthrough to the next step
                                                        // - close: closes the walkthrough
                                                        // - goto(label): goes to a specific step by label
                    }
                ],

                // highlight action  elements
                target: {                               // Defines the element to highlight
                    
                }
            }
        ]
    };
});

n$.addModule("Walkthroughs",
        function() {
            var temp = {};

            n$.UserGuide.initializeWalkthroughs = function () {
                
                // What's new in framework 5.32.943.2
                n$.UserGuide.register({
                    "id": "cd5fffb6-a6cc-4cd5-b977-688f1010ebf3",
                    "standalone": true,
                    "auto":  false,
                    "name": "What's New in POS 5.32.943.2",
                    "description": "Displays the informtation about the new features released in the last version of JavaScript framework",
                    "steps": [
                        {
                            "action": "message",
                            "text": [
                                "<h1>Welcome to POS Framework version 5.32.943.2</h1>",
                                "The POS Framework has just been updated and these are the important news:",
                                "<ul>",
                                "<li>Popup menus correctly show in-place submenus with correct behavior of the \"Back\" button</li>",
                                "<li>Changed the way how standard Microsoft Dynamics NAV default view is customized. This may cause issues unless Major Tom or NP Retail app are updated as well.</li>",
                                "</ul>",
                                "That's all. Good luck, and happy selling."
                            ]
                        }
                    ]
                }),

                // Welcome walkthrough
                n$.UserGuide.register({
                    name: "Welcome (Login)",
                    id: "b01ab839-8825-4d88-a720-6291819d1a50",
                    description: "Demonstrates how to sign-in into a demo database.",
                    trigger: {
                        view: "Login",
                        auto: true
                    },
                    steps: [
                        {
                            action: "message",
                            text: [
                                "<h1>Welcome!</h1>",
                                "Welcome to NP Retail! It seems to be your first time here, so let us help you get the most ouf of it.",
                                "This walkthrough will show you how to sign in into your new shiny POS application."
                            ],
                            buttons: [
                                {
                                    caption: "Thanks, but I don't really need help.",
                                    action: "goto(showpassword)"
                                },
                                {
                                    caption: "Sounds great, please walk me through.",
                                    action: "goto(start)"
                                }
                            ],
                            hideClose: true
                        },
                        {
                            label: "showpassword",
                            action: "message",
                            text: [
                                "<h1>Let's get started, then...</h1>",
                                "Fine, you are the boss. Just remember, the salesperson code in this demo is \"1\".",
                                n$.Framework.Environment.Mobile() ||
                                "(And, by the way, we won't be showing this walkthrough again. If you want, you can always invoke it from the main menu.)"
                            ],
                            lastStep: true
                        },
                        {
                            label: "start",
                            action: "highlight",
                            target: {
                                type: "Button",
                                value: "1"
                            },
                            tooltip: [
                                "Before you begin, you must sign in with your salesperson code.",
                                "Your salesperson code is your unique password/pin that both identifies you and protects you. In this demo database, the password is simple. You can change it later if you want.",
                                "Let's get started. Click \"1\"..."
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                value: n$.Enums.ButtonType.Ok
                            },
                            tooltip: [
                                "... and then, click \"OK\" to complete the sign in."
                            ],
                            position: "left", // right, under, over
                            advance: "clicked"
                        },
                        {
                            action: "message",
                            text: [
                                "<h1>Congratulations!</h1>",
                                "You have successfully signed in, and you are now in the sale screen.",
                                n$.Framework.Environment.Mobile()
                                ? undefined
                                : "Would you like to learn more about the sale screen?"
                            ],
                            buttons: [
                                n$.Framework.Environment.Mobile()
                                ? {
                                    caption: "Great, let's get started."
                                }
                                : undefined,
                                n$.Framework.Environment.Mobile()
                                ? undefined
                                : {
                                    caption: "Yes, that would be fantastic",
                                    action: "run(451579e0-4fe7-4d67-869d-d0a6e3649310)"
                                },
                                n$.Framework.Environment.Mobile()
                                ? undefined
                                : {
                                    caption: "No, I can handle it on my own"
                                }
                            ]
                        },
                        n$.Framework.Environment.Mobile() ||
                        {
                            action: "message",
                            text: [
                                "<h1>All set, then.</h1>",
                                "If you will need more help with anything else, click the small light-bulb icon in the status bar. We'll be happy to jump in and walk you through another task.",
                                "Until then, enjoy NP Retail!"
                            ]
                        }
                    ]
                });

                // Lookup items
                n$.UserGuide.register({
                    name: "Lookup Items",
                    id: "3715283b-a79b-4d66-b919-7756a1adcda9",
                    description: "This tutorial explains how to use the item lookup feature to quickly find items in the database.",
                    disabled: true,
                    trigger: {
                        view: n$.Enums.ViewType.Sale,
                        auto: false
                    },
                    steps: [
                        {
                            action: "message",
                            text: [
                                "<h1>Welcome to the Lookup items tutorial</h1>",
                                "Lookup feature allows you to locate items in the database, and then do operations such as adding them to the current transaction, checking their inventory levels, or even editing item information.",
                                "In this tutorial, you'll learn how to use the Lookup feature to sell an item and to check how its inventory level changes."
                            ],
                            buttons: [
                                {
                                    caption: "Great, let's get started."
                                }
                            ]
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                caption: "Lookup"
                            },
                            tooltip: [
                                "When in the Sale screen, click \"Lookup\""
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "html",
                                context: "window.top.document",
                                selector: "div.ms-nav-searchFilter input[type=\"search\"]"
                            },
                            tooltip: [
                                "In the search box, enter \"Festina\""
                            ],
                            advance: {
                                event: "input",
                                filter: function(input) {
                                    var result = input.target.value.toLowerCase() === "festina";
                                    result && input.target.blur();
                                    return result;
                                }
                            }
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "html",
                                context: "window.top.document",
                                selector: "table.ms-nav-grid tbody tr:nth-child(3) > td:nth-child(15)"
                            },
                            tooltip: [
                                "Here you can see the inventory level of the Festina watches. ",
                                "Note the inventory of the item: ”Festina Multi Function Men”",
                                "[Ok, I got it].goto(after_inventory)"
                            ],
                            advance: [
                                {
                                    event: "click",
                                    eventTarget: "a",
                                    filter: function(e) {
                                        return e.target.tagName.toUpperCase() === "A";
                                    },
                                    step: "inventory_opened"
                                },
                                {
                                    event: "click",
                                    filter: function (e) {
                                        return e.target.tagName.toUpperCase() === "TD";
                                    },
                                    step: "item_inserted"
                                }
                            ]
                        },
                        {
                            label: "inventory_opened",
                            action: "highlight",
                            target: {
                                type: "html",
                                context: "window.top.document",
                                selector: ".spa-container .spa-view:last-child .ms-nav-navigation > .ms-nav-back-container"
                            },
                            tooltip: [
                                "You are in the Item Ledger Entries view, this may be too much information for now, so simply go back by clicking here"
                            ],
                            advance: {
                                event: "click",
                                eventTarget: "a.ms-nav-back"
                            }
                        },
                        {
                            label: "after_inventory",
                            action: "highlight",
                            target: {
                                type: "html",
                                context: "window.top.document",
                                selector: "table.ms-nav-grid tbody tr:nth-child(3) > td:nth-child(4)"
                            },
                            tooltip: [
                                "Let's make a sale and see how it affects the inventory levels.",
                                "Click on the item name."
                            ],
                            advance: {
                                event: "click"
                            }
                        },
                        {
                            label: "item_inserted",
                            action: "highlight",
                            target: {
                                type: "gridLine",
                                selector: "newLine"
                            },
                            tooltip: [
                                "You have now added the Festina watch as a sales line.",
                                "[Ok, got it]"
                            ],
                            advance: "click"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                action: {
                                    type: "Workflow",
                                    workflow: "CHANGE_VIEW",
                                    parameter: {
                                        name: "ViewType",
                                        value: 2
                                    }
                                }
                            },
                            tooltip: [
                                "To pay for the item, click ”Go to Payment”."
                            ],
                            advance: {
                                event: "clicked",
                                awaitCompletion: true
                            }
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                action: {
                                    type: "Payment",
                                    code: "K"
                                }
                            },
                            tooltip: [
                                "Pay by clicking ”Cash Payment”."
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Popup",
                                subtype: "Numpad"
                            },
                            tooltip: [
                                "To confirm the payment amount, click the OK button or simply press Enter.",
                                "[I get it].goto(highlight_ok)"
                            ],
                            advance: [
                                {
                                    event: "valueChanged",
                                    step: "value_changed"
                                },
                                {
                                    event: "closed",
                                    step: "complete_payment"
                                }
                            ]
                        },
                        {
                            label: "value_changed",
                            action: "highlight",
                            target: {
                                type: "TextBox",
                                source: "Popup"
                            },
                            tooltip: [
                                "Changing the amount is perfectly okay, but this tutorial was designed to lead you through the simple process.",
                                "You will be able to complete this transaction, but to see what we intended to shouw you, please restart this tutorial, and then don't change the amount at this step.",
                                "[Let's complete this transaction]"
                            ]
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                value: n$.Enums.ButtonType.Ok,
                                source: "Popup"
                            },
                            tooltip: [
                                "Click OK to confirm the amount in this dialog."
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "message",
                            text: [
                                "<h1>That's it for now</h1>",
                                "You have changed the payment amount. This is a perfectly legal thing to do, but this tutorial wanted to show something else.",
                                "You may want to complete the payment on your own, or you may try to run this tutorial again to see how the inventory of the item was affected after your sale transaction was completed.",
                            ],
                            buttons: [
                                {
                                    caption: "Let's go back to NP Retail",
                                    action: "close"
                                }
                            ]
                        },
                        {
                            label: "complete_payment",
                            action: "message",
                            text: [
                                "<h1>Congratulations</h1>",
                                "You have just completed your sale, and learned how to use the Lookup feature.",
                                "You can now go back to the Sale screen, click the lookup button again, and search for the same item to see how it's inventory level was affected by your last transaction."
                            ]
                        }
                    ]
                });

                // Demo sales workflow
                n$.UserGuide.register({
                    name: "Welcome (Sale)",
                    id: "451579e0-4fe7-4d67-869d-d0a6e3649310",
                    description: "Explains the functionality of the sale screen.",
                    trigger: {
                        view: n$.Enums.ViewType.Sale,
                        auto: false
                    },
                    steps: [
                        {
                            action: "message",
                            text: [
                                "<h1>Meet the \"Sale\" view...</h1>",
                                "This is the \"Sale\" view. This is where you spend most of time, entering items, changing quantities, entering discounts, in short: making sure your customer gets what they want.",
                                "Let's first see what the sale screen contains."
                            ]
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "ButtonGrid.Grid"
                            },
                            tooltip: [
                                "This is the items menu. Here, you select which items you want to add to the sale. Some buttons insert items, while some may open a submenu.",
                                "If you don't like how this menu is structured, don't worry - you'll be able to rearrange it any way you want.",
                                "Go on, try to insert an item into this sale."
                            ],
                            advance: {
                                event: "clicked",
                                filter: "Item"
                            }
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "ButtonGrid.Grid"
                            },
                            tooltip: [
                                "Good job! Now, add one more item."
                            ],
                            advance: {
                                event: "clicked",
                                filter: "Item"
                            }
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Grid"
                            },
                            tooltip: [
                                "There. Your sale now contains two item lines. The item lines are presented in this grid.",
                                "Try selecting a different line."
                            ],
                            advance: "selected"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "DataCaptionBox"
                            },
                            tooltip: [
                                "When you select a line, the focus changes. This info box automatically updates to contain additional information about the lines",
                                "Here, you always see the information about the current line. But there are more things you can do with the current line..."
                            ]
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Button",
                                caption: "Quantity"
                            },
                            tooltip: [
                                "For example, you can click \"Quantity\" to increase the quantity of the line.",
                                "Go on, try it!"
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "highlight",
                            target: {
                                type: "Popup",
                                subtype: "Numpad"
                            },
                            tooltip: [
                                "This is the quantity numpad. We frequently use this kind of a dialog when we need you to enter a number. ",
                                "Try entering " +
                                (temp.tempNumpadValue = Math.floor(Math.random() * 10) + 10) +
                                " by clicking the numpad buttons."
                            ],
                            advance: [
                                {
                                    event: "valueChanged",
                                    filter: function(numpad) {
                                        return numpad.value === temp.tempNumpadValue;
                                    },
                                    step: "numpadOK"
                                },
                                {
                                    event: "closed",
                                    step: "notFollowingInstructions"
                                }
                            ]
                        },
                        {
                            label: "notFollowingInstructions",
                            action: "message",
                            text: [
                                "<h1>Hey, that wasn't " + temp.tempNumpadValue + "!</h1>",
                                "You thought we wouldn't notice? Well, quantity, schmantity. This is a demo, anyawy, so we don't mind. Just make sure to always enter the correct quantity when a customer is in front of you."
                            ],
                            buttons: [
                                {
                                    caption: "Let's go on",
                                    action: "goto(deleteLine)"
                                }
                            ]
                        },
                        {
                            label: "numpadOK",
                            action: "highlight",
                            target: {
                                type: "Button",
                                value: n$.Enums.ButtonType.Ok,
                                source: "Popup"
                            },
                            tooltip: [
                                "That was too easy.",
                                "Let's make it even easier. Click \"" + l$.Global_OK + "\"."
                            ],
                            advance: "clicked"
                        },
                        {
                            label: "deleteLine",
                            action: "highlight",
                            target: {
                                type: "Button",
                                caption: "Delete"
                            },
                            tooltip: [
                                "The customer has just changed their mind. It happens.",
                                "Let's delete this item. Click \"Delete\"."
                            ],
                            advance: "clicked"
                        },
                        {
                            action: "message",
                            text: [
                                "<h1>Marvelous job.</h1>",
                                "That was it. Creating a sale is an easy job. Tap here, click there, next (happy) customer, please!",
                                "If you will need more help with anythine else, click the small light-bulb icon in the status bar. We'll be happy to jump in and walk you through another task.",
                                "Until then, enjoy NP Retail!"
                            ]
                        }
                    ]
                });
            };

            n$.Capabilities.Walkthrough.requestWalkthroughs();
        },
        0)
    .depend("UserGuide");
;
n$.addModule("Window",
    function () {

        var dimCount = 0,
            dimmed = false,
            overlay, overlayObject,
            busyDots = null;

        n$.Window = {
            IsMobile: function () {
                return window.top.innerWidth <= 736;
            },
            DimScreen: function (on, click, force) {
                if (!force) {
                    dimCount += on ? 1 : dimCount > 0 ? -1 : 0;
                    if (dimmed === on)
                        return;
                    dimmed = dimCount > 0;
                } else {
                    dimmed = false;
                    dimCount = 0;
                    on = false;
                };

                on
                    ? (
                        overlay && overlay[0] && overlay[0].parentElement ||
                        (n$.UI.controlAddIn
                            .prepend(overlay = $('<div class="np-overlay">'))
                            .click(function () { if (click) click(); }), overlayObject = { focusElement: overlay[0] }),
                        overlay.fadeIn(300), n$.Focus.request(overlayObject))
                    : dimCount === 0 &&
                    (overlay.fadeOut(300), n$.Focus.release(overlayObject));
            },
            TopResize: function () {
                if (window && window.parent) {
                    if ($) {
                        $(".content-area-box", window.parent.document).css("padding", "0");
                        if (window.frameElement) {
                            var frame = $("#" + window.frameElement.id, window.parent.document);
                            frame.css("min-height", window.top.innerHeight + "px");
                            frame.height(window.top.innerHeight + "px");
                            $(".ms-core-overlay", window.parent.document).css("overflow", "hidden");
                        }
                        $(".np-container.np-popup")
                            .each(function (index, e) {
                                $(e).css("left", window.top.innerWidth / 2 - $(e).width() / 2);
                                $(e).css("top", window.top.innerHeight / 2 - $(e).height() / 2);
                            });
                    };
                };
            },

            updateBusyDots: function (on) {
                if (!busyDots) {
                    if (window && window.parent) {
                        busyDots = $(".busydots", window.parent.document);
                        busyDots.length || (busyDots = null);
                    };
                };
                busyDots && (busyDots.css("display", on ? "" : "none"));
            }
        };

        function hideNavNavigation() {
            var nav = $(window.frameElement).closest("#contentBox");
            nav.find(".ms-nav-navigation").attr("style", "display: none !important");
            nav.find(".ms-nav-appbar").attr("style", "display: none !important");

            // Business Central fix (#340613)
            $(window.top.document.body).find("div.ms-nav-content-box > .ms-nav-navigation").attr("style", "display: none !important");

            // More Business Central fixes (#353737)
            $(window.frameElement).closest("body").find(".nav-bar-area-box").attr("style", "display: none !important");
            $(window.frameElement).closest("body").find(".ms-nav-layout-gutter-left").attr("style", "display: none !important");
            $(window.frameElement).closest("body").find(".ms-nav-layout-gutter-right").attr("style", "display: none !important");
            $(window.frameElement).closest(".control-addin-container").attr("style", "padding-top: 0 !important");

            // More Business Central fixes (#376820)
            var bc = $(window.frameElement).closest(".ms-nav-content-box");
            bc.find(".ms-nav-appbar").attr("style", "display: none !important");
            bc.find(".ms-nav-content").attr("style", "width: width: calc(-0px + 100%)");

            // More Business Central fixes (#414495)
            $("#product-menu-bar", window.top.document.body).attr("style", "display: none !important");
            $("body.has-product-menu-bar .designer", window.top.document).attr("style", "height: 100% !important; top: 0 !important");

            // BC 170 bottom padding (#436343)
            $(window.frameElement).closest("body").find("main.ms-nav-layout-body").attr("style", "padding-bottom: 0 !important");

            // iOS keyboard focus fix (#413071)
            const metaAll = window.top.document.head.querySelectorAll("meta");
            for (let node of metaAll) {
                if (node.name === "viewport") {
                    node.content = "width=device-width, initial-scale=1, maximum-scale=1,user-scalable=0"
                }
            };
        };

        n$.ready(function () {
            n$.Window.TopResize();
            hideNavNavigation();
            window.top.Microsoft.Dynamics.Framework.Resource.Message_NavigateAway = "";
        });
    });
/*


TODO: EXTREMELY IMPORTANT!!! PROCESS ALL TODOS IN THIS FILE BEFORE RELEASING TRANSCENDENCE V2


TODO: Translations for messages!
*/
;
n$.addModule("Workflow",
    function () {
        // set to true to enable console debugging of workflow execution
        var $debug = false;
        // set this to a different number to specify the timeout for awaiting suspicious long-running calls
        var $awaitTimeout = 10000;
        var $maxAwaitCount = 3;

        var workflowId = 0;
        var actionId = 0;
        var globalContext = {};

        function getNextActionId() {
            return ++actionId;
        };

        var coordinator = (function () {
            var workflows, failed, paused;
            var known = {};
            var queue = [];
            var busy = false;
            var awaitCount = 0;
            var awaitInterval = 0;
            var firstAwait, lastAwait;

            function clearAwait(resetCounter) {
                resetCounter && (awaitCount = 0, firstAwait = 0, lastAwait = 0);
                awaitInterval && (clearTimeout(awaitInterval), awaitInterval = 0);
            };
            function resetEngineAfterFailure() {
                if (n$.Popup.Count)
                    return;

                clearAwait(true);

                n$.Popup.dialog({
                    caption:
                        "This seems to not be working, you are clicking buttons, but there is no response. While it may be that an operation is taking too long to complete, we suspect something went wrong.<br>" +
                        "If you agree with us, then please click \"Yes\"." +
                        "<br><br>" +
                        "Do you want us to fix this for you?" +
                        "<br><br>" +
                        "This will make the buttons respond again, but may lose the information of the last action you made including all actions you attempted while the system seemed unresponsive.",
                    title: "The buttons seem unresponsive...",
                    style: n$.Enums.DialogStyle.Confirm,
                    callback: function (res) {
                        if (res === n$.Enums.ButtonType.Yes) {
                            resetEngine();
                        };
                    }
                });
            };
            function beginAwait() {
                clearAwait();
                if (!busy || !queue.length)
                    return;

                firstAwait || (firstAwait = Date.now());
                var now = Date.now();

                if (++awaitCount >= $maxAwaitCount) {
                    awaitInterval = setTimeout(resetEngineAfterFailure, 1000);
                    return;
                };
                ((now - lastAwait < 250) || (now - firstAwait > 30000)) && (awaitInterval = setTimeout(resetEngineAfterFailure, $awaitTimeout || 10000));

                lastAwait = Date.now();
            };

            function resetEngine() {
                workflows = {};
                globalContext = {};
                queue = [];
                busy = false;
                failed = false;
                paused = false;
                clearAwait(true);
            };
            resetEngine();

            var result = {
                workflow: {
                    // Indicates if the workflow engine is in the failed state
                    isFailed: function () {
                        return failed;
                    },

                    // Aborts all currently active workflows and resets the state in the front end
                    abortAll: function (force) {
                        if (!force) {
                            for (var w in workflows) {
                                if (workflows.hasOwnProperty(w)) {
                                    var workflow = workflows[w];
                                    workflow instanceof n$.Workflow.Workflow && workflow.abandon();
                                };
                            };
                        };
                        resetEngine();
                    },

                    // Puts the workflow engine in the failed state and aborts all workflows in both the front and the back end
                    fail: function (msg) {
                        failed = true;
                        n$.Events.AbortAllWorkflows.raise([]);
                        this.abortAll(true);
                        msg && typeof msg === "string" && n$.Debug.Workflow.error(msg);
                    },

                    // Puts the workflow engine in the failed state and completes the current workflow
                    failWorkflow: function (workflow) {
                        failed = true;
                        var me = this;
                        n$.Events.AbortWorkflow.raise({ id: workflow.workflowId },
                            function () {
                                me.completeWorkflow(workflow);
                            });
                    },

                    // Registers a known workflow
                    registerKnown: function (action) {
                        known[action.Workflow.Name] = action;
                        action.Workflow
                            && action.Workflow.Content
                            && action.Workflow.Content.engineVersion
                            && (known[action.Workflow.Name].engineVersion = action.Workflow.Content.engineVersion);
                    },

                    // Retrieves a known workflow
                    known: function (name) {
                        return known[name] ||
                            n$.Debug.Workflow
                                .error("An unknown workflow " + name + " was requested.");
                    },

                    nest: function (parent, req) {
                        parent && parent.pause();
                        // TODO: retrieve known workflow the correct way around!
                        var nested = new n$.Workflow
                            .Workflow(known[req.WorkflowName].Workflow, req.Content.workflowParameters, parent && parent.actionContent, parent);
                        req.Content.workflowContext && (nested.context = req.Content.workflowContext);
                        nested.execute();
                    },

                    pause: function () {
                        paused = true;
                    },

                    resume: function () {
                        paused = false;
                    },

                    // Registers a new workflow, assigns it a unique id, and puts it on the execution stack
                    register: function (workflow) {
                        workflow.workflowId = ++workflowId;
                        workflows[workflowId] = workflow;
                    },

                    start: function (workflow, callback) {
                        setTimeout(function () {
                            n$.Debug.Workflow.log({
                                event: "Starting workflow execution",
                                data: { name: workflow.name }
                            });
                            workflow.actionContent.Blocking && workflow.dim(true);
                            //n$.Window.updateBusyDots(workflow.actionContent.Blocking);

                            function next() {
                                n$.Debug.Workflow.log("Workflow execution completed, looking up next.");
                                workflow.actionContent.Blocking && workflow._undim();
                                //n$.Window.updateBusyDots(true);

                                clearAwait(true);
                                busy = false;

                                var wkf = queue.shift();
                                if (wkf) {
                                    n$.Debug.Workflow.log({
                                        event: "-> Unqueueing workflow",
                                        data: { remaining: queue.length, name: wkf.name }
                                    });
                                    busy = true;
                                    setTimeout(function () {
                                        queue.length && beginAwait();
                                        wkf.execute(next);
                                    });
                                } else {
                                    typeof callback === "function" &&
                                        callback();
                                };
                            };

                            if (workflow instanceof w$.Workflow) {
                                if (busy || queue.length) {
                                    n$.Debug.Workflow.log({
                                        event: "-> Queueing workflow",
                                        data: { awaiting: queue.length, name: workflow.name }
                                    });
                                    queue.push(workflow);
                                    beginAwait();
                                    return;
                                };
                                busy = true;
                                setTimeout(function () {
                                    workflow.execute(next);
                                });
                            };
                        });
                    },

                    // Retrieves a workflow by an ID, and optionally throws an error
                    getById: function (id, throwError) {
                        if (!workflows[id]) {
                            // TODO: report error
                            // TODO: reset the workflow engine
                            id && throwError &&
                                n$.Debug.Workflow.error("Workflow has been requested by ID " +
                                    id +
                                    ", but that workflow either has completed or was aborted. This is a programming bug, not a user error.");
                            return null;
                        };
                        return workflows[id];
                    },

                    // Sets context of an object specified by name
                    setContext: function (object, context, workflow) {
                        var obj;
                        switch (object) {
                            case "temp":
                            case "tmp":
                                obj = workflow.temp;
                                break;
                            case "transaction":
                                obj = n$.Workflow.transactionTemp;
                                break;
                            case "session":
                                obj = n$.Workflow.sessionTemp;
                                break;
                            case "global":
                                obj = globalContext;
                                break;
                            default:
                                this.fail("Context was provided for unknown or unsupported object \"" +
                                    object +
                                    "\".");
                                return;
                        };
                        if (!obj) {
                            this
                                .fail("Context was provided for object \"\", but this object is not available (even though by all means it should be).");
                            return;
                        };
                        $.extend(obj, context);
                    },

                    completeWorkflow: function (wkf) {
                        var completed = delete workflows[wkf.workflowId];
                        if (!completed) {
                            n$.Debug.Workflow.warning("Complete operation was invoked by workflow [" +
                                wkf.name +
                                ", " +
                                wkf.workflowId +
                                "] but it is not the current workflow. Stack is being cleared, but back-end code must be checked for errors.");
                            resetEngine();
                            return;
                        };

                        n$.Debug.Workflow.log("Workflow " +
                            wkf.name +
                            " has completed as a " +
                            (wkf.nested
                                ? "nested"
                                : "top-level") +
                            " workflow.");

                        wkf.workflowCompletionCallback &&
                            typeof wkf.workflowCompletionCallback === "function" &&
                            wkf.workflowCompletionCallback(wkf);

                        if (wkf.nested && wkf.parent instanceof w$.Workflow) {
                            wkf.parent.resume();
                        };

                        (failed || !Object.keys(workflows).length) && resetEngine();
                        n$.Focus.refocus();
                    }
                }
            };
            return result;
        })();

        n$.Workflow = {
            // Static space
            getById: coordinator.workflow.getById,
            registerKnown: coordinator.workflow.registerKnown,
            setContext: coordinator.workflow.setContext,
            abortAll: coordinator.workflow.abortAll,
            fail: coordinator.workflow.fail,
            nest: coordinator.workflow.nest,
            start: coordinator.workflow.start,

            // Classes

            Workflow: function (workflow, parameters, content, parent) {
                var me = this;
                parent && parent instanceof w$.Workflow && (me.parent = parent, me.nested = true);

                coordinator.workflow.register(me);

                this.model = {};
                this.context = {};
                n$.State.bindObject(this.model);

                this._initOptions(parameters);

                this.actionContent = content || {};
                this.alive = true;
                this.name = workflow.Name;
                this.state = {};
                this.parameters = parameters || {};
                this.thisStep = null;
                this.running = false;
                this.invokeBefore = !!workflow.RequestContext;
                this.requestContext = {};

                var lastStep = null;
                workflow.Steps.forEach(function (step) {
                    var thisStep = new n$.Workflow.Step(step, me);
                    me[step.Label] = thisStep;
                    lastStep && (lastStep.nextStep = thisStep);
                    me.thisStep || (me.thisStep = thisStep);
                    lastStep = thisStep;
                });
            },

            Task: function () {
                this._proto_execute = this.execute;
            },

            Callable: function () {
            },

            Step: function (step, workflow) {
                this._queue = [];

                this.name = step.Label;
                this.label = step.Label;
                this.code = step.Code;
                this.workflow = workflow;
            },

            Chain: function (func, args, step) {
                this.step = step;
                this.workflow = step.workflow;

                this._queue = [];
                this._setup(func, args);
                this._initialize();
            },

            Command: function (func, args, step) {
                this.step = step;
                this.workflow = step.workflow;

                this._setup(func, args);
            },

            Result: function (func, args, chain) {
                this.chain = chain;
                this.step = chain.step;
                this.workflow = chain.step.workflow;

                this._setup(func, args);
            },

            ActionHandler: function (button) {
                this.button = button;
                this.workflow = null;
            }
        };

        // Workflow prototype
        (function () {
            // TODO: should this be a public class in its own right?
            function newResponseContext(callback) {
                if (!callback)
                    callback = null;

                if (callback && typeof callback !== "function")
                    n$.Debug.Workflow
                        .error("A front-end Workflow has requested a new response context, but has provided a callback parameter that's not a function.");

                var callbackReceived = false;
                var completeReceived = false;
                var completelyProcessed = false;
                var failed = false;
                function process() {
                    completelyProcessed &&
                        n$.Debug.Workflow
                            .error("There was an attempt to process again a front-end workflow that has already been fully proceesed.");

                    completelyProcessed = callbackReceived && completeReceived;
                    completelyProcessed && !failed && callback && callback();
                };
                var context = {
                    receiveComplete: function () {
                        process(completeReceived = true);
                    },
                    receiveCallback: function () {
                        if (failed)
                            return;
                        process(callbackReceived = true);
                    },
                    fail: function () {
                        failed = true;
                    }
                };
                Object.defineProperty(context,
                    "failed",
                    {
                        get: function () {
                            return failed;
                        }
                    });
                Object.defineProperty(context,
                    "callbackReceived",
                    {
                        get: function () {
                            return callbackReceived;
                        }
                    });
                Object.defineProperty(context,
                    "completeReceived",
                    {
                        get: function () {
                            return completeReceived;
                        }
                    });
                return context;
            };

            function getRequestContext(workflow, id) {
                id = id || 0;
                if (!workflow.requestContext || !workflow.requestContext[id] || typeof workflow.requestContext[id] !== "object")
                    n$.Debug.Workflow.error("Response context id " +
                        id +
                        " was requested from workflow [" +
                        workflow.name +
                        "." +
                        workflow.workflowId +
                        "], but it does not exist.");
                return workflow.requestContext[id];
            };

            // public space
            n$.Workflow.Workflow.prototype.getEventData = function (id) {
                var data = { workflow: this.name, workflowId: this.workflowId };
                id && (data.actionId = id);
                return data;
            };
            n$.Workflow.Workflow.prototype.fail = function (id) {
                n$.Debug.Workflow.log({ event: "Workflow fail requested", data: this.getEventData(id) });

                // TODO: use this instead of abandon when failing a workflow!
                this.alive = false;
                getRequestContext(this, id).fail();
                coordinator.workflow.failWorkflow(this);
            };
            n$.Workflow.Workflow.prototype.receiveComplete = function (id) {
                getRequestContext(this, id).receiveComplete();
            };
            n$.Workflow.Workflow.prototype.receiveCallback = function (id) {
                n$.Debug.Workflow.log({
                    event: id ? "Workflow callback received" : "BeforeWorkflow callback received",
                    data: this.getEventData(id)
                });
                getRequestContext(this, id).receiveCallback();
            };

            n$.Workflow.Workflow.prototype._initOptions = function (p) {
                for (var o in p) {
                    if (p.hasOwnProperty(o) && o.lastIndexOf("_option_") === 0) {
                        var option = o.substring(8);
                        p[option] = new Number(p[option]);
                        for (var v in p[o]) {
                            if (p[o].hasOwnProperty(v)) {
                                p[option][v] = p[o][v];
                            };
                        };
                        delete p[o];
                    };
                };
            };
            n$.Workflow.Workflow.prototype.invokeBeforeWorkflow = function (callback) {
                n$.Debug.Workflow.log({ event: "BeforeWorkflow", data: this.name });
                var me = this;
                me.requestContext[0] = newResponseContext(callback);

                n$.Events.BeforeWorkflow.raise({
                    action: this.name,
                    parameters: this.parameters,
                    workflowId: me.workflowId,
                    data: n$.State.dataStore instanceof n$.Data.DataStore && n$.State.dataStore.getState()
                },
                    function () {
                        me.receiveCallback();
                    });
            };
            n$.Workflow.Workflow.prototype._undim = function () {
                (this.dimCount && n$.Window.DimScreen(false, null, true));
                this.dimCount = 0;
            };
            n$.Workflow.Workflow.prototype._stepCompleted = function (step) {
                var me = this;
                if (me.thisStep._pauseProcessing)
                    return;

                step._abort
                    ? me._abortWorkflow()
                    : (me.thisStep = me.continueAtStep || me.thisStep.nextStep,
                        me.continueAtStep && delete me.continueAtStep,
                        me.thisStep &&
                        (me._paused || setTimeout(function () {
                            me.thisStep.execute();
                        })));
                me.thisStep || (me._undim(), coordinator.workflow.completeWorkflow(me));
            };
            n$.Workflow.Workflow.prototype._goto = function (step) {
                var me = this;
                me.thisStep = step;
                setTimeout(function () {
                    me._paused || me.thisStep.execute();
                });
            };
            n$.Workflow.Workflow.prototype._abortWorkflow = function (force) {
                var me = this;
                me.alive = false;
                function completeAbort() {
                    force
                        ? coordinator.workflow.abortAll(true)
                        : coordinator.workflow.completeWorkflow(me);
                };

                me._backEndId && me._responded
                    ? n$.Events.AbortWorkflow.raise({ id: me.workflowId }, completeAbort)
                    : completeAbort();

                me._undim();
            };
            n$.Workflow.Workflow.prototype._respond = function (stepname, context, callback) {
                if (typeof stepname === "function" && context === undefined && callback === undefined) {
                    callback = stepname;
                    stepname = undefined;
                };

                var me = this;
                context || (context = {});
                n$.State.dataStore instanceof n$.Data.DataStore && (context.data = n$.State.dataStore.getState());

                $.copyObject(context, me.context);
                me._backEndId && (context.backEndid = me._backEndId);
                context.parameters = me.parameters;

                var actionId = getNextActionId();
                me.requestContext[actionId] = newResponseContext(callback);
                n$.Events.Action.raise([
                    me.name,
                    stepname || "",
                    me.workflowId,
                    actionId,
                    context
                ],
                    function () {
                        me.receiveCallback(actionId);
                    });
            };
            n$.Workflow.Workflow.prototype.abandon = function () {
                this._abortWorkflow(true);
            };
            n$.Workflow.Workflow.prototype.execute = function (callback) {
                n$.Debug.Workflow.log("Starting execution of workflow: " + this.name);

                if (coordinator.workflow.isFailed()) {
                    n$.Debug.Workflow
                        .warning("-> The workflow engine is in the failed state, aborting execution without any further action.");
                    return;
                };

                var me = this;
                if (!me.alive) {
                    n$.Debug.Workflow
                        .log("-> This workflow is no longer alive, aborting execution with no further action taken by this instance.");
                    return;
                };

                me.running = true;
                n$.Workflow.initializeDataModule(this, "data", this.dataSource);

                this.view = {
                    sale: n$.UI.currentView instanceof n$.View.Sale,
                    payment: n$.UI.currentView instanceof n$.View.Payment
                };

                function execute() {
                    me.workflowCompletionCallback = callback;
                    me.thisStep
                        ? (me.thisStep.execute(function () {
                            me._stepCompleted(me.thisStep);
                        }))
                        : me._respond(function () {
                            coordinator.workflow.completeWorkflow(me);
                        });
                };

                me.invokeBefore ? me.invokeBeforeWorkflow(execute) : execute();
            };
            n$.Workflow.Workflow.prototype.pause = function () {
                if (!this.running) {
                    n$.Debug.Workflow.warning("Pause invoked on a workflow that is not running yet, or anymore.");
                    return;
                };

                this._paused = true;
                this.nested || coordinator.workflow.pause();
            };
            n$.Workflow.Workflow.prototype.resume = function (actionId) {
                if (!this.running) {
                    n$.Debug.Workflow.warning("Resume invoked on a workflow that is not running yet, or anymore.");
                    return;
                };

                var context = actionId && getRequestContext(this, actionId);
                var execute = context ? context.callbackReceived : true;

                this.nested || coordinator.workflow.resume();
                this._paused &&
                    this.thisStep &&
                    (delete this._paused, execute && this.thisStep.execute(), delete this._pausedId);
            };
            n$.Workflow.Workflow.prototype.dim = function (inc) {
                typeof this.dimCount === "undefined" && (this.dimCount = 0);
                var doDim = !!inc;
                n$.Window.DimScreen(doDim);
                this.dimCount += doDim ? 1 : -1;
                this.dimCount < 0 && (this.dimCount = 0);
            };
        })();

        // Task prototype
        (function () {
            n$.Workflow.Task.prototype._type = "Task";
            n$.Workflow.Task.prototype._setAbortFlags = function () {
                this._abort = true;
                this.workflow._abort = true;
            };
            n$.Workflow.Task.prototype._abortIfStepNotDone = function (task) {
                return this instanceof n$.Workflow.Step &&
                    this._queue.length &&
                    (this._setAbortFlags(),
                        n$.Debug.Workflow.error("A workflow task [" +
                            task +
                            "] has been invoked with other tasks still awaiting execution in workflow step [" +
                            this.name +
                            "]. This task can only be invoked last in a workflow step."),
                        true);
            };
            n$.Workflow.Task.prototype.name = "[Task]";
            n$.Workflow.Task.prototype.execute = function (done) {
                if (coordinator.workflow.isFailed()) {
                    n$.Debug.Workflow
                        .warning("Workflow engine in a failed state, and step execution is initiated. Aborting all.");
                    return;
                };

                var me = this;

                function next() {
                    if (me.workflow._abort) {
                        done && done();
                        return;
                    };
                    me._queue && me._queue instanceof Array && me._queue.length
                        ? me._queue.shift().execute(next)
                        : done && done();
                };

                $debug && console.log("Task.execute " + me.name + (me.code ? " (" + me.code + ")" : ""));
                this.workflow._abort ? done && done() : this.call(next);
            };
            n$.Workflow.Task.prototype.call = function (done) {
                $debug && console.log("Task.call " + this.name);
                done();
            };
            n$.Workflow.Task.prototype.callFunction = function () {
                $debug && console.log("Task.callFunction");
            };
        })();

        // Callable prototype
        (function () {
            n$.Workflow.Callable.prototype = new n$.Workflow.Task();
            n$.Workflow.Callable.prototype._setup = function (func, args) {
                this.name = func;
                this.callObject = {
                    function: this._functions[func],
                    arguments: args
                }
            };
            n$.Workflow.Callable.prototype._continue = function () { return true; };
            n$.Workflow.Callable.prototype.call = function (done) {
                $debug && console.log("Callable.call " + this.name);
                this._continue()
                    ? this.callObject.function.apply(this, [{ arguments: this.callObject.arguments, callback: done }])
                    : done();
                this instanceof n$.Workflow.Chain && (this.workflow._lastChain = this);
            };
        })();

        // Step prototype
        (function () {
            n$.Workflow.Step.prototype = new n$.Workflow.Task();
            n$.Workflow.Step.prototype._type = "Step";
            n$.Workflow.Step.prototype._initialize = function () {
                var me = this;

                function getProxy(name) {
                    return function () {
                        var cmd = me._commands[name].apply(me, arguments);
                        me._queue.push(cmd);
                        return cmd;
                    };
                };

                me.workflow.temp = me.workflow.temp || {};
                n$.Workflow.sessionTemp = n$.Workflow.sessionTemp || {};
                n$.Workflow.transactionTemp = n$.Workflow.transactionTemp || {};

                // TODO: when minifying, this line fails, because "me" is minified
                // Important: Some collections made available here, must also exist in the ProvideContext async handler.
                // Collections to be available to the ProvideContext are:
                // - temp, tmp
                // - transaction
                // - session
                // - global
                eval("var temp = me.workflow.temp, tmp = temp, transaction = n$.Workflow.transactionTemp, session = n$.Workflow.sessionTemp, global = globalContext, context = me.workflow.context, model = me.workflow.model, param = me.workflow.parameters, parameters = param, labels = l$.Actions[this.workflow.name], data = me.workflow.data, view = n$.View.viewState;");
                for (var f in this._commands)
                    if (this._commands.hasOwnProperty(f)) {
                        this._commands[f].chain = this;
                        var proxy = getProxy(f);
                        proxy && eval("var " + f + " = proxy;");
                    };

                try {
                    eval(this.code);
                } catch (e) {
                    this.workflow.abandon();
                    n$.Debug.Workflow
                        .error("A JavaScript runtime error occurred while executing this workflow step:\n\n" +
                            this.code +
                            "\n\nThe error message is:\n\n" +
                            e);
                };
            };
            n$.Workflow.Step.prototype._respond = function (context, task, callback) {
                var me = this;
                if (me._abortIfStepNotDone(task)) {
                    callback();
                    return;
                };

                me.workflow._respond(me.name, context, callback);
            };
            n$.Workflow.Step.prototype._commands = {
                numpad: function () { return new n$.Workflow.Chain("numpad", arguments, this); },
                intpad: function () { return new n$.Workflow.Chain("intpad", arguments, this); },
                datepad: function () { return new n$.Workflow.Chain("datepad", arguments, this); },
                stringpad: function () { return new n$.Workflow.Chain("stringpad", arguments, this); },
                passwordpad: function () { return new n$.Workflow.Chain("passwordpad", arguments, this); },
                confirm: function () { return new n$.Workflow.Chain("confirm", arguments, this); },
                input: function () { return new n$.Workflow.Chain("input", arguments, this); },
                password: function () { return new n$.Workflow.Chain("password", arguments, this); },
                calendar: function () { return new n$.Workflow.Chain("calendar", arguments, this); },
                menu: function () { return new n$.Workflow.Command("menu", arguments, this); },
                message: function () { return new n$.Workflow.Command("message", arguments, this); },
                error: function () { return new n$.Workflow.Command("error", arguments, this); },
                hyperlink: function () { return new n$.Workflow.Command("hyperlink", arguments, this); },
                respond: function () { return new n$.Workflow.Command("respond", arguments, this); },
                end: function () { return new n$.Workflow.Command("end", arguments, this); },
                goto: function () { return new n$.Workflow.Command("goto", arguments, this); },
                store: function () { return new n$.Workflow.Command("store", arguments, this); },
                abort: function () { return new n$.Workflow.Command("abort", arguments, this); },
                dim: function () { return new n$.Workflow.Command("dim", arguments, this); },
                undim: function () { return new n$.Workflow.Command("undim", arguments, this); }
            };
            n$.Workflow.Step.prototype.execute = function (done) {
                var me = this;
                done || (done = function () { me.workflow._stepCompleted(me); });
                this.workflow._abort
                    ? done()
                    : (
                        this._initialize(),
                        this._proto_execute(done)
                    );
            };
        })();

        // Chain prototype
        (function () {
            n$.Workflow.Chain.prototype = new n$.Workflow.Callable();
            n$.Workflow.Chain.prototype._proto_call = n$.Workflow.Chain.prototype.call;
            n$.Workflow.Chain.prototype._initialize = function () {
                var me = this;

                function getProxy(name) {
                    return function () {
                        var cmd = new n$.Workflow.Result(name, arguments, me);
                        cmd._initializers.hasOwnProperty(name) && cmd._initializers[name].apply(cmd);
                        me._queue.push(cmd);
                        return me;
                    };
                };

                this._methods.forEach(function (f) {
                    me[f] = getProxy(f);
                });
            };
            n$.Workflow.Chain.prototype._continue = function () {
                return this._executed
                    ? (this.hasOwnProperty("_continueFlag") ? this._continueFlag : this.getResult().success)
                    : true;
            };
            n$.Workflow.Chain.prototype._type = "Chain";
            n$.Workflow.Chain.prototype._methods = [
                "respond", "store", "when", "then", "end", "goto", "ok", "cancel", "yes", "no", "abort", "debug", "do"
            ];
            n$.Workflow.Chain.prototype._storeResult = function (name, value) {
                this.workflow.context["$" + this.step.name] || (this.workflow.context["$" + this.step.name] = {});
                this.workflow.context["$" + this.step.name][name] = value;
            };
            n$.Workflow.Chain.prototype._functions = {
                _numpad: function (args, type, masked) {
                    var me = this;
                    (function (title, caption, value, notblank, store) {
                        var par = typeof title === "object" ? title : {};

                        par.callback = function (result) {
                            !result.Cancelled && me._storeResult(store, result.Text);
                            me.getResult = function () {
                                return {
                                    success: !result.Cancelled,
                                    value: result.Text || 0,
                                    cancel: !!result.Cancelled,
                                    ok: !result.Cancelled
                                };
                            }
                            args.callback();
                        };

                        if ((typeof title !== "object")) {
                            caption === undefined ? (caption = title) : (par.title = title);
                            par.caption = caption;
                            value && (par.value = value);
                            notblank && (par.notBlank = notblank);
                        } else {
                            store = caption;
                        };
                        par.title = par.title || l$.DialogCaption_Confirmation;
                        masked && (par.masked = true);
                        par.type = type || n$.NewEnums.NumpadType.Decimal;
                        typeof store !== "string" && (store = "numpad");
                        n$.Popup.numpad(par);
                    }).apply(this, args.arguments);
                },
                numpad: function (args) {
                    n$.Workflow.Chain.prototype._functions._numpad.call(this, args, n$.NewEnums.NumpadType.Decimal);
                },
                intpad: function (args) {
                    n$.Workflow.Chain.prototype._functions._numpad.call(this, args, n$.NewEnums.NumpadType.Integer);
                },
                stringpad: function (args) {
                    n$.Workflow.Chain.prototype._functions._numpad.call(this, args, n$.NewEnums.NumpadType.Text);
                },
                passwordpad: function (args) {
                    n$.Workflow.Chain.prototype._functions._numpad.call(this, args, n$.NewEnums.NumpadType.Text, true);
                },
                datepad: function (args) {
                    n$.Workflow.Chain.prototype._functions._numpad.call(this, args, n$.NewEnums.NumpadType.Date);
                },
                confirm: function (args) {
                    var me = this;
                    (function (title, caption, store) {
                        var par = typeof title === "object" ? title : {};

                        par.style = n$.Enums.DialogStyle.Confirm;
                        par.callback = function (result) {
                            var yes = result === n$.Enums.ButtonType.Yes;
                            me._storeResult(store, yes);
                            me.getResult = function () {
                                return {
                                    success: yes,
                                    value: yes,
                                    yes: yes,
                                    no: !yes
                                };
                            }
                            args.callback();
                        };

                        if ((typeof title !== "object")) {
                            caption === undefined ? (caption = title) : (par.title = title);
                            par.caption = caption;
                        } else {
                            store = caption;
                        };
                        par.title = par.title || l$.DialogCaption_Confirmation;

                        typeof store !== "string" && (store = "confirm");
                        n$.Popup.dialog(par);
                    }).apply(this, args.arguments);
                },
                input: function (args, masked) {
                    var me = this;
                    (function (title, caption, instruction, value, notblank, store) {
                        var par = typeof title === "object" ? title : {};
                        par.callback = function (result) {
                            !result.Cancelled && me._storeResult(store, result.Text);
                            me.getResult = function () {
                                return {
                                    success: !result.Cancelled,
                                    value: result.Text,
                                    ok: !result.Cancelled,
                                    cancel: !!result.Cancelled
                                };
                            };
                            args.callback();
                        };

                        if ((typeof title !== "object")) {
                            caption === undefined ? (caption = title) : (par.title = title);
                            par.caption = caption;
                            instruction && (par.instruction = instruction);
                            value && (par.value = value);
                            notblank && (par.notBlank = notblank);
                        } else {
                            store = caption;
                        };
                        par.title = par.title || l$.DialogCaption_Confirmation;
                        masked && (par.masked = masked);

                        typeof store !== "string" && (store = "input");
                        n$.Popup.input(par);
                    }).apply(this, args.arguments);
                },
                password: function (args) {
                    n$.Workflow.Chain.prototype._functions.input.call(this, args, true);
                },
                calendar: function (args) {
                    var me = this;
                    (function (title, caption, store) {
                        var par = typeof title === "object" ? title : {};
                        par.callback = function (result) {
                            !result.Cancelled && me._storeResult(store, result);
                            me.getResult = function () {
                                return {
                                    success: !result.Cancelled,
                                    value: result,
                                    ok: !result.Cancelled,
                                    cancel: !!result.Cancelled
                                };
                            };
                            args.callback();
                        };

                        if ((typeof title !== "object")) {
                            caption === undefined ? (caption = title) : (par.title = title);
                            par.caption = caption;
                        } else {
                            store = caption;
                        };
                        par.title = par.title || l$.DialogCaption_Confirmation;

                        typeof store !== "string" && (store = "calendar");

                        par.data = {
                            dataSource: "BUILTIN_SALELINE"
                        };

                        n$.Popup.calendar(par);
                    }).apply(me, args.arguments);
                }
            };
            n$.Workflow.Chain.prototype.call = function () {
                this._proto_call.apply(this, arguments);
                this._executed = true;
            };
            n$.Workflow.Chain.prototype.getResult = function () {
                return { success: !this._executed };
            };
        })();

        // Command prototype
        (function () {
            function dialog(args, style) {
                (function (title, caption) {
                    var par = typeof title === "object" ? title : {};

                    par.callback = args.callback;
                    par.style = style;

                    if ((typeof title !== "object")) {
                        caption === undefined ? (caption = title) : (par.title = title);
                        par.caption = caption;
                    };
                    par.title = par.title || n$.Enums.DialogStyle.getCaption(style);

                    n$.Popup.dialog(par);
                }).apply(this, args.arguments);
            };

            n$.Workflow.Command.prototype = new n$.Workflow.Callable();
            n$.Workflow.Command.prototype._type = "Command";
            n$.Workflow.Command.prototype._functions = {
                error: function (args) { dialog.call(this, args, n$.Enums.DialogStyle.Error); },
                message: function (args) { dialog.call(this, args, n$.Enums.DialogStyle.Message); },
                menu: function (args) {
                    (function (caption, menu, columns, rows) {
                        rows === undefined &&
                            typeof menu === "number" &&
                            (
                                rows = columns,
                                columns = menu,
                                menu = caption,
                                caption = n$.Menu.prototype.__menus[menu].Caption
                            );
                        menu === undefined &&
                            (
                                menu = caption,
                                caption = n$.Menu.prototype.__menus[menu].Caption
                            );
                        n$.Popup.FunctionsPad({
                            Caption: caption,
                            rows: rows,
                            columns: columns,
                            menu: menu,
                            callback: function () {
                                args.callback();
                            }
                        });
                    }).apply(this, args.arguments);
                },
                hyperlink: function (args) { args.callback(); },
                respond: function (args) {
                    (function (name, value) {
                        var ctx = {};
                        typeof name !== "undefined" && typeof value !== "undefined" && (ctx[name] = value);
                        this.step._respond(ctx, "respond", args.callback);
                    }).apply(this, args.arguments);
                },
                store: function (args) {
                    var me = this;
                    (function (name, value) {
                        value === undefined &&
                            me.workflow._lastChain &&
                            (value = me.workflow._lastChain.getResult().value);
                        me.workflow.context[name] = value;
                    }).apply(this, args.arguments);
                    args.callback();
                },
                end: function (args) { args.callback(); },
                goto: function (args) {
                    (function (step) {
                        if (this.workflow[step] instanceof n$.Workflow.Step)
                            this.workflow._goto(this.workflow[step]);
                        else
                            throw new Error("Workflow step [" + step + "] was invoked, but that step does not exist.");
                    }).apply(this, args.arguments);
                },
                set: function (args) { args.callback(); },
                abort: function () { this.workflow._abortWorkflow(); },
                dim: function (args) {
                    this.workflow.dim(true);
                    args.callback();
                },
                undim: function (args) {
                    this.workflow.dim(false);
                    args.callback();
                }
            };
        })();

        // Result prototype
        (function () {
            n$.Workflow.Result.prototype = new n$.Workflow.Callable();
            n$.Workflow.Result.prototype._type = "Result";
            n$.Workflow.Result.prototype._functions = {
                respond: function (args) {
                    var me = this;
                    (function (name) {
                        var ctx = {};
                        name ? (ctx[name] = me.chain.getResult().value) : ctx = me.chain.getResult();
                        me.step._respond(ctx, "respond", args.callback);
                    }).apply(this, args.arguments);
                },
                ok: function (args) {
                    this.chain._continueFlag = !!this.chain.getResult().ok;
                    this._applyArgumentFunction(args);
                    args.callback();
                },
                cancel: function (args) {
                    this.chain._continueFlag = !!this.chain.getResult().cancel;
                    this._applyArgumentFunction(args);
                    args.callback();
                },
                yes: function (args) {
                    this.chain._continueFlag = !!this.chain.getResult().yes;
                    this._applyArgumentFunction(args);
                    args.callback();
                },
                no: function (args) {
                    this.chain._continueFlag = !!this.chain.getResult().no;
                    this._applyArgumentFunction(args);
                    args.callback();
                },
                store: function (args) {
                    var me = this;
                    (function (name) {
                        me.workflow.context[name] = me.chain.getResult().value;
                    }).apply(this, args.arguments);
                    args.callback();
                },
                when: function (args) {
                    args.callback();
                },
                then: function (args) { args.callback(); },
                end: function () { },
                goto: function (args) {
                    (function (step) {
                        if (this.workflow[step] instanceof n$.Workflow.Step)
                            this.workflow._goto(this.workflow[step]);
                        else
                            throw new Error("Workflow step [" + step + "] was invoked, but that step does not exist.");
                    }).apply(this, args.arguments);
                },
                abort: function () {
                    this.workflow._abortWorkflow();
                },
                debug: function (args) {
                    var me = this;
                    (function (name) {
                        $debug && console.log("Workflow debug [" +
                            (name || "") +
                            "]: " +
                            me.chain.getResult().value +
                            " [" +
                            typeof me.chain.getResult().value +
                            "]");
                    }).apply(this, args.arguments);
                    args.callback();
                },
                "do": function (args) {
                    (function (func) {
                        typeof func === "function" && func();
                    }).apply(this, args.arguments);
                    args.callback();
                }
            };
            n$.Workflow.Result.prototype._initializers = {
                cancel: function () {
                    this._continue = function () { return true; };
                },
                ok: function () {
                    this._continue = function () { return true; };
                },
                yes: function () {
                    this._continue = function () { return true; };
                },
                no: function () {
                    this._continue = function () { return true; };
                }
            };
            n$.Workflow.Result.prototype._applyArgumentFunction = function (args) {
                if (!this.chain._continueFlag || typeof args.arguments[0] !== "function")
                    return;
                var func = args.arguments[0];
                var arguments = Array.prototype.slice.call(args.arguments);
                arguments.splice(0, 1);
                func.apply(this.chain, arguments);
            };
            n$.Workflow.Result.prototype._continue = function () {
                return this.chain._continue();
            };
        })();

        // ActionHandler Prototype
        (function () {
            n$.Workflow.ActionHandler.prototype.execute = function (dataSource, callback) {
                /// <summary>This function provides a prototype method for action  handlers. Specific action handlers should replace it with specific implementation.</summary>
                n$.Debug.Workflow
                    .warning("A generic ActionHandler execute function invoked. This indicates a potential configuration or code problem.");
                typeof callback === "function" && callback();
            };

            n$.Workflow.ActionHandler.Workflow = function (button) {
                n$.Workflow.ActionHandler.call(this, button);

                if (button.action.Workflow.Content.engineVersion === "2.0") {
                    this.workflow = new n$.Workflow20.Workflow(button);
                    this.execute = this.workflow.execute;
                    this.cache = true;
                } else {
                    this.workflow = new n$.Workflow.Workflow(button.action.Workflow, button.action.Parameters, button.action.Content);
                }
            };
            n$.inherit(n$.Workflow.ActionHandler.Workflow, n$.Workflow.ActionHandler);
            n$.Workflow.ActionHandler.Workflow.prototype.execute = function (dataSource, callback) {
                this.source.__dataSource && (this.workflow.dataSource = this.source.__dataSource);
                (this.workflow && this.workflow instanceof n$.Workflow.Workflow)
                    ? w$.start(this.workflow, callback)
                    : n$.Debug.Workflow.error("Action without workflow for: " + this.button.action.Type);
            };

            n$.Workflow.ActionHandler.Menu = function (button) {
                n$.Workflow.ActionHandler.call(this, button);

                this.cache = true;
                this.execute = function (par, callback) {
                    if (button.action.OpenAsPopup === true) {
                        var params = $.extend(button.action.Parameters || {}, par);
                        !params.Columns && (params.Columns = 5);
                        !params.Rows && (params.Rows = 6);
                        var menu = new n$.Menu({
                            id: button.action.MenuId,
                            columns: params.Columns || 5,
                            rows: params.Rows || 6
                        });
                        n$.Popup.FunctionsPad({
                            Caption: (menu.menu && menu.menu.Caption) || "",
                            rows: params.Rows || 6,
                            columns: params.Columns || 5,
                            menu: button.action.MenuId,
                            dataSource: par.dataSource
                        });
                    } else {
                        this.button.submenu.show(this.source, this.grid);
                    };
                    typeof callback === "function" && setTimeout(callback);
                };
            };
            n$.inherit(n$.Workflow.ActionHandler.Menu, n$.Workflow.ActionHandler);

            n$.Workflow.ActionHandler.Back = function (button) {
                n$.Workflow.ActionHandler.call(this, button);
                this.button = button;
                this.cache = true;
            };
            n$.inherit(n$.Workflow.ActionHandler.Back, n$.Workflow.ActionHandler);
            n$.Workflow.ActionHandler.Back.prototype.execute = function (dataSource, callback) {
                this.grid.visible = false;
                this.grid.parentGrid.visible = true;
                typeof callback === "function" && callback();
            };

            n$.Workflow.ActionHandler.KnownWorkflow = function (button, workflowName) {
                n$.Workflow.ActionHandler.call(this, button);

                var name = n$.State.options[workflowName + "Workflow"];
                if (name === "") {
                    this.unknownWorkflow = true;
                    this.unknownWorkflowName = workflowName;
                    return;
                };

                var workflow = coordinator.workflow.known(name);
                var parameters = {};
                $.extend(parameters,
                    button && button.action && button.action.Parameters ? button.action.Parameters : {});
                $.extend(parameters, workflow.Parameters);
                button && button.action && button.action.Code && (parameters[workflowName + "No"] = button.action.Code);

                switch (workflow.engineVersion) {
                    case "2.0":
                        var btn = $.extend({}, button);
                        btn.action.Workflow = $.extend({}, workflow.Workflow);
                        $.extend(btn.action.Parameters, parameters);
                        if (button.action.Content && button.action.Content.Metadata) {
                            btn.metadata = $.extend({}, button.action.Content.Metadata);
                        };
                        this.workflow = new n$.Workflow20.Workflow(btn);
                        this.execute = this.workflow.execute;
                        this.cache = true;
                        this.v2 = true;
                        break;
                    default:
                        this.workflow = new n$.Workflow.Workflow(workflow.Workflow,
                            parameters,
                            button && button.action && button.action.Content ? button.action.Content : {});
                        break;
                }
            };
            n$.inherit(n$.Workflow.ActionHandler.KnownWorkflow, n$.Workflow.ActionHandler);
            n$.Workflow.ActionHandler.KnownWorkflow.prototype.execute = function (dataSource, callback) {
                if (this.unknownWorkflow) {
                    n$.Debug.Workflow.error("An uknown workflow was invoked for the [" +
                        this.unknownWorkflowName +
                        "] action. This indicates a back-end configuration error.");
                    return;
                };
                w$.start(this.workflow, callback);
            };

            n$.Workflow.ActionHandler.Item = function (button) {
                n$.Workflow.ActionHandler.KnownWorkflow.call(this, button, "item");
            };
            n$.inherit(n$.Workflow.ActionHandler.Item, n$.Workflow.ActionHandler.KnownWorkflow);

            n$.Workflow.ActionHandler.Payment = function (button) {
                n$.Workflow.ActionHandler.KnownWorkflow.call(this, button, "payment");
            };
            n$.inherit(n$.Workflow.ActionHandler.Payment, n$.Workflow.ActionHandler.KnownWorkflow);

            n$.Workflow.ActionHandler.Customer = function (button) {
                n$.Workflow.ActionHandler.KnownWorkflow.call(this, button, "customer");
            };
            n$.inherit(n$.Workflow.ActionHandler.Customer, n$.Workflow.ActionHandler.KnownWorkflow);

            n$.Workflow.ActionHandler.Lock = function (button) {
                n$.Workflow.ActionHandler.KnownWorkflow.call(this, button, "lock");
            };
            n$.inherit(n$.Workflow.ActionHandler.Lock, n$.Workflow.ActionHandler.KnownWorkflow);

            n$.Workflow.ActionHandler.Unlock = function (button) {
                n$.Workflow.ActionHandler.KnownWorkflow.call(this, button, "unlock");
            };
            n$.inherit(n$.Workflow.ActionHandler.Unlock, n$.Workflow.ActionHandler.KnownWorkflow);
        })();

        // Data module
        (function () {
            n$.Workflow.initializeDataModule = function (object, property, dataSource) {
                var dataStore = {};
                function getBinder(name) {
                    var f = function (field) {
                        if (!name)
                            return null;

                        if (typeof field !== "string" || field.length === 0)
                            return null;

                        var isTotal = (field[0] === "$" && (field = field.substring(1), true));
                        return isTotal
                            ? dataStore[name].private.totals[field].value
                            : dataStore[name].currentRow.getField(field).value;
                    };
                    f.isEmpty = function () {
                        return dataStore[name].private.rows.length === 0;
                    };
                    return f;
                };

                object[property] = getBinder(dataSource);
                object[property].bind = function (name, key) {
                    dataStore[name] = n$.State.dataStore.getSource(key);
                    object[property][name] = getBinder(name);
                };
                var srcs = n$.State.dataStore.private.sources;
                for (var s in srcs) {
                    if (srcs.hasOwnProperty(s)) {
                        dataStore[s] = srcs[s];
                        object[property][s] = getBinder(s);
                    };
                };
            }
        })();

        window["w$"] = n$.Workflow;
    }).depend("Debug", "Workflow20");

;
n$.addModule("Wysiwyg",
    function () {

    });

window.__allUnhandledErrors = [];
window.__controlAddInError__NAV = window.__controlAddInError;
window.__controlAddInError = function (e) {
    var a = "Unhandled error has occurred: '" + e.message + "' - Stack: " + e.stack;
    window.__allUnhandledErrors.push(a);
    console.log(a);
    window.__controlAddInError__NAV(e);
};
window.__npHideHeader = true;

window.__popLastError = function () {
    alert(window.__allUnhandledErrors.length ? window.__allUnhandledErrors.pop() : ($("#showErrorButton").css("display", "none"), "No more errors."));
};


;
// This is just a playground to try out things. It should be deleted in production
n$.addModule("Sandbox",
    function () {
        function sandbox() {

            // Put the sandbox code here:

            //var toast = new n$.Toast({ caption: "Hello, World!" });
            //toast.show();

            // n$.Capabilities.register(
            //     new n$.Capability("TestCapability",
            //         "__test__",
            //         "Enables sharing of Microsoft Dynamics NAV back-end busy state with the host application.",
            //         {
            //             methods: {
            //                 test: function (entity) {
            //                     return Promise.resolve(`Hello, ${entity}!`);
            //                 }
            //             },
            //             noSupport: {
            //                 test: function(entity) {
            //                     return Promise.reject(`Capability not supported. "${entity}" is ignored.`);
            //                 }
            //             }
            //         }));

            // debugger;
            // n$.Capabilities.TestCapability.test("World").then(msg => console.log(msg)).catch(err => console.warn(err));
            // n$.Capabilities.TestCapability.test("Mercury").then(msg => console.log(msg)).catch(err => console.warn(err));
            // n$.Capabilities.TestCapability.test("Venus").then(msg => console.log(msg)).catch(err => console.warn(err));
            // setTimeout(() => n$.Capabilities.TestCapability.test("Mars").then(msg => console.log(msg)).catch(err => console.warn(err)));
            // setTimeout(() => n$.Capabilities.TestCapability.test("Jupiter").then(msg => console.log(msg)).catch(err => console.warn(err)), 2000);
        };

        n$.ready(function () {
            setTimeout(function () {
                n$.Debug.Framework.log("Starting sandbox code.");

                sandbox();
            }, 2000);
        });
    });

;
n$.addModule("AdministrativeTemplates",
    function () {

        n$.Capabilities.register(new n$.Capability(
            "AdministrativeTemplates",
            "f9049576-59df-4b10-9b2c-24ac0ecad016",
            "Allows configuration of Major Tom functionality using administrative templates.",
            {
                methods: {
                    applyTemplate: function (template) {
                        this.external.applyTemplate(template);
                    }
                }
            }));

        n$.AsyncRequestHandlers.ApplyAdministrativeTemplates = function (req) {
            var package = null;
            switch (req.Content.version) {
                case "1.0":
                    package = {
                        version: "1.0",
                        content: []
                    };
                    req.Content.templates.forEach((policy, index) => {
                        var template = {
                            id: policy.id,
                            persist: policy.persist,
                            strength: policy.strength
                        };
                        delete policy.id;
                        delete policy.persist;
                        delete policy.strength;
                        template.policy = policy;
                        package.content.push(template);
                    });
                    break;
            }
            package && n$.Capabilities.AdministrativeTemplates.applyTemplate(JSON.stringify(package));
        }
    })
    .depend("Capabilities");
;
n$.addModule("CustomizeTop",
    /*
        This module is in charge of applying style changes to the top window.
    */

    function () {
        var style = 
            "<style>" +
            "  .task-dialog {" +
            "    max-width: initial !important;" +
            "  }" +
            "  .task-dialog-content-alignbox {" +
            "    width: 100% !important;" +
            "  }"+
            "</style>";

        $("body", window.top.document).append($(style));
    });
;
n$.addModule("Keyboard",
    function() {
        var bindingsConfigured = false;
        var bindings = {};
        var escHandled = false;
        var eventKeyPress = new n$.Event.Method({ name: "KeyPress" });
        var debugKeyboard = new n$.Debug.Source("Keyboard");

        n$.AsyncRequestHandlers.ConfigureKeyboardBindings = function(req) {
            if (!req.Content || !req.Content.bindings)
                return;

            bindingsConfigured = true;
            bindings = req.Content.bindings;

            [].slice.call(bindings).forEach(function(key) {
                n$.Capabilities.KeyboardBindings.registerKeyPress(key);
            });
        };

        n$.Capabilities.register(new n$.Capability("KeyboardBindings",
            "45179214-e726-4f34-a81c-48677ad3a530",
            "Enables Major Tom to send registered keyboard presses over to JavaScript to pass them onto C/AL.",
            {
                methods: {
                    registerKeyPress: function(keypress) {
                        this.external.registerKeyPress(keypress);
                    },
                    popupActive: function(active) {
                        this.external.popupActive(!!active);
                    },
                    actionActive: function(active) {
                        this.external.actionActive(!!active);
                    },
                    navDialogActive: function(active) {
                        this.external.navDialogActive(!!active);
                    }

                },
                events: {
                    keyPressed: function (keypress) {
                        n$.Keyboard.keyPressed(keypress.key);
                    },
                    escHandled: function () {
                        escHandled = true;
                    }
                }
            }));

        n$.Keyboard = {
            keyPressed: function(which) {
                if (!bindingsConfigured || bindings.indexOf(which) === -1) {
                    debugKeyboard.log("Unconfigured key press: [" + which + "]. Ignoring.");
                    return false;
                };

                debugKeyboard.log("Configured key press: [" + which + "]. Forwarding to NAV.");
                eventKeyPress.raise({ key: which });
                return true;
            }
        };

        n$.ready(function() {

            var keyDown = {};
            document.addEventListener("keydown",
                function(e) {
                    keyDown[e.which] = true;
                });
            document.addEventListener("keyup",
                function(e) {
                    if (keyDown[e.which] === false) {
                        if (e.which === 27) {
                            if (n$.Keyboard.keyPressed("Esc") && !escHandled)
                                e.stopImmediatePropagation();
                            escHandled = false;
                        };
                    };
                    delete keyDown[e.which];
                });
            document.addEventListener("keypress",
                function(e) {
                    keyDown[e.which] = false;
                });
        });

    }).depend("Debug", "FrontEndAsync", "Capabilities");
n$.addModule("Kiosk",
    function () {
        var debug = new n$.Debug.Source("Kiosk");
        var unlockMethod = new n$.Event.Method({ name: "UnlockKiosk" });
        var attempts = 3;

        n$.AsyncRequestHandlers.UnlockKiosk = function (req) {
            if (!req.Content || (req.Content && !req.Content.confirmed)) {
                n$.Popup.dialog({
                    title: "Kiosk Mode",
                    caption: "You have entered an invalid PIN code. You have " + --attempts + " attempts remaining.",
                    style: n$.Enums.DialogStyle.Message
                });
                return;
            };
            n$.Capabilities.Kiosk.disableKiosk();
            n$.Popup.dialog({
                title: "Kiosk Mode",
                caption:
                    "You have successfully disabled the kiosk mode. If you need to re-enable it again, use the configuration page.",
                style: n$.Enums.DialogStyle.Message
            });
        };

        n$.Capabilities.register(new n$.Capability("Kiosk",
            "a7612395-1486-42d7-9814-edd280e6ce92",
            "Manages Kiosk mode for Major Tom",
            {
                methods: {
                    isKiosk: function () {
                        return this.external.isKiosk();
                    },
                    disableKiosk: function () {
                        this.external.disableKiosk();
                    }
                },
                noSupport: {
                    isKiosk: function () {
                        debug.log("Kiosk mode not supported.");
                    },
                    disableKiosk: function () {
                        debug.log("Kiosk mode not supported.");
                    }
                }
            }));



        (function () {
            var down;

            document.addEventListener(
                "mousedown",
                function () {
                    if (!n$.State.options.kioskUnlockEnabled)
                        return;

                    down = setTimeout(function () {
                        if (!down)
                            return;

                        n$.Capabilities.Kiosk.isKiosk().then(kiosk => {
                            if (!kiosk)
                                return;
                                
                            if (!attempts) {
                                n$.Popup.dialog({
                                    title: "Kiosk Mode",
                                    caption: "You have unsuccessfully attempted to disable the kiosk mode three times. You must restart the application before you try disabling it again.",
                                    style: n$.Enums.DialogStyle.Message
                                });
                                return;
                            };

                            n$.Popup.numpad({
                                type: n$.NewEnums.NumpadType.Text,
                                value: "",
                                masked: true,
                                title: "Kiosk Mode",
                                caption: "Please, provide the kiosk unlock PIN code",
                                callback: function (resp) {
                                    if (resp.Cancelled)
                                        return;

                                    unlockMethod.raise({ pin: resp.Text });
                                }
                            });
                        });
                    },
                        10000);
                },
                true);
            document.addEventListener(
                "mouseup",
                function () {
                    if (!n$.State.options.kioskUnlockEnabled)
                        return;

                    clearTimeout(down);
                    down = undefined;
                });
        })(); // Mouse events
    }).depend("Debug", "FrontEndAsync", "Events");

;
n$.addModule("NavKeyHandler",
    function () {
        var container = window.frameElement && window.frameElement.closest("div.spa-container");
        var view = window.frameElement && window.frameElement.closest("div.spa-view");

        if (!container || !view || view.parentElement !== container)
            return;

        var count = container.childElementCount;
        var keyup = null;

        function findLastView() {
            var lastView = view.nextElementSibling;
            while (lastView && lastView.nextElementSibling)
                lastView = lastView.nextElementSibling;
            return lastView;
        }

        function arrowUpDown(direction) {
            var lastView = findLastView();
            if (!lastView)
                return;

            var radio = lastView.querySelectorAll("ul.radiobuttoncontrol-edit > li > input");
            var radioSelection = -1;
            if (radio.length) {
                for (var i = 0; i < radio.length; i++) {
                    if (radio[i].checked) {
                        radioSelection = i;
                        break;
                    }
                }
            }
            if (radioSelection === -1)
                return;

            radioSelection += direction;
            if (radioSelection < 0)
                radioSelection = radio.length - 1;
            if (radioSelection >= radio.length)
                radioSelection = 0;
            radio[radioSelection].click();
            return true;
        }

        function handleKeyUp(e) {
            if (keyup && keyup.key === e.key) {
                e.stopImmediatePropagation();
                keyup.action();
                keyup = null;
            }
        }

        function handleKeyDown(e) {
            var equalCount = container.childElementCount === count;
            n$.Capabilities.KeyboardBindings.navDialogActive(!equalCount);

            if (e.key === "ArrowDown" || e.which === 40) {
                if (arrowUpDown(1))
                    e.stopImmediatePropagation();
                return;
            }

            if (e.key === "ArrowUp" || e.which === 38) {
                if (arrowUpDown(-1))
                    e.stopImmediatePropagation();
                return;
            }

            var isEsc = e.key === "Escape" || e.which === 27;
            if (equalCount || !isEsc)
                return;

            var lastView = findLastView();
            if (!lastView)
                return;

            var buttons = lastView.querySelectorAll(".ms-nav-actionbar-container > input[type='button']:not([disabled])");
            if (!buttons.length)
                buttons = lastView.querySelectorAll(".ms-nav-actionbar-container > button:not([disabled])");
            if (!buttons.length)
                buttons = lastView.querySelectorAll(".ms-nav-actionbar-container > div")
            if (!buttons.length)
                buttons = lastView.querySelectorAll(".ms-nav-navigation .ms-nav-back-container > a");

            if (buttons.length) {
                var button = null;
                var i = buttons.length;
                while (i--) {
                    var style = buttons[i].ownerDocument.defaultView.getComputedStyle(buttons[i]);
                    if (style.display !== "none") {
                        button = buttons[i];
                        break;
                    }
                }
                if (button) {
                    keyup = {
                        key: e.key,
                        action: function () {
                            button.click && typeof button.click === "function" && button.click();
                        }
                    };
                    e.stopImmediatePropagation();
                }
            }
        }

        function bindListener(target) {
            target.addEventListener("keydown", handleKeyDown, true);
            target.addEventListener("keyup", handleKeyUp, true);
        }

        var bound = [
            view.ownerDocument.defaultView,
            view.ownerDocument,
            view.ownerDocument.body,
            window,
            document,
            document.body
        ];
        bound.map(bindListener);
    });

;
n$.addModule("PopupWrapper",
    function () {
    }).depend("Popup");

;
if (typeof $ === "undefined") $ = function() {}; // Keeps ReSharper happy

n$.addModule("ProtocolUI",
    function () {

        var responseEvent = new n$.Event.Method({ name: "ProtocolUIResponse" });

        var models = {};
        var lastModelId = 0;
        var debug = new n$.Debug.Source("ProtocolUI");

        function createModelFrame(modelId, html, css, js) {
            var timerInterval = 0;
            var frame = document.createElement("iframe");
            frame.src = "javascript:''";
            var model =
            {
                modelId: modelId,
                closed: false,
                close: function() {
                    if (timerInterval)
                        frame.contentWindow.clearInterval(timerInterval);
                    model.closed = true;
                },
                respond: function(mid, sender, event) {
                    if (!model.closed) {
                        if (!sender && typeof frame.contentWindow["Timer_" + event] === "number") {
                            timerInterval || (timerInterval = frame.contentWindow["Timer_" + event]);
                            sender = event = "n$_timer";
                        };
                        responseEvent.raise({
                            modelId: mid,
                            sender: sender,
                            event: event || (event === undefined ? "" : event)
                        });
                    } else {
                        debug.log(
                            "Respond was invoked for a model that was previously closed through the np-behavior-close. Ignoring this event, but this indicates a possible refactoring to be needed in the back-end code.");
                    };
                },
                invokeClose: function() {
                    this.respond(modelId, "model", "close");
                },
                respondExplicit: function(sender, event) {
                    this.respond(modelId, sender, event);
                }
            };

            var jq = "";
            $("head > script").each(function(i, script) {
                if ((script.src || "").indexOf("/jquery-") >= 0) {
                    jq += script.outerHTML;
                };
            });

            var frameHtml = "<html><head>" +
                css +
                "<style>body{display:flex;align-items:center;justify-content:center;height: 100%;}</style>" +
                (jq || "") +
                "<script>function $_update(src) { var block = $(src); $('body').append(block); }</script>" +
                "<script>$(document).ready(function() { $('div.np-behavior-close').click(function() { n$.close(); }); });</script>" + 
                "</head><body><div id='controlAddIn'>" +
                html +
                "</div>" +
                js +
                "</body></html>";
            var ctrl = document.getElementById("controlAddIn");
            if (!ctrl)
                return;

            ctrl.appendChild(frame);
            frame.contentWindow.document.open();
            frame.contentWindow.document.write(frameHtml);
            frame.contentWindow.document.close();

            frame.id = "model" + (++lastModelId);

            models[modelId] = {
                frame: $(frame).css({
                    "width": "100%",
                    "height": "100%",
                    "position": "absolute",
                    "top": "0",
                    "left": "0",
                    "margin": "0",
                    "padding": "0",
                    "border": "0"
                }),
                window: frame.contentWindow,
                focusElement: frame
            };
            n$.Focus.request(models[modelId]);

            frame.contentWindow.n$ = model;
        };

        function replacePreTranscendenceEventReference(event, modelId) {
            return event.replace(/n\$\.Framework\.RaiseObjectModelEvent\(/gi,
                "n$.respond('" + modelId + "', ");
        };

        n$.AsyncRequestHandlers.ShowModel = function(req) {
            if (!req.Content)
                return;

            var modelId = req.Content.modelId || "";
            var html = req.Content.html;
            var css = req.Content.css;
            var js = req.Content.script;
            html && (html = replacePreTranscendenceEventReference(html, modelId));
            js && (js = replacePreTranscendenceEventReference(js, modelId));

            createModelFrame(modelId, html, css, js);
        };

        n$.AsyncRequestHandlers.UpdateModel = function (req) {
            if (!req.Content)
                return;

            var modelId = req.Content.modelId;
            var html = req.Content.html;
            var css = req.Content.css;
            var js = req.Content.script;

            if (!modelId) {
                debug.error("UpdateModel request was received without modelId parameter.");
                return;
            };

            var model = models[modelId];
            if (!model) {
                debug.error("UpdateModel request was received for model [" +
                    modelId +
                    "] which was previously closed.");
                return;
            };

            html && (html = replacePreTranscendenceEventReference(html, modelId), model.window["$_update"](html));
            css && model.window["$_update"](css);
            js && model.window["$_update"](js);
        };

        n$.AsyncRequestHandlers.CloseModel = function (req) {
            var modelId = req.Content.modelId || "";
            if (modelId) {
                var model = models[modelId];
                model.frame.remove();
                delete models[modelId];
                setTimeout(function() {
                    n$.Focus.release(model);
                    window.focus();
                });
            };
        };
    }).depend("Debug", "Events", "FrontEndAsync");

;
n$.addModule("Require", function () {
    var debug = new n$.Debug.Source("Require", true);
    var noSupport = false;

    var require = new n$.Event.Method({
        name: "Require",
        noSupport: function () {
            noSupport = true;
            return true;
        }
    });

    var Awaiter = (function () {

        var awaiterId = 0;
        var awaiters = {};

        function Awaiter(type, context, fulfill, reject) {
            this.id = ++awaiterId;
            this.type = type;
            this.context = context;
            this.fulfill = fulfill;
            this.reject = reject;

            this.resolved = false;
            this.callbackReceived = false;
            this.value = undefined;
            this.error = undefined;

            awaiters[this.id] = this;
            Object.seal(this);
        };

        Awaiter.prototype.processCallback = function () {
            if (noSupport) {
                this.reject({ noSupport: true });
                return;
            }

            this.callbackReceived = true;
            if (!this.resolved) {
                debug.warning("Require couldn't resolve [" + JSON.stringify(this.context) + "] against NAV. This indicates that the required resource is not available in NAV.");
                this.reject("Content unresolved in NAV.");
                return;
            };
            if (this.error) {
                debug.warning("Awaiter[" + this.type + ", " + this.id + "] completed with a handled C/AL runtime error: " + this.error);
                this.reject(this.error);
                return;
            };

            this.fulfill(this.value);
        };

        Awaiter.resolve = function (id, value, error) {
            var awaiter = awaiters[id];
            if (!awaiter) {
                debug.error("Attempted to resolve an awaiter with id " + id + ", which either has been resolved already, or has never been registered.");
                return undefined;
            };

            delete awaiters[id];
            awaiter.resolved = true;
            awaiter.value = value;
            error && (awaiter.error = error);

            return awaiter;
        };

        return Awaiter;
    })();

    n$.require = function (type, context) {
        return noSupport
            ? Promise.reject({ noSupport: true })
            : new Promise(function (fulfill, reject) {
                debug.verbose("Requiring " + JSON.stringify(context));
                var awaiter = new Awaiter(type, context, fulfill, reject);
                require.raise(
                    { type: type, context: context, id: awaiter.id },
                    awaiter.processCallback.bind(awaiter)
                );
            });
    };

    n$.AsyncRequestHandlers.RequireResponse = function (req) {
        Awaiter.resolve(req.Content.id, req.Content.value, req.Content.error);
    };

}).depend("Events", "Debug");
;
n$.addModule("FrontEndAsync.SecureMethod",
    function() {
        var secureMethod = new n$.Event.Method({ name: "SecureMethod" });
        var debug = new n$.Debug.Source("SecureMethod");
        var methods = {};
        var serverPasswordInvocationRequests = { id: 0, responses: {} };

        var clientPasswords = [];
        function evaluateClientPassword(context) {
            n$.Popup.numpad({
                title: "Password required",
                caption: "This operation is password-protected. Please enter your password to continue.",
                masked: true,
                value: "",
                type: n$.NewEnums.NumpadType.Text,
                callback: function (result) {
                    if (result.Cancelled)
                        return;

                    if (clientPasswords.indexOf(result.Text) >= 0) {
                        context.success();
                        return;
                    };
                    n$.Popup.error("The password you provided is not valid. You may not execute this operation.");
                }
            });
        };

        function evaluateServerPassword(context) {
            var requestId = ++serverPasswordInvocationRequests.id;
            n$.Popup.numpad({
                title: "Password required",
                caption: "This operation is password-protected. Please enter your password to continue.",
                masked: true,
                value: "",
                type: n$.NewEnums.NumpadType.Text,
                callback: function (result) {
                    if (result.Cancelled)
                        return;

                    secureMethod.raise({
                            action: "validate",
                            method: context.method,
                            password: result.Text,
                            requestId: requestId
                        },
                        function() {
                            if (!serverPasswordInvocationRequests.responses[requestId]) {
                                n$.Popup.error("The server did not respond to the password validation request.");
                                return;
                            };
                            var response = serverPasswordInvocationRequests.responses[requestId];
                            delete serverPasswordInvocationRequests.responses[requestId];
                            if (response.status) {
                                context.success();
                                return;
                            };
                            if (response.skipUi)
                                return;

                            n$.Popup.error(response.reason ||
                                "The password you provided is not valid. You may not execute this operation.");
                        });
                }
            });
        };

        function evaluateHandler(handler) {
            try {
                return eval(handler);
            } catch (e) {
                return function() {
                    alert("Invalid SecureMethod handler implementation. Evaluation failed with error: " + e);
                };
            };
        };

        function SecureMethodContext(method, context, callback) {
            this.invocationContext = context;
            this.method = method;
            this.success = function() {
                callback();
            };
        };

        n$.Security = n$.Security || {};
        n$.Security.evaluateMethod = function(method, context, callback) {
            if (!methods[method]) {
                debug.dontPanic("Secure method [" + method + "] was requested, but it was not registered.");
                return;
            };
            if (!callback || typeof callback !== "function") {
                debug.dontPanic("Secure method [" +
                    method +
                    "] was invoked without a callback function. This is a serious blunder by a developer.",
                    true);
                return;
            };
            methods[method].handler(new SecureMethodContext(method, context, callback));
        };

        n$.AsyncRequestHandlers.ConfigureSecureMethods = function(req) {
            if (!req.Content || !req.Content.methods)
                return;

            var ms = req.Content.methods;
            for (var method in ms) {
                if (ms.hasOwnProperty(method)) {
                    methods[method] = ms[method];
                    switch (methods[method].type) {
                        case 0:
                            methods[method].handler = evaluateHandler(methods[method].handler);
                            break;
                        case 1: // Client-side password
                            methods[method].handler = evaluateClientPassword;
                            break;
                        case 2: // Server-side password
                            methods[method].handler = evaluateServerPassword;
                            break;
                    }
                };
            };
        };

        n$.AsyncRequestHandlers.ConfigureSecureMethodsClientPasswords = function(req) {
            if (!req.Content || !req.Content.passwords)
                return;

            if (typeof req.Content.passwords === "string")
                req.Content.passwords = req.Content.passwords.split(",");

            if (req.Content.passwords instanceof Array) {
                clientPasswords = [];
                req.Content.passwords.forEach(function (pwd) {
                    if (pwd && typeof pwd === "string")
                        clientPasswords.push(pwd);
                });
            };
        };

        n$.AsyncRequestHandlers.ValidateSecureMethodPassword = function (req) {
            if (!req.Content || !req.Content.hasOwnProperty("success") || !req.Content.requestId || typeof req.Content.requestId !== "number")
                return;

            serverPasswordInvocationRequests.responses[req.Content.requestId] = {
                status: req.Content.success,
                reason: req.Content.reason,
                skipUi: req.Content.skipUi
            };
        };

    }).depend("Debug", "FrontEndAsync", "Capabilities");
;
n$.addModule("Stargate",
    function () {
        var contexts = {},
            lastHandle = 0,
            stargateNoSupportWarningGiven;

        function getContext(handle) {
            return contexts[handle];
        };

        function storeContext(context) {
            contexts[++lastHandle] = context;
            return context.handle = lastHandle;
        };

        function clearContext(handle) {
            if (contexts.hasOwnProperty(handle))
                delete contexts[handle];
        };

        function showStargateNoSupportMessage() {
            n$.Workflow.abortAll();
            stargateNoSupportWarningGiven ||
                n$.Popup.dialog({
                    title: "Important Information",
                    caption:
                        "<p>So you have reached a point where your web-based POS talks to your local hardware, like printers, credit card readers or such. " +
                        "But you are in a web browser, and web browsers cannot just talk to hardware. Also, you did not configure any hardware yet.</p>" +
                        "<p>Don't worry, if you install our rich client, such as \"Major Tom\" for Windows, or NP Retail for iOS app, all local hardware functionality will be available to you.</p>",
                    style: n$.Enums.DialogStyle.Error
                });
            stargateNoSupportWarningGiven = true;
        };

        var debug = {
            device: new n$.Debug.Source("Device"),
            stargate: new n$.Debug.Source("Stargate")
        };

        var responseMethod = new n$.Event.Method({ name: "InvokeDeviceResponse" });

        // TODO: the following event should be invokable through the new Events infrastructure of capabilities feature
        n$.Events.Protocol = new n$.Event.Method({
            // this event is invoked only from Major Tom! It has no references in JavaScript, but it doesn't mean it's not used anywhere.
            name: "Protocol",
            processArguments: function (arg) {
                if (typeof arg.contextHandle === "number") {
                    var context = getContext(arg.contextHandle);
                    if (context && typeof context === "object") {
                        arg.action = context.action;
                        arg.step = context.step;
                    };
                };
                return arg;
            },
            callback: function (args) {
                if (args.closeProtocol) {
                    clearContext(args.contextHandle);
                };
                n$.Focus.refocus();
            }
        });

        n$.Capabilities.register(new n$.Capability("Stargate",
            "cc41bfc6-e151-420f-bb96-a30bb4b0b3b6",
            "Enables integration with local hardware devices, such as bluetooth, printers, credit card readers, and similar. This integration is necessary" +
            "to support specific processes, and requires you to use a host application, such as Major Tom, iOS app, or similar. Stargate does not work in" +
            "browser-only scenarios.",
            {
                methods: {
                    invokeProxy: function (envelope, handle) {
                        var result = this.external.invokeProxy(envelope, handle);
                        result.then(() => n$.Focus.refocus());
                        return result;
                    },
                    invokeProxyAsync: function (envelope) {
                        this.external.invokeProxyAsync(envelope);
                        n$.Focus.refocus();
                    },
                    advertise: function (content) {
                        return this.external.advertiseStargatePackages(content);
                    },
                    protocolResponse: function (event, data) {
                        this.external.appGatewayProtocolResponse(event, data);
                    }
                },
                noSupport: {
                    invokeProxy: function () {
                        showStargateNoSupportMessage();
                        return Promise.reject(new Error("Unsupported front-end method: invokeProxy"));
                    },
                    invokeProxyAsync: function () {
                        showStargateNoSupportMessage();
                        return null;
                    },
                    advertise: function () {
                        return Promise.resolve(false);
                    },
                    protocolResponse: function () {
                        showStargateNoSupportMessage();
                        return Promise.reject(new Error("Unsupported front-end method: protocolResponse"));
                    }
                }
            }));

        var invokeDeviceId = 0;
        n$.AsyncRequestHandlers.InvokeDevice = function (req) {
            var invocationId = ++invokeDeviceId;
            var context1 = (req.Content && req.Content.Method ? "Method: " + req.Content.Method : "");
            var context2 = (req.Content.TypeName ? "TypeName " + req.Content.TypeName : "");
            var context = (context1 ? context1 + ", " : "") + context2;
            context && (context = " (" + context + ")");
            var sync = " [" + (req.Content && req.Content.Async ? "a" : "") + "synchronous]";
            debug.device.log("InvokeDevice request received (" + (invocationId) + sync + ")" + context, req);

            function logEnd() {
                debug.device.log("InvokeDevice request completed (" + (invocationId) + ")" + context, req);
            };

            if (req.Content && req.Content.Async) {
                n$.Capabilities.Stargate.invokeProxyAsync(req.Envelope);
                logEnd();
                return;
            };

            var response = {
                stargate: "2.0",
                id: req.Id,
                success: false,
                action: req.Content.Action,
                step: req.Content.Step,
                response: "Proxy not installed."
            };

            n$.Capabilities.Stargate.invokeProxy(
                req.Envelope,
                storeContext(
                    {
                        id: req.Id,
                        action: response.action,
                        step: response.step
                    }
                ))
                .then(resp => {
                    if (resp == null) {
                        debug.device.log("Null response received from proxy. Nothing will be sent back to C/AL");
                        logEnd();
                        return;
                    };
                    response.success = true;
                    response.response = resp;
                    logEnd();
                    responseMethod.raise(response);
                })
                .catch(e => {
                    response.response = e && e.message ? e.message : "Unspecified error occurred";
                    debug.device.warning("Device invocation failed: " + response.response, true);
                });
        };

        n$.AsyncRequestHandlers.StargatePackages = function (req) {
            debug.stargate.log("StargatePackages request received", req);

            n$.Capabilities.Stargate.advertise(req.Content)
                .then(shouldRestart => {
                    if (shouldRestart) {
                        n$.Popup.dialog({
                            title: "Important Information",
                            caption:
                                "<p>There are new version(s) available for some of front-end functionality which you already used during this session. If you continue this session, you may " +
                                "encounter unexpected issues. We recommend that you close your application, and then start it again, to allow the updated features to refresh your client.</p>",
                            style: n$.Enums.DialogStyle.Error
                        });
                    };
                })
                .catch(e => {
                    debug.stargate.warning("Stargate method invocation failed with message: " + e);
                });
        };

        n$.AsyncRequestHandlers.AppGatewayProtocolResponse = function (req) {
            debug.device.log("AppGatewayProtocolResponse request received", req);
            n$.Capabilities.Stargate.protocolResponse(req.Event, req.Data);
        };

    })
    .depend("Capabilities", "Debug", "Events", "Focus", "FrontEndAsync");

n$.addModule("Kiosk",
    function () {
        var debug = new n$.Debug.Source("Toast");

        var currentToasts = {
            find: function() {
                var i = -1;
                while (this[++i]);
                this[i] = true;
                return i;
            },
            close: function(i) {
                delete this[i];
            }
        };

        n$.Toast = function(param) {
            if (!param || typeof param !== "object") {
                debug.warning("Toast specifies invalid param argument.");
                return;
            };

            var me = this;
            var hidden = false;
            var shown = false;
            var caption = param.caption;
            var toastIndex = 0;

            var html = $("<div class=\"toast\"><div class=\"icon\"></div><div class=\"caption\">" +
                caption +
                "</div></div>");

            Object.defineProperty(this,
                "caption",
                {
                    get: function() {
                        return caption;
                    },
                    set: function(val) {
                        if (caption === val)
                            return;
                        caption = val && typeof val === "string" ? val : "";
                        $(".caption", html).text(caption);
                    }
                });

            this.show = function () {
                if (hidden || shown)
                    return this;

                shown = true;

                toastIndex = currentToasts.find();
                html.css("bottom", toastIndex * 96 + "px");
                $("body").append(html);

                setTimeout(function () {
                        if (hidden)
                            return;

                        html.addClass("visible");
                        param.timeout !== 0 &&
                            setTimeout(function() {
                                    me.hide();
                                },
                                param.timeout || 5000);
                    },
                    30);

                return this;
            };

            this.hide = function() {
                if (hidden)
                    return this;

                currentToasts.close(toastIndex);
                hidden = true;
                html.removeClass("visible");
                setTimeout(function() {
                        html.remove();
                    },
                    1000);

                return this;
            };

        };
    }).depend("Debug");

;

n$.addModule("Workflow20", function () {

    var AsyncFunction = Object.getPrototypeOf(async function () { }).constructor;

    var debug = new n$.Debug.Source("Workflow 2.0");
    var globalContext = {};
    var executeCodeCache = {};
    var workflowCache = {};
    var sequences = {};

    function retrieveWorkflow(action) {
        return new Promise((fulfill, reject) => {
            if (typeof workflowCache[action] === "object") {
                fulfill(workflowCache[action]);
                return;
            };

            // TODO: make sure that the action is 2.0 - otherwise throw a big ass error
            n$.require("action", { action: action }).then(

                function (value) {
                    workflowCache[action] = value;
                    fulfill(workflowCache[action]);
                },

                function (value) {
                    value && value.noSupport &&
                        debug.dontPanic("Attempting to run or queue another workflow without back-end support for the Require method.\nYou must upgrade your back end to NPR 5.50.");
                    reject();
                });
        });
    }

    /**
     * Class to manage popup functionality from within a context of a workflow.
     */
    function Popup(coordinator) {

        var inDialog = false;

        /**
         * Wraps a n$.Popup.* callback into another callback to ensure that no two dialogs can ever be run at the same time.
         * @param {function} callback A callback that is being wrapped
         */
        function wrapCallback(callback) {
            if (inDialog) {
                debug.error("You attempted to invoke a popup method before other popup method has resolved. You must structure your action workflow code to properly respond to the async nature of working with promises.", false, true);
                return;
            };

            inDialog = true;

            return function () {
                inDialog = false;
                callback.apply(this, arguments);
            };
        }

        /**
         * Shows a dialog of specified style, with specified title and caption. It returns a promise that resolves when the dialog callback is invoked.
         * @param {object} style Represents the style of the dialog
         * @param {string} title Title to be shown in the title bar
         * @param {string} caption Caption to be shown inside the dialog
         */
        function dialog(style, title, caption) {
            var par = typeof title === "object" ? title : (function () {
                var result = {
                    caption: typeof caption === "string" ? caption : title,
                };
                if (typeof caption === "string")
                    result.title = title;
                return result;
            })();
            par.title = par.title || n$.Enums.DialogStyle.getCaption(style);
            par.style = par.style || style;

            return new Promise(function (fulfill) {
                par.callback = wrapCallback(function (result) {
                    style === n$.Enums.DialogStyle.Confirm
                        ? fulfill(result === n$.Enums.ButtonType.Yes)
                        : fulfill();
                });
                n$.Popup.dialog(par);
            });
        }

        /**
         * Shows a numpad dialog with specified type, title, caption, and value, with input box in indicated masked state, and specified notblank behavior.
         * Returns a promise that is resolved when the dialog is closed (both Ok and Cancel resolve the promise).
         * @param {object} type Type of the dialog (decimal, integer, text, etc.)
         * @param {boolean} masked Indicates whether the input text should be masked (password)
         * @param {string} title Title to be shown in the title bar of the dialog
         * @param {string} caption Caption to be shown inside the numpad dialog (instructions for the user)
         * @param {*} value Value to be pre-filled in the input box (can be of any type, must match the "type" parameter)
         * @param {boolean} notblank Indicates whether the dialog accepts blank input. Notblank dialogs with no input can only be cancelled, not closed with Ok.
         */
        function numpad(type, masked, title, caption, value, notblank) {
            var par = typeof title === "object" ? title : (function () {
                var result = {};
                caption === undefined ? (caption = title) : (result.title = title);
                result.caption = caption;
                value && (result.value = value);
                notblank && (result.notBlank = notblank);
                return result;
            })();
            par.title = par.title || l$.DialogCaption_Confirmation;
            masked && (par.masked = true);
            par.type = type || n$.NewEnums.NumpadType.Decimal;

            return new Promise(function (fulfill) {
                par.callback = wrapCallback(function (result) {
                    fulfill({
                        value: result.Text || 0,
                        ok: !result.Cancelled
                    });
                });
                n$.Popup.numpad(par);
            });
        }

        /**
         * Shows an input dialog with specified title, caption, instruction text, and value, with input box in indicated masked state, and specified notblank behavior.
         * Returns a promise that is resolved when the dialog is closed (both Ok and Cancel resolve the promise).
         * @param {boolean} masked Indicates whether the input text should be masked (password)
         * @param {string} title Title to be shown in the title bar of the dialog
         * @param {string} caption Caption to be shown inside the dialog (instructions for the user)
         * @param {string} caption Caption to be shown inside the dialog (instructions for the user)
         * @param {*} value Value to be pre-filled in the input box
         * @param {boolean} notblank Indicates whether the dialog accepts blank input. Notblank dialogs with no input can only be cancelled, not closed with Ok.
         */
        function input(masked, title, caption, instruction, value, notblank) {
            var par = typeof title === "object" ? title : (function () {
                var result = {};
                caption === undefined ? (caption = title) : (result.title = title);
                result.caption = caption;
                instruction && (result.instruction = instruction);
                value && (result.value = value);
                notblank && (result.notBlank = notblank);
                return result;
            })();
            par.title = par.title || l$.DialogCaption_Confirmation;
            masked && (par.masked = masked);

            return new Promise(function (fulfill) {
                par.callback = wrapCallback(function (result) {
                    fulfill({
                        value: result.Text || "",
                        ok: !result.Cancelled
                    });
                });
                n$.Popup.input(par);
            });
        }

        /**
         * The returned object is assigned to the popup variable in the outside scope and contains wrapper invokers for the functions above.
         * The exception is the calendar function that is fully defined below.
         */

        this.numpad = function (title, caption, value, notblank) {
            var tracker = coordinator.open();
            var promise = numpad(n$.NewEnums.NumpadType.Decimal, false, title, caption, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.intpad = function (title, caption, value, notblank) {
            var tracker = coordinator.open();
            var promise = numpad(n$.NewEnums.NumpadType.Integer, false, title, caption, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.datepad = function (title, caption, value, notblank) {
            var tracker = coordinator.open();
            var promise = numpad(n$.NewEnums.NumpadType.Date, false, title, caption, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.stringpad = function (title, caption, value, notblank) {
            var tracker = coordinator.open();
            var promise = numpad(n$.NewEnums.NumpadType.Text, false, title, caption, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.passwordpad = function (title, caption, value, notblank) {
            var tracker = coordinator.open();
            var promise = numpad(n$.NewEnums.NumpadType.Text, true, title, caption, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.confirm = function (title, caption) {
            var tracker = coordinator.open();
            var promise = dialog(n$.Enums.DialogStyle.Confirm, title, caption);
            promise.then(tracker.resolve);
            return promise;
        };
        this.input = function (title, caption, instruction, value, notblank) {
            var tracker = coordinator.open();
            var promise = input(false, title, caption, instruction, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.password = function (title, caption, instruction, value, notblank) {
            var tracker = coordinator.open();
            var promise = input(true, title, caption, instruction, value, notblank);
            promise.then(tracker.resolve);
            return promise;
        };
        this.message = function (title, caption) {
            var tracker = coordinator.open();
            var promise = dialog(n$.Enums.DialogStyle.Message, title, caption);
            promise.then(tracker.resolve);
            return promise;
        };
        this.error = function (title, caption) {
            var tracker = coordinator.open();
            var promise = dialog(n$.Enums.DialogStyle.Message, title, caption);
            promise.then(tracker.resolve);
            return promise;
        };

        /**
         * Internal functions are not to be used from within workflow code.
         */
        this.internal = {
            /**
             * Internal error, not to be used from within workflow code.
             */
            error: function (title, caption) {
                return dialog(n$.Enums.DialogStyle.Message, title, caption);
            }
        };

        this.calendar = function (title, caption) {
            var tracker;
            var par = typeof title === "object" ? title : (function () {
                var result = {
                    caption: typeof caption === "string" ? caption : title,
                };
                if (typeof caption === "string")
                    result.title = title;
                return result;
            })();
            par.title = par.title || l$.DialogCaption_Confirmation;
            par.data = { dataSource: "BUILTIN_SALELINE" };

            var promise = new Promise(function (fulfill) {
                par.callback = wrapCallback(function (result) {
                    fulfill({
                        value: result,
                        ok: !result.Cancelled
                    });
                });
                tracker = coordinator.open()
                n$.Popup.calendar(par);
            });
            promise.then(tracker.resolve);
            return promise;
        }
    };

    var smokeAndMirrors = {
        counter: 0
    };

    var stargate = {
        run: function (context) {
            return new Promise(function (fulfill, reject) {
                var timeout = typeof context.gateway === "object" ? 6000 : 3000;
                setTimeout(function () {
                    fulfill(smokeAndMirrors.counter++);
                }, timeout);

                if (typeof context.gateway === "object") {
                    var sm = "";
                    var smint = setInterval(function () {
                        context.gateway.response(sm += "a");
                        clearInterval(smint);
                    }, 3000);
                }
            });
        }
    };

    /**
     * Executes the workflow code through evaluation. It is defined in an isolated scope from all other workflow functionality, to prevent  accidental
     * or malicious handling access to internal workflow state information. It does provide access to all global scope, though.
     * @param {object} workflow Represents interface that can be accessed by dynamically execute code through its local scope.
     * @param {string} code Code that will be dynamically executed.
     */
    function executeCode(workflow, code) {
        return new Promise(function (fulfill, reject) {
            var funcPromise = new Promise(function (funcFulfill, funcReject) {

                var func = executeCodeCache[workflow.name];
                if (func) {
                    funcFulfill(func);
                    return;
                };

                var codePromise = new Promise(function (codeFulfill, codeReject) {
                    var script = code.substring(3);
                    code.match(/js\:/gi)
                        ? n$.require("script", { script: script }).then(
                            codeFulfill,
                            function (reason) {
                                codeReject("Script [" + script + "] unavailable due to the following reason: " + reason);
                            }
                        )
                        : codeFulfill(code);
                });

                codePromise
                    .then(function (code) {
                        code = "var $$ = workflow.scope, $param = workflow.scope.param, $captions = workflow.scope.captions, " +
                            "$metadata = workflow.scope.metadata || {}, " +
                            "$view = workflow.scope.view, $session = workflow.scope.session, $transaction = workflow.scope.transaction, " +
                            "$global = workflow.scope.global, $model = workflow.scope.model, $data = workflow.scope.data, $context = workflow.context; " +
                            (code || "");
                        funcFulfill(executeCodeCache[workflow.name] = new AsyncFunction("workflow", "popup", "stargate", code));
                    })
                    .catch(funcReject);

            });

            funcPromise
                .then(async function (func) {
                    try {
                        fulfill(await func(workflow, workflow.popup, stargate));
                    } catch (e) {
                        throw "A JavaScript runtime error occurred while executing the following action workflow code:\n\nThe error message is:\n\n" + e;
                    };
                })
                .catch(function (reason) {
                    debug.dontPanic(reason);
                    debug.warning(reason, true);
                    reject(reason);
                });
        });
    }

    /**
     * Defines isolated scope for all workflow functionality.
     */
    (function () {

        /**
         * Allows awaiting for the entire C/AL call sequence to complete. When an event is raised in C/AL, the InvokeExtensibilityMethod callback
         * can be fired before the actuall call stack has been completed (e.g. in 2017 and earlier, when a modal dialog is shown in C/AL). However,
         * an event promise can only be resolved once the entire call stack is completed. This class tracks the entire call sequence and makes sure
         * that the event promise is resolved only after the entire C/AL call stack completes.
         * @param {function} callback Function to be invoked once the entire C/AL call sequence is completed. This callback internally resolves the NAV event promise.
         */
        function WorkflowCallResponseAwaiter(callback) {
            this.callback = callback;
            this.responseContent = null;
            this.callCompleted = false;
            this.signalReceived = false;
        }

        /**
         * This function makes sure that the entire C/AL call stack is fully processed and that the InvokeExtensibilityMethod callback
         * function have been both invoked and processed. Only after both are processed, this method invokes the tracked callback, which
         * resolves the NAV event promise.
         * @param {WorkflowTracker} tracker Represents the workflow tracker object that represents an individual workflow state
         */
        WorkflowCallResponseAwaiter.prototype.process = function () {
            if (!this.callCompleted || !this.signalReceived)
                return;
            this.callback(this.responseContent);
        }

        /**
         * Invoked when the entire call sequence (C/AL OnAction call stack) has been completed. This is result of C/AL explicitly invoking the 
         * "completeCall" front-end request.
         * This function invokes the "process" method of the WorkflowCallResponseAwaiter object to detect if the entire call stack has been
         * completed.
         * On 2017 and earlier, when there is a modal call in C/AL, this method is invoked after the "completeCall" method.
         * On 2018, this method is alwass invoked first.
         * @param {WorkflowTracker} tracker Represents the workflow tracker object that represents an individual workflow state
         */
        WorkflowCallResponseAwaiter.prototype.respond = function (content) {
            this.signalReceived = true;
            this.responseContent = content;
            this.process();
        }

        /**
         * Invoked from the InvokeExtensibilityMethod callback to indicate that the C/AL event invocation has completed. This does not
         * indicate that the entire call sequence (C/AL OnAction call stack) has been completed.
         * This function invokes the "process" method of the WorkflowCallResponseAwaiter object to detect if the entire call stack has been
         * completed.
         * On 2017 and earlier, when there is a modal call in C/AL, this method is invoked before the "respond" method.
         * On 2018, this method is always invoked last.
         */
        WorkflowCallResponseAwaiter.prototype.completeCall = function () {
            this.callCompleted = true;
            this.process();
        }

        /**
         * Contains C/AL event interface that allows invoking events in NAV
         * @param {WorkflowTracker} tracker Represents the workflow tracker object that represents an individual workflow state
         */
        function Events(tracker) {
            this.tracker = tracker;

            this.actionId = 0;
            this.respond = new n$.Event.Method({ name: "OnAction20" });
            this.before = new n$.Event.Method({ name: "BeforeWorkflow" });
            this.complete = new n$.Event.Method({ name: "CompleteWorkflow" });
            this.fail = new n$.Event.Method({ name: "FailWorkflow" });
        }

        /**
         * Internally invoked from the "respond" method
         * Invokes the OnAction event in C/AL. Returns a promise that resolves when the entire OnAction call sequence has been fully
         * processed. This allows promise chaining in workflow JavaScript code, so that after
         * @param {} step blabla
         * @param {object} context blabla
         */
        Events.prototype.action = function (step, context) {
            var me = this;
            context = (typeof context === "object" && context) || {};
            context.workflowEngine = "2.0";

            return new Promise(function (fulfill, reject) {
                var awaiter = me.tracker.awaitResponse(++me.actionId, function (content) {
                    if (content && content.error) {
                        reject(content.error);
                        return;
                    }
                    fulfill(me.tracker.workflowResponse);
                });
                me.respond.raise(
                    [
                        me.tracker.name,
                        step || "",
                        me.tracker.id,
                        me.actionId,
                        context
                    ],
                    function () {
                        awaiter.completeCall();
                    });
            });
        }

        /**
         * Class that contains functionality to handle parameters defined on the acttion menu button in NAV.
         * @param {object} params Contains the Parameters collection passed from C/AL with the action configuration
         */
        function Parameters(parameters) {
            var params = $.extend({}, parameters);
            // First pass, takes care of all _option_ parameters
            for (var o in params) {
                if (params.hasOwnProperty(o) && o.lastIndexOf("_option_") === 0) {
                    var option = o.substring(8);

                    // Define it as an instance of Number object so we can expand it with option-like properties
                    this[option] = new Number(params[option]);

                    // Attaching option-like properties, this allows for syntax like (param.color == param.color.red), however not (param.color === param.color.red!)!!
                    for (var v in params[o]) {
                        if (params[o].hasOwnProperty(v)) {
                            this[option][v] = params[o][v];
                        };
                    };
                    delete params[o];
                };
            };

            // Second pass, takes care of all other parameters, except for option parameters defined in the previous pass
            for (var o in params) {
                if (params.hasOwnProperty(o) && !this[o]) {
                    this[o] = params[o];
                };
            };
        }

        /**
         * Defines isolated scope for the workflow engine functionality. Workflow engine takes care of: spawning new workflows, managing
         * workflow lifecycle, ending workflows, keeping track of active workflows, making sure the workflow states are consistent, etc.
         */
        var engine = (function () {
            var id = 0;
            var workflowTrackers = {};

            /**
             * Class that keeps track of an individual running instance of workflow code (code defined inside a C/AL action codeunit).
             * It is in charge of handling the workflow promise object (fulfilling, rejecting), and managing the workflow's lifecycle.
             * @param {string} name Action name (from C/AL action codeunit)
             * @param {number} id Unique identifier of the workflow object
             * @param {boolean} nested Indicates whether the workflow is nested (invoked from another running workflow)
             */
            function WorkflowTracker(name, parent) {
                this.name = name;
                this.id = ++id;
                this.nested = !!parent;
                this.children = [];

                workflowTrackers[this.id] = this;

                if (parent)
                    parent.children.push(this);

                // States
                this.aborted = false;
                this.ended = false;
                this.fulfilled = false;
                this.rejected = false;
                this.settled = false;

                // Counters
                var responds = new CounterAwaiter();
                var popups = new CounterAwaiter();
                this.getResponder = responds.start;
                this.getPopup = popups.start;
                this.awaitAll = () => Promise.all([responds.await(), popups.await()])

                // NAV Events
                this.nav = new Events(this);
            }

            /**
             * Marks the workflow promise state as fulfilled and settled. Fires the "fulfill" event and ends the workflow lifecycle tracking in
             * the workflow engine.
             * This method is invoked when the workflow promise resolves as fulfilled.
             */
            WorkflowTracker.prototype.fulfill = function () {
                this.fulfilled = true;
                this.settled = true;
                this.invokeEvent("fulfill");
                engine.end(this);
            }

            /**
             * Marks the workflow promise state as rejected and settled. Fires the "reject" event and ends the workflow lifecycle tracking in
             * the workflow engine.
             * This method is invoked when the workflow promise resolves as rejected.
             */
            WorkflowTracker.prototype.reject = function () {
                this.rejected = true;
                this.settled = true;
                this.invokeEvent("reject");
                engine.end(this);
            }

            /**
             * Aborts the current workflow. Fires the "abort" event and ends the workflow lifecycle in the workflow engine.
             */
            WorkflowTracker.prototype.abort = function () {
                this.children.forEach(function (child) {
                    child.abort();
                });

                this.aborted = true;
                this.invokeEvent("abort");
                engine.end(this);
            }

            /**
             * Invokes an event on an WorkflowTracker object instance by invoking all handler callbacks bound to the specified event.
             * @param {string} event Name of the event to invoke
             * @param {*} content Content to be passed to event listeners
             * @returns {boolean} Indicates whether any event listeners were invoked
             */
            WorkflowTracker.prototype.invokeEvent = function (event, content) {
                var invoked = false;
                this.events && this.events[event] &&
                    this.events[event].forEach(function (listener) {
                        listener(content);
                        invoked = true;
                    });
                return invoked;
            }

            /**
             * Binds a callback handler to the specified event.
             * @param {string} event Name of the event to bind an event listener to
             * @param {function} handler Callback to be invoked when the event is invoked
             */
            WorkflowTracker.prototype.addEventListener = function (event, handler) {
                if (typeof handler !== "function" || typeof event !== "string") {
                    console.error("Invoking 'addEventListener' with incorrect argument types: " + (typeof event) + ", " + (typeof handler));
                    return;
                };
                this.events = this.events || {};
                this.events[event] = this.events[event] || [];
                this.events[event].push(handler);
            }

            /**
             * Removes a callback handler from the specified event. For a hancler to be successfully removed, it must have been earlier added with addEventListener.
             * @param {string} event Name of the event to bind an event listener to
             * @param {function} handler Callback to be invoked when the event is invoked
             * @returns {boolean} Indicates whether the event listener was successfully removed.
             */
            WorkflowTracker.prototype.removeEventListener = function (event, handler) {
                function removeHandler() {
                    for (var i = 0; i < this.events[event].length; i++) {
                        if (this.events[event][i] === handler) {
                            this.events[event].splice(i, 1);
                            return true;
                        }
                    }
                }

                if (typeof handler !== "function" || typeof event !== "string") {
                    console.error("Invoking 'removeEventListener' with incorrect argument types: " + (typeof event) + ", " + (typeof handler));
                    return false;
                }
                if (!this.events || !this.events[event] || !removeHandler()) {
                    console.error("Invoking 'removeEventListener' for an event listener that wasn't added earlier, or was already removed.");
                    return false
                }
            }

            /**
             * Registers a response awaiter (instance of {@link WorkflowCallResponseAwaiter}) for an invocation of a C/AL event.
             *
             * @param {number} id Unique Id if an individual invocation. It starts from 1 and is increased by 1 for each consecutive invocation
             * @param {function} callback Callback that is invoked when the awaited C/AL event receives its callback
             * @returns Instance of {@link WorkflowCallResponseAwaiter} object
             */
            WorkflowTracker.prototype.awaitResponse = function (id, callback) {
                this.awaiters = this.awaiters || {};
                return this.awaiters[id] = new WorkflowCallResponseAwaiter(callback);
            }

            /**
             * Processes the end-of-sequence (end of C/AL call stack) message from the C/AL after the C/AL OnAction call stack has been processed for a workflow.
             * @param {object} content Represents workflow identification content (workflow and action id)
             */
            WorkflowTracker.prototype.receiveResponse = function (content) {
                var awaiter = this.awaiters && this.awaiters[content.actionId];
                if (!awaiter) {
                    // TODO: throw a big-ass error
                    return;
                }
                awaiter.respond(content);
                this.invokeEvent("callCompleted", content.context);
            }

            WorkflowTracker.prototype.storeWorkflowResponse = function (value) {
                this.workflowResponse = value;
            };

            WorkflowTracker.prototype.storeQueuedWorkflows = function (queues) {
                this.queuedWorkflows = queues;
            }

            /**
             * The core engine object. Includes methods to manage workflows.
             */
            var engine = {

                /**
                 * Starts a new workflow, first making sure that there are no other workflows are running. If there are other
                 * workflows running, they are aborted.
                 * @param {string} name Name of a workflow action (as declared in the Action codeunit in C/AL)
                 * @param {object} parent Indicates the parent of the workflow in nested/queued scenarios
                 * @returns {object} An instance of {@link WorkflowTracker} that keeps track of the workflow lifecycle.
                 */
                start: function (name, parent) {
                    if (!parent) {
                        globalContext = {};
                    };
                    return new WorkflowTracker(name, parent);
                },

                /**
                 * Ends a running workflow if it hasn't been ended already. It removes its tracker from the list of tracked workflows.
                 * This function is invoked by workflow trackers when workflow promises are fulfilled or rejected, or when a workflow
                 * is explicitly aborted. Invoking this function represents the end of a workflow lifecycle.
                 * @param {object} tracker Instance of {@link WorkflowTracker} that should be ended.
                 */
                end: function (tracker) {
                    if (!tracker.ended) {
                        tracker.ended = true;
                        delete workflowTrackers[tracker.id];
                    }
                },

                /**
                 * Retrieves the workflow tracker identified by the "content" object and invokes its receiveResponse method.
                 * Invoked after the entire OnAction call stack has been completed by C/AL.
                 * @param {object} content Workflow identification context (workflow and action ids)
                 */
                completeCall: function (content) {
                    var tracker = workflowTrackers[content.id];
                    if (!tracker) {
                        // TODO: throw a big-ass error here!
                        return;
                    }
                    if (content.hasOwnProperty("workflowResponse"))
                        tracker.storeWorkflowResponse(content.workflowResponse);
                    if (content.hasOwnProperty("queuedWorkflows"))
                        tracker.storeQueuedWorkflows(content.queuedWorkflows);

                    tracker.receiveResponse(content);
                }
            }

            return engine;
        })();

        /**
         * "Solidifies" an object by creating an object instance which has all the properties of the original object, except that they are non-configurable
         * and non-writeable for all object and function properties. This allows an object to be safe from accidental or malicious rewrite attempts of its
         * original interface functionality (methods, objects).
         * It also prevents expanding the object with new properties, preventing accidental cross-call inconsistencies.
         * @param {object} obj Instance of an object to "solidify"
         */
        function SolidObject(obj) {
            var props = [];

            for (var prop in obj) {
                if (obj.hasOwnProperty(prop))
                    props.push(prop);
            }

            var me = this;
            var newobj = {};
            props.forEach(function (prop) {
                if (typeof obj[prop] === "function") {
                    newobj[prop] = {
                        value: function () {
                            return obj[prop].apply(me, arguments);
                        }
                    }
                    return;
                }
                if (typeof obj[prop] === "object") {
                    newobj[prop] = {
                        get: function () {
                            return obj[prop];
                        }
                    }
                    return;
                }
                newobj[prop] = {
                    get: function () {
                        return obj[prop];
                    },
                    set: function (value) {
                        obj[prop] = value;
                    }
                }
            });

            Object.defineProperties(this, newobj);
            Object.preventExtensions(this);
        }

        /**
         * Class that keeps track of specific events and allows resolving an awaited promise only
         * when the count of active unresolved events reaches zero.
         * For example, it can keep track of open popups and only resolves when all popups are closed.
         */
        function CounterAwaiter() {
            var i = 0;
            var count = 0;
            var resolver = null;
            var awaiters = [];

            this.start = function () {
                return (i++ , count++ , awaiters[i] = {
                    id: i,
                    resolve: function () {
                        delete awaiters[this.id];
                        --count === 0 && typeof resolver === "function" && resolver();
                    }
                });
            };

            this.await = function () {
                return new Promise(function (fulfill) {
                    if (count === 0)
                        fulfill();
                    else
                        resolver = fulfill;
                });
            }
        };

        const operationErrorMessages = {
            popup: "Attempting to show a popup in the context of a completed workflow.",
            complete: "Attempting to complete a workflow that has already been completed.",
            respond: "Attempting to invoke NAV from a workflow that has been completed earlier.",
            fail: "Attempting to fail a workflow that has already been either completed or failed.",
            run: "Attempting to nest a workflow in the context of a completed workflow.",
            queue: "Attempting to queue a workflow in the context of a completely processed workflow. Queue your workflow before calling workflow.complete()."
        };

        /**
         * Class that contains WorkflowInterface object that's used by the workflow code through the built-in variable "workflow" that allows the 
         * workflow code to communicate with the workflow functionality (completing, failing, responding to C/AL) and access workflow state.
         * @param {object} interface Inline object containing references necessary for constructing the WorkflowInterface instance
         */
        function WorkflowInterface(interface) {
            var done = false;
            var keptAlive = false;
            var fail = false;
            var queue = [];
            var queueProcessed = false;
            var popup = new Popup(
                {
                    open: () => {
                        makeSureNotDone("popup");
                        return interface.tracker.getPopup();
                    }
                });

            function processQueue() {
                queueProcessed = true;
                return new Promise(function (fulfill, reject) {
                    if (queue.length === 0) {
                        fulfill();
                        return;
                    };

                    function processNext() {
                        var next = queue.shift();
                        getNestedWorkflowPromise(next.action, next.context).then(
                            function () {
                                queue.length === 0 ? fulfill() : processNext();
                            },
                            reject);
                    };

                    processNext();
                });
            };

            /**
             * Indicates whether the workflow has been fully completed, which can be either successfully or unsuccessfuly.
             * A completed workflow does not allow:
             * - completing
             * - failing
             * - showing popups
             * - responding to NAV
             */
            Object.defineProperty(this, "done", {
                get: function () {
                    return done
                }
            });

            Object.defineProperty(this, "keptAlive", {
                get: function () {
                    return keptAlive;
                }
            });

            Object.defineProperty(this, "popup", {
                value: popup,
                configurable: false,
                writable: false
            });

            function makeSureNotDone(operation) {
                if (!done)
                    return;

                fail = true;
                interface.reject("Workflow is already done.");
                debug.error(operationErrorMessages[operation] + "\nRestructure your code to call workflow.complete() only after all of the work inside the workflow has been completed, and make sure to call it only once.\nOnce you call workflow.complete(), or workflow.fail(), you must not call anything else.");
            };

            function getNestedWorkflowPromise(action, context) {
                return new Promise(function (fulfill, reject) {
                    (typeof context !== "object" || !context) && (context = {});
                    const runWorkflow = w => {
                        const workflow = { action: $.extend(true, {}, w) };
                        if (context.context)
                            workflow.context = context.context;

                        if (context.param && workflow.action.Parameters) {
                            for (var p in context.param) {
                                if (context.param.hasOwnProperty(p) && workflow.action.Parameters.hasOwnProperty(p)) {
                                    var options = workflow.action.Parameters["_option_" + p];
                                    if (options) {
                                        if (options.hasOwnProperty(context.param[p])) {
                                            workflow.action.Parameters[p] = options[context.param[p]];
                                        } else {
                                            // TODO: big-ass warning in the log here! non-existing option specified
                                            debugger;
                                        }
                                    } else {
                                        if (typeof workflow.action.Parameters[p] === typeof context.param[p]) {
                                            workflow.action.Parameters[p] = context.param[p];
                                        } else {
                                            // TODO: big-ass warning in the log here! not the same type of parameter, and they must be the same type!
                                            debugger;
                                        }
                                    };
                                } else {
                                    // TODO: big-ass warning: non-existing parameter specified
                                    debugger;
                                };
                            };
                        };

                        var nested = new n$.Workflow20.Workflow(workflow, interface.tracker);
                        nested.execute().then(
                            fulfill,
                            function (reason) {
                                reject(reason);
                                interface.reject(reason);
                            });
                    };

                    retrieveWorkflow(action)
                        .then(workflow => runWorkflow(workflow))
                        .catch(reason => reject(reason));
                });
            };

            /**
             * Completes the currently executing workflow. This method represents an end of the managed workflow lifecycle from the perspective of
             * the action workflow code.
             * While there may still be JavaScript code running after this, that code must not interact with the "workflow" object.
             */
            this.complete = function (context) {
                makeSureNotDone("complete");
                done = true;

                interface.tracker.awaitAll().then(() => {
                    processQueue().then(
                        () => {
                            interface.error || fail
                                ? interface.reject(interface.error ? interface.error.message : "Failing because of invalid flow")
                                : interface.fulfill(context);
                        },

                        () => interface.reject("Queue processing failed.")
                    );
                });
            }.bind(this);

            /**
             * Completes the currently executing workflow by failing it. This method represents an end of the managed workflow lifecycle from the
             *  perspective of the action workflow code.
             * While there may still be JavaScript code running after this, that code must not interact with the "workflow" object.
             * @param {*} reason Indicates the reason for failing the workflow.
             */
            this.fail = function (reason) {
                makeSureNotDone("fail");

                debug.warning("Failing workflow id [" + interface.tracker.id + "]" + ((typeof reason === "string" && " due to: " + reason) || ""));
                done = true;
                interface.reject(reason);
            }.bind(this);

            /**
             * Marks this workflow to stay alive, which means that it won't be automatically completed after its async function execution completes.
             * A workflow kept alive indicates that the workflow promise remains unresolved until the workflow code manually invokes the
             * workflow.complete() function.
             * Keeping alive a workflow that has already completed will have no effect.
             */
            this.keepAlive = function () {
                keptAlive = true;
            }.bind(this);

            /**
             * Invokes the OnAction event in C/AL. It indicates the optional step name and passes optional context object to C/AL.
             * @param {string} [step] Workflow step, for the purpose of structuring OnAction code in C/AL
             * @param {object} [context] Context to be passed to C/AL (on top of already existing context)
             * @returns {object} Promise that resolves when the entire C/AL call stack has been completed
             */
            this.respond = function (step, context) {
                makeSureNotDone("respond");

                var sendContext = {};
                $.copyObject(sendContext, this.context || {});
                context = typeof context === "object" && context || {};
                $.copyObject(sendContext, context);
                n$.State.dataStore instanceof n$.Data.DataStore && (sendContext.data = n$.State.dataStore.getState());
                sendContext.parameters = this.scope.param;
                sendContext.workflowId = interface.tracker.id;

                var responder = interface.tracker.getResponder();
                var eventPromise = interface.tracker.nav.action(typeof step === "string" && step || "", sendContext);
                eventPromise
                    .then(responder.resolve)
                    .catch(function (error) {
                        interface.error = error;
                        error.silent ||
                            popup.internal
                                .error(error.message)
                                .then(responder.resolve);
                    });
                return eventPromise;
            }.bind(this);

            this.queue = function (action, context) {
                queueProcessed && debug.error(operationErrorMessages("queue"));
                queue.push({ action: action, context: context });
            }.bind(this);

            this.run = function (action, context) {
                makeSureNotDone("run");
                return getNestedWorkflowPromise(action, context);
            }.bind(this);

            Object.defineProperty(this, "context", {
                value: interface.context
            });

            Object.defineProperty(this, "name", {
                get: function () {
                    return interface.name
                }
            });

            var params = new Parameters(interface.parameters);
            var model = {};
            var data = {};
            n$.Workflow.initializeDataModule(data, "data", interface.dataSource);
            n$.State.bindObject(model);

            this.scope = new SolidObject({
                param: params,
                metadata: interface.metadata,
                labels: l$.Actions[interface.name],
                captions: l$.Actions[interface.name],
                view: n$.View.viewStat,
                transaction: n$.Workflow.transactionTemp,
                session: n$.Workflow.sessionTemp,
                global: globalContext,
                model: model,
                data: data.data
            });

            Object.seal(this);

            var me = this;
            interface.tracker.addEventListener("callCompleted", function (context) {
                for (var prop in context) {
                    if (context.hasOwnProperty(prop)) {
                        var arr = prop.split(".");
                        if (arr.length === 1) {
                            me.context[prop] = context[prop];
                        } else {
                            switch (arr[0]) {
                                case "transaction":
                                    me.scope.transaction[prop] = context[prop];
                                    break;
                                case "session":
                                    me.scope.session[prop] = context[prop];
                                    break;
                                case "global":
                                    me.scope.global[prop] = context[prop];
                                    break;
                            }
                        }
                    }
                }

                if (interface.tracker.queuedWorkflows) {
                    interface.tracker.queuedWorkflows.forEach(function (queue) {
                        var parts = queue.split(";", 2);
                        try {
                            me.queue(parts[0], parts[1] ? JSON.parse(parts[1]) : {})
                        } catch (e) {
                            debug.warning("Invalid queue context for " + parts[0] + ": " + parts[1]);
                        }
                    });
                }
            });
        };

        n$.Workflow20 = {
            /**
             * Class that represents the entry point into the workflow engine. It is in charge of creating the promise object for the
             * workflow, that is in charge of synchronizing workflow execution in the workflow engine.
             * @param {object} button The button object that was clicked to invoke the workflow
             */
            Workflow: function (button, parent) {
                const workflowDefinition = button.action.Workflow;
                const parameters = button.action.Parameters;
                const metadata = button.metadata;
                const context = button.context || {};
                const me = this;
                const thisSequences = sequences[workflowDefinition.Name];
                const before = thisSequences && thisSequences.before;
                const after = thisSequences && thisSequences.after;

                /**
                 * Executes the workflow code.
                 */
                this.execute = function (dataSource, completionCallback) {
                    const factory = () => {
                        var tracker = engine.start(workflowDefinition.Name, parent);
                        var promise = new Promise(function (fulfill, reject) {
                            const workflow = new WorkflowInterface(
                                {
                                    name: workflowDefinition.Name,
                                    fulfill: fulfill,
                                    reject: reject,
                                    tracker: tracker,
                                    parameters: parameters,
                                    metadata: metadata,
                                    context: context,
                                    dataSource: me.source && me.source.__dataSource
                                });

                            const execute = () =>
                                executeCode(workflow, workflowDefinition.Steps[0].Code)
                                    .then(function (result) {
                                        if (!workflow.keptAlive)
                                            workflow.complete(result);
                                    })
                                    .catch(function () {
                                        reject();
                                    });

                            execute();
                        });
                        promise.then(
                            function () {
                                const complete = () => {
                                    tracker.fulfill();
                                    typeof completionCallback === "function" && completionCallback();
                                };

                                if (after) {
                                    const queue = Array.from(after);
                                    queue.sort((left, right) => {
                                        if (left.priority < right.priority)
                                            return -1;
                                        if (left.priority > right.priority)
                                            return 1;
                                        return 0;
                                    });

                                    if (queue.length === 0) {
                                        complete();
                                        return;
                                    }

                                    function processNext() {
                                        if (queue.length === 0) {
                                            complete();
                                            return;
                                        }
        
                                        const next = queue.shift();
                                        retrieveWorkflow(next.action)
                                            .then(
                                                wkf => {
                                                    const workflow = new n$.Workflow20.Workflow({ action: $.extend(true, {}, wkf) });
                                                    workflow
                                                        .execute()
                                                        .then(processNext, processNext)
                                                },
                                                () => processNext());
                                    };
        
                                    processNext();        
                                } else {
                                    complete();
                                }
                            },

                            function (reason) {
                                tracker.reject(reason);
                                typeof completionCallback === "function" && completionCallback();
                            });
                        return promise;
                    };

                    if (before) {
                        return new Promise((fulfill, reject) => {
                            const queue = Array.from(before);
                            queue.sort((left, right) => {
                                if (left.priority < right.priority)
                                    return -1;
                                if (left.priority > right.priority)
                                    return 1;
                                return 0;
                            });
                            if (queue.length === 0) {
                                factory().then(fulfill, reject);
                                return;
                            };

                            function processNext() {
                                if (queue.length === 0) {
                                    factory().then(fulfill, reject);
                                    return;
                                }

                                const next = queue.shift();
                                retrieveWorkflow(next.action)
                                    .then(
                                        wkf => {
                                            const workflow = new n$.Workflow20.Workflow({ action: $.extend(true, {}, wkf) });
                                            workflow
                                                .execute()
                                                .then(processNext, reject)
                                        },
                                        () => reject());
                            };

                            processNext();
                        });
                    } else {
                        return factory();
                    }
                };
            },

            /**
             * Called by the FrontEndAsync runtime when C/AL completes a workflow OnAction call stack to indicate completion of the C/AL cycle
             * @param {object} content Represents workflow identification content (workflow and action id)
             */
            callCompleted: function (content) {
                engine.completeCall(content);
            },

            /**
             * Stores action sequence definitions
             * @param {Object} seq Object containing action sequences definitions
             */
            storeActionSequences(seq) {
                sequences = seq;
            },

            storeMethodWorkflows(content) {
                methodWorkflows = Object.assign({}, content);
            }
        }
    })();
}).depend("Events", "Debug");

;
n$.addModule("Wysiwyg",
    function() {

        var backEndMethod = new n$.Event.Method({ name: "Wysiwyg" });
        var debug = new n$.Debug.Source("Wysiwyg");
        var requestId = 0;
        var pendingRequests = {};

        var save$;
        var saveShown;
        var correct = true;
        var changes = [];
        var wrong = [];
        var deleted = [];

        function showAutoClosingDialog(dlg) {
            if (!dlg || !(dlg instanceof n$.Popup.Base))
                return;

            n$.State.wysiwyg.onClose(function() {
                dlg && dlg.hide();
            });
        };

        n$.AsyncRequestHandlers.WysiwygResponse = function(req) {
            if (!req.Content)
                return;

            pendingRequests[req.Content.requestId](req.Content);
            delete pendingRequests[req.Content.requestId];
        };

        var model = {
            respond: function(method, params, func) {
                params.method = method;
                params.requestId = ++requestId;
                pendingRequests[requestId] = func;
                backEndMethod.raise(params);
            }
        };

        n$.InputFilter.commands.register({
            name: "What-You-See-Is-What-You-Get UI Editor",
            description:
                "Switches to the WYSIWYG view which allows you to customize your current view.",

            execute: function() {
                var w$;
                var p$;
                var suspendCapture = false;

                var activeElement = null;

                changes = [];

                function defaultPropertyBlock() {
                    p$.empty();
                    p$.append(
                        "<div class=\"\">Select a control you want to edit, and you'll see its properties here.</div>");
                    n$.UI.currentView.viewCode &&
                        p$.append("Editing view: " + n$.UI.currentView.viewCode);
                };

                function getPropertyName(text) {
                    var result = text.replace(/([A-Z])/g, " $1");
                    return result.charAt(0).toUpperCase() + result.slice(1);
                };

                function removeActiveElement() {
                    if (activeElement) {
                        activeElement.obj
                            .removeClass("wysiwyg-active")
                            .removeAttr("draggable");
                    };
                    defaultPropertyBlock();
                };

                function getEditorGroupTableHtml(group, extended, tfoot) {
                    return "<table><thead><tr class=\"group\"><td colspan=\"2\">" +
                        group +
                        (extended ? " Extended" : "") +
                        " Properties</td></tr>" +
                        "<tbody></tbody>" +
                        (tfoot ? "<tfoot><tr><td/></tr></tfoot>" : "") +
                        "</table>";
                };

                function setActiveElement(e) {
                    var cancelActivation = false;
                    setTimeout(function() {
                        if (cancelActivation)
                            return;

                        activeElement = { obj: $(e) };
                        activeElement.obj.addClass("wysiwyg-active");
                    });

                    var extended = [];
                    if (typeof e.n$.control.wysiwyg === "function" || e.n$.control.wysiwygCached) {
                        p$.empty();
                        var thisWysiwyg = e.n$.control.wysiwygCached ||
                            e.n$.control.wysiwyg(e.n$.par,
                                {
                                    update: updateScratchpad
                                });
                        if (thisWysiwyg.interface &&  typeof thisWysiwyg.interface.canEdit === "function" && !thisWysiwyg.interface.canEdit()) {
                            typeof e.n$.control.click === "function" && e.n$.control.click();
                            cancelActivation = true;
                            return;
                        };

                        e.n$.control.wysiwygCached =
                            thisWysiwyg; // TODO: store references to wysiwyg object, remove tham after close

                        if (thisWysiwyg.interface && thisWysiwyg.interface.dragDrop) {
                            e.n$.control.html
                                .attr("draggable", true)
                                .on("dragstart", thisWysiwyg.interface.dragDrop.dragStart)
                                .on("dragend", thisWysiwyg.interface.dragDrop.dragEnd);
                        };

                        p$.append("<h1>Control: " + thisWysiwyg.type + "</h1>");
                        var t$ = p$.append("<div class=\"editor\">" +
                            getEditorGroupTableHtml(thisWysiwyg.type, false, false) +
                            "</div><table class=\"actions\"><tfoot><tr><td></td></tr></tfoot></table>");
                        var e$ = t$.find("div.editor");
                        var tb$ = t$.find("tbody");
                        var tfoot$ = t$.find("table.actions > tfoot > tr > td");

                        function setProp(prop, properties, body, inGroup) {
                            var tr$ = $("<tr><td>" + getPropertyName(prop) + "</td><td class=\"value\"></td></tr>");
                            body.append(tr$);
                            var tvalue$ = tr$.find("td.value");
                            var propEditor = getPropEditor(prop,
                                properties,
                                typeof properties[prop] === "object",
                                inGroup);
                            if (thisWysiwyg.requestRegistration && thisWysiwyg.requestRegistration[prop]) {
                                thisWysiwyg.registerControl(prop, propEditor);
                            };
                            tvalue$.append(propEditor);
                            propEditor.custom && tvalue$.addClass("custom-lookup");
                            if (typeof propEditor.change === "function" && !propEditor.n$_noEdit) {
                                propEditor.change(function() {
                                    updateScratchpad(e.n$.control, prop, propEditor.val(), thisWysiwyg);
                                });
                            };
                            return tr$;
                        };

                        var editorInterface = {
                            resetSelection: removeActiveElement
                        };

                        function setActions(actions, foot) {
                            actions.forEach(function(action) {
                                var act$ = $("<input type=\"button\" value = \"" + action.caption + "\">")
                                    .click(function() {
                                        try {
                                            suspendCapture = true;
                                            action.execute(editorInterface);
                                        } catch (err) {

                                        }
                                        suspendCapture = false;
                                    });
                                foot.append(act$);
                            });
                        };

                        function getPropEditor(p, properties, isObject, inGroup) {
                            function propertyEdited() {
                                isObject ? properties[p].value = $(this).val() : properties[p] = $(this).val();
                                thisWysiwyg.editors &&
                                    thisWysiwyg.editors[p] &&
                                    thisWysiwyg.editors[p](isObject ? properties[p].value : properties[p]);
                                thisWysiwyg.extended && thisWysiwyg.extended[p] && getExtended();
                                typeof thisWysiwyg.validate === "function" && thisWysiwyg.validate(e.n$.par);
                            };

                            if (isObject) {
                                switch (properties[p].type) {
                                case "options":
                                    var optionInput = $("<input type=\"text\" value=\"" +
                                        properties[p].value +
                                        "\" disabled>");

                                    function doOptions() {
                                        thisWysiwyg.options[p](optionInput.val(),
                                            model,
                                            optionInput,
                                            function() {
                                                updateScratchpad(e.n$.control, p, optionInput.val(), thisWysiwyg);
                                            });
                                    };

                                    var option = [
                                        optionInput,
                                        $("<div class=\"\lookup\"><img src=\"" +
                                            m$.GetImageResource("gear") +
                                            "\"></div>").click(function() {
                                            doOptions();
                                        })
                                    ];
                                    option.custom = true;
                                    return option;
                                case "lookup":
                                    var items = "";
                                    var lookup = thisWysiwyg.lookups[p];
                                    if (lookup instanceof Array) {
                                        thisWysiwyg.lookups[p].forEach(function(i) {
                                            items += "<option value=\"" +
                                                i +
                                                "\"" +
                                                (properties[p].value === i ? " selected" : "") +
                                                ">" +
                                                i +
                                                "</item>";
                                        });
                                        return $("<select>" + items + "</select>").change(propertyEdited);
                                    };

                                    if (typeof lookup === "function") {
                                        var lookupInput =
                                            $("<input type=\"text\" value=\"" + properties[p].value + "\">")
                                                .on("input", function() { doLookup(true); })
                                                .on("change", update);

                                        var lastVal = lookupInput.val();

                                        function update() {
                                            if (lookupInput.val() === lastVal)
                                                return;
                                            lastVal = lookupInput.val();
                                            updateScratchpad(e.n$.control, p, lookupInput.val(), thisWysiwyg);
                                        };

                                        function doLookup(check) {
                                            lookup(lookupInput.val(), model, lookupInput, check, update);
                                        };

                                        var output = [
                                            lookupInput,
                                            $("<div class=\"\lookup\"><img src=\"" +
                                                m$.GetImageResource("search") +
                                                "\"></div>").click(function() {
                                                doLookup();
                                            })
                                        ];
                                        output.custom = true;
                                        return output;
                                    };
                                    break;
                                case "checkbox":
                                    var input = $("<input />", { type: "checkbox", checked: !!properties[p].value })
                                        .change(function() {
                                            updateScratchpad(e.n$.control, p, this.checked, thisWysiwyg);
                                        });
                                    input.n$_noEdit = true;
                                    return input;
                                case "group":
                                    if (inGroup)
                                        return "(nested groups are not supported)";
                                    var tbl = $("<table class=\"group\"><tbody/></table>");
                                    tbl.n$_noEdit = true;
                                    var body = tbl.find("tbody");
                                    iterateProperties(properties[p].properties, body);
                                    return tbl;
                                };
                                return properties[p].value;
                            };
                            return $("<input type=\"text\" value=\"" + properties[p] + "\">")
                                .on("input", propertyEdited);
                        };

                        function getExtended() {
                            extended.forEach(function(row) { row.remove(); });
                            for (var ext in thisWysiwyg.extended) {
                                if (thisWysiwyg.extended.hasOwnProperty(ext)) {
                                    var origProp = typeof thisWysiwyg.properties[ext] === "object"
                                        ? thisWysiwyg.properties[ext].value
                                        : thisWysiwyg.properties[ext];
                                    var props = thisWysiwyg.extended[ext][origProp];

                                    if (origProp && props) {
                                        var extt$ = $(getEditorGroupTableHtml(origProp, true, props._actions));
                                        e$.append(extt$);
                                        var extb$ = extt$.find("tbody");
                                        var extf$ = extt$.find("tfoot > tr > td");
                                        extended.push(extt$);
                                        for (var extProp in props) {
                                            if (props.hasOwnProperty(extProp)) {
                                                extProp === "_actions"
                                                    ? setActions(props[extProp], extf$)
                                                    : setProp(extProp, props, extb$);
                                            };
                                        };
                                    };
                                };
                            };
                        };

                        function getButtons() {
                            if (!thisWysiwyg.interface)
                                return;

                            function btnDelete() {
                                thisWysiwyg.interface.delete(function(delId) {
                                    deleted.push(delId);
                                    delId.targetType = thisWysiwyg.type.toLowerCase();
                                    updateScratchpad(e.n$.control);
                                    e.n$.control.wysiwygCached = null;
                                    removeActiveElement();
                                    setActiveElement(e);
                                });
                            };

                            function btnReset() {
                                thisWysiwyg.interface.reset();
                                e.n$.control.wysiwygCached = null;
                                removeActiveElement();
                                setActiveElement(e);
                                if (e.n$.control.wstate) {
                                    changes.splice(changes.indexOf(e.n$.control.wstate), 1);
                                    delete e.n$.control.wstate;
                                };
                            };

                            if (typeof thisWysiwyg.interface.reset === "function") {
                                tfoot$.append($("<input type=\"button\" value=\"Reset\">&nbsp;&nbsp;")
                                    .click(btnReset));
                            };
                            if (typeof thisWysiwyg.interface.delete === "function") {
                                tfoot$.append($("<input type=\"button\" value=\"Delete\">&nbsp;&nbsp;")
                                    .click(btnDelete));
                            };
                        };

                        function iterateProperties(properties, tbody) {
                            for (var prop in properties) {
                                if (properties.hasOwnProperty(prop)) {
                                    setProp(prop, properties, tbody);
                                };
                            };
                        };

                        iterateProperties(thisWysiwyg.properties, tb$);

                        getExtended();
                        getButtons();
                    };
                };

                function activate(e) {
                    removeActiveElement();

                    while (e && !e.n$)
                        e = e.parentNode;
                    if (!e)
                        return;

                    setActiveElement(e);
                };

                function captureClick(e) {
                    if (suspendCapture)
                        return;

                    if (event.target.id === "wysiwyg-close")
                        return;

                    if (event.target.classList.contains("wysiwyg-active"))
                        return;

                    if ($(event.target).closest(".wysiwyg").length)
                        return;

                    activate(e.target);
                    e.stopImmediatePropagation();
                };

                var closeSubscribers = [];

                function captureScreen() {
                    document.addEventListener("click", captureClick, true);
                    n$.Focus.suspend();
                    document.focusElement && document.focusElement.blur();
                    n$.State.wysiwyg = {
                        onClose: function(subscriber) {
                            if (typeof subscriber === "function")
                                closeSubscribers.push(subscriber);
                        }
                    };
                };

                function releaseScreen() {
                    document.removeEventListener("click", captureClick, true);
                    n$.Focus.continue();
                };

                function close() {
                    removeActiveElement();
                    w$.empty();
                    w$.css("flex-basis", "0");
                    closeSubscribers.forEach(function(subscriber) {
                        subscriber();
                    });
                    setTimeout(function() {
                            w$.remove();
                            releaseScreen();
                            delete n$.State.wysiwyg;
                        },
                        300);
                };

                function save() {
                    if (!correct) {
                        n$.Popup.dialog({
                            title: "You cannot save this...",
                            caption:
                                "There are errors in the changes you have made. Please return and fix the changes first, and then click \"Save\"",
                            style: n$.Enums.DialogStyle.Error
                        });
                        return;
                    };

                    var data = { length: 0 };
                    var abandon = false;
                    changes.forEach(function(obj) {
                        if (abandon)
                            return;

                        var chg = $.extend({}, obj.props);
                        if (!obj.wysiwyg ||
                            !obj.wysiwyg.interface ||
                            typeof obj.wysiwyg.interface.saveState !== "function") {
                            debug.warning("Incomplete WYSIWYG interface for " + obj.wysiwyg.type + ". Cannot save.");
                            return;
                        };
                        abandon = obj.wysiwyg.interface.saveState(chg);
                        data[data.length++] = chg;
                    });

                    if (abandon) {
                        showAutoClosingDialog(n$.Popup.error(abandon));
                        return;
                    };

                    deleted.forEach(function(del) {
                        if (del) {
                            del.action = "delete";
                            data[data.length++] = del;
                        };
                    });
                    model.respond("save",
                        { data: data },
                        function() {
                            deleted = [];
                            changes = [];
                            correct = true;
                            wrong = [];
                            save$.hide();
                            saveShown = false;
                            showAutoClosingDialog(n$.Popup.message(
                                "Your changes have been saved. You should refresh your browser window now."));
                        });
                };

                function updateScratchpad(ctrl, prop, value, wysiwyg) {
                    var result;
                    if (prop && (value !== undefined)) {
                        if (!ctrl.wstate) {
                            changes.push(ctrl.wstate = {
                                wysiwyg: wysiwyg,
                                object: ctrl,
                                props: {}
                            });
                        };
                        ctrl.wstate.props[prop] = value;
                        result = wysiwyg.interface && typeof wysiwyg.interface.check === "function" && wysiwyg.interface.check();

                    } else {
                        // Deleting! Nothing is necessary, except for removing this control from list of "wrong" ones
                        result = true;
                    };

                    var indexOfWrong = wrong.indexOf(ctrl);
                    if (result) {
                        if (indexOfWrong >= 0)
                            wrong.splice(indexOfWrong, 1);
                    } else {
                        if (indexOfWrong === -1)
                            wrong.push(ctrl);

                    };

                    // TODO: indicate the number of "wrong" controls
                    correct = !wrong.length;
                    if (!saveShown) {
                        if (correct) {
                            save$.show();
                            saveShown = true;
                        };
                    } else {
                        if (!correct) {
                            save$.hide();
                            saveShown = false;
                        };
                    }
                };

                setTimeout(function() {
                    n$.UI.controlAddIn.append(
                        "<div id=\"wysiwyg\" class=\"wysiwyg\"><div class=\"properties\"></div><div class=\"buttons\"><input type=\"button\" value=\"Close\" id=\"wysiwyg-close\"><input type=\"button\" value=\"Save\" id=\"wysiwyg-save\"></div></div>");
                    w$ = $("#controlAddIn > .wysiwyg");
                    p$ = w$.find(".properties");
                    defaultPropertyBlock();
                    $("input#wysiwyg-close").click(close);
                    save$ = $("input#wysiwyg-save").hide().click(save);

                    setTimeout(function() {
                        w$.css("flex-basis", "25%");
                    });

                    captureScreen();
                });
            }
        });

        (function () { // Button wysiwyg behavior
            setTimeout(function () {
                n$.Controls.Button.prototype.wysiwyg = function (par, state) {
                    function getActionType(action) {
                        if (action) {
                            switch (action.Type) {
                                case "Menu":
                                    return action.OpenAsPopup ? "Popup Menu" : "Submenu";
                                case "Workflow":
                                    return "Action";
                                case "Item":
                                    return "Item";
                            };
                        };
                        return "None";
                    };

                    function getOptionValue(options, value) {
                        for (var option in options) {
                            if (options.hasOwnProperty(option)) {
                                if (options[option] === value)
                                    return option;
                            };
                        };
                        return "&lt;unknown&rt;";
                    };

                    function getParameterString() {
                        if (!par.button || !par.button.action || !par.button.action.Parameters)
                            return "none";

                        var result = "";
                        for (var param in par.button.action.Parameters) {
                            if (par.button.action.Parameters.hasOwnProperty(param)) {
                                if (param.length < 8 || param.substring(0, 8) !== "_option_") {
                                    result += (result ? "; " : "") +
                                        param +
                                        ": " +
                                        (par.button.action.Parameters["_option_" + param]
                                            ? getOptionValue(par.button.action.Parameters["_option_" + param],
                                                par.button.action.Parameters[param])
                                            : par.button.action.Parameters[param]);
                                };
                            };
                        };
                        return result;
                    };

                    function completeCheck(params, content, control) {
                        control.removeAttr("style");
                        if (params.check) {
                            content.checkOk ||
                                control.css({
                                    "background-color": "tomato",
                                    "color": "white"
                                });
                        };
                        return !params.check || (params.check && content.checkOk);
                    };

                    var me = this;
                    var original = $.extend({}, me.button);
                    var edited = false;
                    var properties = {};
                    var captionPositionLookups = ["Center", "Top", "Bottom"];

                    function setPropertiesFrom(btn) {
                        me.caption = btn.caption || "";
                        me.icon = btn.iconClass || "";
                        me.backgroundColor = btn.backgroundColor || "default";
                        me.enabled = btn.enabled;
                    };

                    var editor = {
                        type: "Button",

                        "interface": {
                            dragDrop: (function () {
                                var draggedObject;
                                var dragTargets;
                                var currentTarget;
                                var currentTargetButton;

                                function dragLeave() {
                                    currentTarget &&
                                        currentTarget
                                        .removeClass("wysiwyg-active-drop")
                                        .off("dragleave", dragLeave);
                                    currentTarget = null;
                                };

                                function dragOver(ev) {
                                    if (ev.currentTarget.n$ && ev.currentTarget.n$.control === draggedObject)
                                        return;

                                    var btn = ev.currentTarget.n$.control;
                                    if (!btn.button || btn.button.action !== undefined || btn.button.caption !== undefined)
                                        return;

                                    currentTarget =
                                        $(ev.currentTarget)
                                        .addClass("wysiwyg-active-drop")
                                        .on("dragleave", dragLeave);
                                    currentTargetButton = btn;

                                    ev.preventDefault();
                                };

                                function doDrop(target) {
                                    var prev = me.html.prev();
                                    var next = me.html.next();
                                    $(target).after(me.html);
                                    if (prev.length)
                                        prev.after(target);
                                    else
                                        next.before(target);

                                    state.update(me, "fixColumn", "on", editor);
                                    state.update(me, "fixRow", "on", editor);

                                    var origRef = me.button.positionReference;
                                    me.button.positionReference = currentTargetButton.button.positionReference;
                                    currentTargetButton.button.positionReference = origRef;
                                };

                                return {
                                    dragStart: function () {
                                        draggedObject = me;
                                        dragTargets = me.parentGrid.html.find(".np-button");
                                        dragTargets
                                            .on("dragover", dragOver);
                                        me.html.on("dragleave", dragLeave);
                                    },
                                    dragEnd: function () {
                                        draggedObject = null;
                                        dragTargets
                                            .off("dragover", dragOver)
                                            .off("dragleave", dragLeave);

                                        if (currentTarget)
                                            doDrop(currentTarget);

                                        dragLeave();
                                    }
                                };
                            })(),
                            canEdit: function () {
                                if (!par.button)
                                    return false;

                                if (par.button.action && par.button.action.Type === "Back")
                                    return false;

                                if (par.button.dialogAction)
                                    return false;

                                return true;
                            },
                            edited: function () {
                                return edited;
                            },
                            check: function () {
                                if (!me.button.caption)
                                    return false;

                                if (me.button.action) {
                                    switch (me.button.action.Type) {
                                        case "":
                                            return false;
                                        case "Item":
                                        case "Customer":
                                            if (!me.button.action.Code)
                                                return false;
                                            break;
                                        case "Workflow":
                                            if (!me.button.action.Workflow || !me.button.action.Workflow.Name)
                                                return false;
                                            break;
                                    };
                                } else
                                    return false;
                                return true;
                            },
                            "delete": function (callback) {
                                function doDelete() {
                                    var btn = n$.Menu.newButton();
                                    var result = null;
                                    if (par.button.content && par.button.content.keyId && par.button.content.keyMenu) {
                                        result = {
                                            keyMenu: par.button.content.keyMenu,
                                            keyId: par.button.content.keyId
                                        };
                                    };
                                    if (par.button.parentKeyId)
                                        btn.parentKeyId = par.button.parentKeyId;
                                    if (par.button.menuId)
                                        btn.menuId = par.button.menuId;
                                    setPropertiesFrom(btn);
                                    par.button = btn;
                                    me.button = btn;
                                    original = btn;
                                    callback(result);
                                };

                                if (par.button &&
                                    par.button.action &&
                                    par.button.action.Type === "Menu" &&
                                    !par.button.action.OpenAsPopup) {
                                    showAutoClosingDialog(n$.Popup.confirm(
                                        "This button represents a submenu, and may contain child items. If you confirm deletion of this button, all of the children will be deleted as well, and it will not be possible to restore it to the previous state.\n\nAre you sure you want to proceed?",
                                        function (res) {
                                            res && res.value === n$.Enums.ButtonType.Yes.value && doDelete();
                                        }));
                                } else
                                    doDelete();
                            },
                            reset: function () {
                                setPropertiesFrom(original);
                                par.button = original;
                                edited = false;
                            },
                            saveState: function (chg) {
                                chg.targetType = "button";
                                if (me.button && me.button.content) {
                                    if (me.button.content.keyId)
                                        chg.keyId = me.button.content.keyId;
                                    if (me.button.content.keyMenu)
                                        chg.keyMenu = me.button.content.keyMenu;
                                };
                                if (me.button &&
                                    me.button.parentKeyId) {
                                    chg.parentKeyId = me.button.parentKeyId;
                                };
                                if (!chg.keyMenu)
                                    chg.keyMenu =
                                        (me.button && me.button.menuId) ||
                                        (me &&
                                            me.parentGrid &&
                                            me.parentGrid.layout &&
                                            me.parentGrid.layout.source) ||
                                        "";
                                if (!chg.keyMenu)
                                    return "Cannot save object because menu ID is unknown.\n\nDetailed information (for debugging purposes):\n" +
                                        JSON.stringify(chg);

                                if (me.button && me.button.action && me.button.action.Parameters && chg.hasOwnProperty("parameters"))
                                    chg.parameters = me.button.action.Parameters;

                                if (chg.hasOwnProperty("fixColumn")) {
                                    chg.column = chg.fixColumn ? me.button.positionReference.x + 1 : 0;
                                    delete chg.fixColumn;
                                };
                                if (chg.hasOwnProperty("fixRow")) {
                                    chg.row = chg.fixRow ? me.button.positionReference.y + 1 : 0;
                                    delete chg.fixRow;
                                };
                                if (chg.hasOwnProperty("captionPosition"))
                                    chg.captionPosition = me.button.content.CaptionPosition;

                                return null;
                            }
                        },

                        properties: {
                            type: {
                                value: getActionType(par.button.action),
                                type: "lookup"
                            },
                            caption: par.button.caption || "",
                            icon: par.button.iconClass || "",
                            background: {
                                value: par.button.backgroundColor,
                                type: "lookup"
                            },
                            backgroundUrl: par.button.content && par.button.content.BackgroundImageUrl || "",
                            captionPosition: {
                                value: captionPositionLookups[par.button.content && par.button.content.CaptionPosition || 0],
                                type: "lookup"
                            },
                            tooltip: par.button.tooltip || "",
                            fixPosition: {
                                type: "group",
                                properties: {
                                    fixColumn: {
                                        value: par.button.column,
                                        type: "checkbox"
                                    },
                                    fixRow: {
                                        value: par.button.row,
                                        type: "checkbox"
                                    }
                                }
                            }
                        },

                        extended: {
                            type: {
                                Action: {
                                    action: {
                                        value: (par.button.action &&
                                                par.button.action.Workflow &&
                                                par.button.action.Workflow.Name) ||
                                            "",
                                        type: "lookup"
                                    },
                                    parameters: {
                                        value: getParameterString(),
                                        type: "options"
                                    }
                                },
                                Item: {
                                    item: {
                                        value: (par.button.action && par.button.action.Code) || "",
                                        type: "lookup"
                                    }
                                },
                                Customer: {
                                    customer: {
                                        value: (par.button.action && par.button.action.Code) || "",
                                        type: "lookup"
                                    }
                                },
                                Submenu: {
                                    _actions: [
                                        {
                                            caption: "Edit submenu",
                                            execute: function (intf) {
                                                intf.resetSelection();
                                                me.click();
                                            }
                                        }
                                    ]
                                },
                                "Popup Menu": {
                                    popupMenu: {
                                        value: (par.button.action && par.button.action.MenuId) || "",
                                        type: "lookup"
                                    },
                                    columns: (par.button.action && par.button.action.Parameters && par.button.action.Parameters.Columns) || 5,
                                    rows: (par.button.action && par.button.action.Parameters && par.button.action.Parameters.Rows) || 6,
                                    _actions: [
                                        {
                                            caption: "Open popup menu",
                                            execute: function (intf) {
                                                intf.resetSelection();
                                                me.click();
                                            }
                                        }
                                    ]
                                }
                            }
                        },

                        lookups: {
                            background: [
                                "default", "green", "red", "dark-red", "gray", "purple", "indigo", "yellow", "orange",
                                "white", "custom"
                            ],
                            type: ["None", "Action", "Customer", "Item", "Popup Menu", "Submenu"],
                            captionPosition: captionPositionLookups,
                            action: function (val, model, control, check, callback) {
                                var params = { current: val };
                                check && (params.check = true);
                                model.respond("lookup_action",
                                    params,
                                    function (content) {
                                        if (!content.success)
                                            return;

                                        if (!completeCheck(params, content, control))
                                            return;

                                        par.button.action.Workflow = par.button.action.Workflow || {};
                                        par.button.action.Workflow.Name = content.actionCode;
                                        editor.extended.type.Action.action.value = content.actionCode;
                                        control.val(content.actionCode);
                                        edited = true;
                                        typeof callback === "function" && callback();
                                    });
                            },
                            item: function (val, model, control, check, callback) {
                                var params = { current: val };
                                check && (params.check = true);
                                model.respond("lookup_item",
                                    params,
                                    function (content) {
                                        if (!content.success)
                                            return;

                                        if (!completeCheck(params, content, control))
                                            return;

                                        par.button.action.Code = content.itemNo;
                                        editor.extended.type.Item.item.value = content.itemNo;
                                        control.val(content.itemNo);
                                        properties.caption &&
                                        (properties.caption.val(content.itemDesc), properties.caption.trigger(
                                            "input"));
                                        edited = true;
                                        typeof callback === "function" && callback();
                                    });
                            },
                            customer: function (val, model, control, check, callback) {
                                var params = { current: val };
                                check && (params.check = true);
                                model.respond("lookup_customer",
                                    params,
                                    function (content) {
                                        if (!content.success)
                                            return;

                                        if (!completeCheck(params, content, control))
                                            return;

                                        par.button.action.Code = content.custNo;
                                        editor.extended.type.Customer.customer.value = content.custNo;
                                        control.val(content.custNo);
                                        properties.caption &&
                                        (properties.caption.val(content.custName), properties.caption.trigger(
                                            "input"));
                                        edited = true;
                                        typeof callback === "function" && callback();
                                    });
                            },
                            popupMenu: function (val, model, control, check, callback) {
                                var params = { current: val };
                                check && (params.check = true);
                                model.respond("lookup_popup",
                                    params,
                                    function (content) {
                                        if (!content.success)
                                            return;

                                        if (!completeCheck(params, content, control))
                                            return;

                                        par.button.action.MenuId = content.menuCode;
                                        par.button.action.OpenAsPopup = true;
                                        editor.extended.type["Popup Menu"].popupMenu.value = content.menuCode;
                                        control.val(content.menuCode);
                                        properties.caption &&
                                        (properties.caption.val(content.caption), properties.caption.trigger(
                                            "input").trigger("change"));
                                        edited = true;
                                        typeof callback === "function" && callback();
                                    });
                            }
                        },

                        options: {
                            parameters: function (val, model, control, callback) {
                                var params = {
                                    action: par.button.action.Workflow.Name,
                                    current: val,
                                    parameters: par.button.action.Parameters
                                };
                                model.respond("lookup_parameters",
                                    params,
                                    function (content) {
                                        if (!content.success)
                                            return;

                                        if (!par.button.action.Parameters)
                                            par.button.action.Parameters = {};

                                        content.parameters = JSON.parse(content.parameters);
                                        for (var param in content.parameters) {
                                            if (content.parameters.hasOwnProperty(param)) {
                                                par.button.action.Parameters[param] = content.parameters[param];
                                            };
                                        };
                                        control.val(getParameterString());
                                        typeof callback === "function" && callback();
                                    });
                            }
                        },

                        editors: {
                            caption: function (val) {
                                par.button.caption = val || "";
                                me.caption = par.button.caption;
                                edited = true;
                            },
                            icon: function (val) {
                                me.icon = val || "";
                                edited = true;
                            },
                            background: function (val) {
                                par.button.backgroundColor = val || "default";
                                me.backgroundColor = par.button.backgroundColor;
                                edited = true;
                            },
                            backgroundUrl: function (val) {
                                par.button.content = par.button.content || {};
                                par.button.content.BackgroundImageUrl = val;
                                me.setBackgroundImage(val);
                                edited = true;
                            },
                            captionPosition: function (val) {
                                par.button.content = par.button.content || {};
                                par.button.content.CaptionPosition = captionPositionLookups.indexOf(val);
                                if (par.button.content.CaptionPosition === -1)
                                    par.button.content.CaptionPosition = 0;
                                me.setBackgroundImage(par.button.content.BackgroundImageUrl);
                                edited = true;
                            },
                            tooltip: function (val) {
                                par.button.tooltip = val;
                                me.setTooltip(val);
                                edited = true;
                            },
                            type: function (val) {
                                par.button.action = par.button.action || {};
                                switch (val) {
                                    case "None":
                                        par.button.action.Type = "";
                                        break;
                                    case "Item":
                                        par.button.action.Type = "Item";
                                        break;
                                    case "Customer":
                                        par.button.action.Type = "Customer";
                                        break;
                                    case "Action":
                                        par.button.action.Type = "Workflow";
                                        break;
                                };
                                edited = true;
                            },
                            action: function (val) {
                                par.button.action.Workflow || (par.button.action.Workflow = {});
                                par.button.action.Workflow.Name = val;
                                edited = true;
                            }
                        },

                        registerControl: function (property, control) {
                            properties[property] = control;
                        },

                        requestRegistration: {
                            caption: true
                        },

                        validate: function () {
                            me.enabled = this.properties.type.value !== "None" &&
                            (
                                (this.properties.type.value === "Action" && this.extended.type.Action.action) ||
                                    (this.properties.type.value === "Item" && this.extended.type.Item.item));
                        }
                    };
                    return editor;
                };
            });
        })(); // Button wysiwyg behavior

        (function () { // Button wysiwyg behavior
            n$.Controls.ButtonGrid.Grid.prototype.wysiwyg = function (par, state) {
                var me = this;

                var editor = {
                    type: "ButtonGrid",
                    properties: {
                        code: "haha"
                    }
                };
                return editor;
            }
        })(); // ButtonGrid wysiwyg behavior
    }).depend("InputFilter", "FrontEndAsync", "Debug");
;
n$.addModule("FrontEndAsync.ConfigureActionSequences",
    function () {
        n$.AsyncRequestHandlers.ConfigureActionSequences = function (content) {
            if (!content.Content || !content.Content.sequences)
                return;

            const sequences = {};
            for (let entry of content.Content.sequences) {
                let sequence = sequences[entry.referenceAction] = sequences[entry.referenceAction] || {};
                let ref = sequence[entry.referenceType] = sequence[entry.referenceType] || [];
                ref.push({ 
                    action: entry.action,
                    priority: entry.priority
                });
            }

            n$.Workflow20.storeActionSequences(sequences);
        };
    })
    .depend("FrontEndAsync", "Workflow20");
;
n$.addModule("FrontEndAsync.ConfigureFont",
        function() {
            n$.AsyncRequestHandlers.ConfigureFont = function(content) {
                n$.Debug.Framework
                    .logPos({ event: "FrontEndAsync.ConfigureFont", data: content.Font.FontFace, info: true });
                n$.Framework["__font_" + content.Font.Code] = content.Font;
                var fontCss = "@font-face {" +
                    "font-family: '" +
                    content.Font.FontFace +
                    "'; " +
                    "src: url(" +
                    content.Font.Woff +
                    ") format('woff'); " +
                    "font-weight: normal; font-style: normal;" +
                    "}" +
                    "[class^=\"" +
                    content.Font.Prefix +
                    "\"]:before, [class*=\" " +
                    content.Font.Prefix +
                    "\"]:before {" +
                    "font-family: " +
                    content.Font.FontFace +
                    ";" +
                    "}";
                var style = document.createElement('style');
                style.innerHTML = fontCss + content.Font.Css;
                document.head.appendChild(style);
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.ConfigureReusableWorkflow",
        function() {
            n$.AsyncRequestHandlers.ConfigureReusableWorkflow = function(content) {
                n$.Workflow.registerKnown(content.Action);
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.ConfigureTheme",
        function () {
            var target = {
                View: function(theme) {
                    n$.UI.theme.register.view(theme);
                },
                ViewType: function(theme) {
                    n$.UI.theme.register.viewType(theme);
                },
                Client: function(theme) {
                    // TODO: support this
                }
            }
            n$.AsyncRequestHandlers.ConfigureTheme = function (content) {
                if (!content.Content.theme || !content.Content.theme.length)
                    return;

                content.Content.theme.forEach(function (theme) {
                    var type = n$.NewEnums.ThemeTargetType.format(theme.targetType);
                    typeof target[type] === "function"
                        ? target[type](theme)
                        : n$.Debug.UI.warning("Unsupported theme target type [" + theme.targetType + "]");
                });
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.HardwareInitializationCompleted",
        function () {
            n$.AsyncRequestHandlers.HardwareInitializationCompleted = function () {
                n$.Debug.Framework.log("Completed front-end ID and back-end session initilization.");

                n$.Events.InitializationComplete.raise(function() {
                    n$.Debug.Framework.log("Completed back-end session initialization.");

                    n$.ready(true);
                });
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.Menu",
        function() {
            n$.AsyncRequestHandlers.Menu = function(req) {
                req.Menus.forEach(function(m) {
                    n$.Menu.prototype.__menus[m.Id] = m;
                    delete m.Id;
                });
            };
        })
    .depend("FrontEndAsync");

;
n$.addModule("FrontEndAsync.PauseWorkflow",
        function () {
            n$.AsyncRequestHandlers.PauseWorkflow = function (req) {
                var workflow = w$.getById(req.WorkflowId, false);
                workflow
                    ? workflow.pause(true)
                    : n$.Debug.Workflow.warning("FrontEndAsync.PauseWorkflow invoked, with no active workflow. Check the back end!");
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.ProvideContext",
        function() {
            n$.AsyncRequestHandlers.ProvideContext = function(req) {
                var workflow = w$.getById(req.WorkflowId, false);
                workflow && workflow.name !== req.Content.actionCode && (workflow = null);

                if (!workflow) {
                    n$.Workflow.fail("Context was provided for an unknown workflow [" +
                        req.Content.actionCode + ", " + req.WorkflowId +
                        "]. This most likely means that an action codeunit handled the OnBeforeWorkflow event not intended for it, but may indicate an incompletely handled front-end state after a previous failed workflow. You should contact support.");
                    return;
                };

                if (req.Content.objectName) {
                    n$.Workflow.setContext(req.Content.objectName, req.Context, workflow);
                    return;
                };

                $.extend(workflow.context, req.Context);
            };
            n$.AsyncRequestHandlers.ProvideContext.immediate = true;
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.RefreshData",
        function() {
            n$.AsyncRequestHandlers.RefreshData = function(content) {
                setTimeout(function() {
                    try {
                        for (var set in content.DataSets) {
                            if (content.DataSets.hasOwnProperty(set)) {
                                n$.State.dataStore.getSource(set).merge(content.DataSets[set]);
                            };
                        };
                    } catch (e) {
                    };
                });
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.RegisterModule",
        function () {
            n$.AsyncRequestHandlers.RegisterModule = function (req) {
                if (req.Content.Script) {
                    try {
                        var func = new Function(req.Content.Script);
                        func();
                    } catch (e) {
                        n$.Debug.Framework.error("Failure invoking custom module registration: " + e);
                    };
                };
            };
        })
    .depend("FrontEndAsync");

;
n$.addModule("FrontEndAsync.ReportBug",
    function () {
        n$.AsyncRequestHandlers.ReportBug = function (req) {
            if (req.Content.InvalidCustomMethod
                && typeof n$.Event.Method.noSupport[req.Content.InvalidCustomMethod] === "function"
                && n$.Event.Method.noSupport[req.Content.InvalidCustomMethod]())
                return;

            var errorText = req.ErrorText.replace(/\\/g, "<br>");
            req.Content.warning
                ? n$.Debug.Framework.warning(errorText)
                : (
                    // TODO: even after all is aborted, there are events in the log indicating that logic is still processing (repeat by invoking ReportBug from a nested workflow)
                    n$.Workflow.abortAll(),
                    // TODO: this must mnot come be done in Workflow context, but either in Framework, or the source should be read from req
                    n$.Debug.Workflow.error(errorText)
                );

            // TODO: in any case, this message must be logged in Major tom!
        };
    })
    .depend("FrontEndAsync", "Events");
;
n$.addModule("FrontEndAsync.ResumeWorkflow",
        function () {
            n$.AsyncRequestHandlers.ResumeWorkflow = function (req) {
                var workflow = w$.getById(req.WorkflowId, false);
                workflow
                    ? workflow._paused && workflow.resume(req.Content.actionId)
                    : n$.Debug.Workflow.warning("FrontEndAsync.ResumeWorkflow invoked, with no active workflow. Check the back end!");
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.SetCaptions",
        function() {
            n$.AsyncRequestHandlers.SetCaptions = function(req) {
                n$.Localization.SetCaptions(req.Captions);

                l$.Actions = {};
                for (var c in l$) {
                    if (l$.hasOwnProperty(c)) {
                        var index = c.indexOf(".");
                        if (index > 0) {
                            var action = c.substring(0, index), key = c.substring(index + 1);
                            l$.Actions[action] || (l$.Actions[action] = {});
                            l$.Actions[action][key] = l$[c];
                        };
                    };
                };
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.SetFormat",
        function() {
            n$.AsyncRequestHandlers.SetFormat = function(req) {
                n$.State.format.number = req.NumberFormat;
                n$.State.format.date = req.DateFormat;

                numeral.register("locale", "custom",
                {
                    delimiters: {
                        thousands: req.NumberFormat.NumberGroupSeparator,
                        decimal: req.NumberFormat.NumberDecimalSeparator
                    },
                    abbreviations: {
                        thousand: "K",
                        million: "M",
                        billion: "B",
                        trillion: "T"
                    },
                    ordinal: function() {
                        return ".";
                    },
                    currency: {
                        symbol: req.NumberFormat.CurrencySymbol
                    }
                });
                numeral.locale("custom");

                n$.State.format.number.decimalFormat = "0,0." + "0".repeat(req.NumberFormat.NumberDecimalDigits);
                n$.State.format.number.integerFormat = "0,0";
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.SetImage",
        function() {
            n$.AsyncRequestHandlers.SetImage = function(req) {
                n$.UI.images[req.Id] = req.Image;

                req.Id === "logo" && (n$.UI.logoSet = true);
                req.Id === "watermark" &&
                (req.Image && req.Image.length > 30
                    ? n$.UI.setWatermarkImage()
                    : n$.UI.setWatermarkText(req.Content.watermarkText));
            };
        })
    .depend("FrontEndAsync");

;
n$.addModule("FrontEndAsync.SetOption",
        function() {
            n$.AsyncRequestHandlers.SetOption = function(req) {
                n$.State.options[req.Option] = req.Value;
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.SetOptions",
        function() {
            n$.AsyncRequestHandlers.SetOptions = function(req) {
                $.extend(n$.State.options, req.Content);
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.SetView",
        function () {
            var walkthroughsInitialized;
            var transitionDesktops = true;

            n$.AsyncRequestHandlers.SetView = function(req) {
                var e;

                var viewType = n$.Enums.ViewType.Parse(req.View.type);
                if (viewType) {
                    req.View.type = viewType;

                    if (n$.Framework.Environment.Mobile() || transitionDesktops) {
                        if (n$.UI.currentView) {
                            n$.UI.currentView.deactivate();
                        };
                        var old;
                        $("body").append(old = $("<div id=\"oldControlAddIn\">"));
                        old.append(n$.UI.controlAddIn[0].innerHTML).find("*").removeAttr("id");
                        n$.UI.clear();

                        try {
                            n$.State.dataStore = new n$.Data.DataStore(req.View.dataSources);
                            n$.UI.currentView = new n$.View[viewType.name](req.View);
                            req.Content && req.Content.ViewCode && (n$.UI.currentView.viewCode = req.Content.ViewCode);
                            n$.UI.currentView.activate(n$.UI.controlAddIn);

                            old.viewslideOut();
                            n$.UI.controlAddIn.viewslideIn(150);
                        } catch (e) {
                            if (e && e instanceof Error && !e.fromCode) {
                                n$.Debug.Framework.dontPanic(e.message);
                                console.log(e.stack);
                                throw e;
                            };
                        };

                    } else {
                        n$.UI.currentView && (n$.UI.currentView.deactivate(), n$.UI.clear());

                        try {
                            n$.State.dataStore = new n$.Data.DataStore(req.View.dataSources);
                            n$.UI.currentView = new n$.View[viewType.name](req.View);
                            n$.UI.currentView.activate(n$.UI.controlAddIn);
                        } catch (e) {
                            if (e && e instanceof Error && !e.fromCode) {
                                n$.Debug.Framework.dontPanic(e.message);
                                console.log(e.stack);
                                throw e;
                            };
                        };
                    };

                    n$.UI.theme.apply(req.Content.ViewCode || "", viewType.name);

                    walkthroughsInitialized ||
                        (n$.UserGuide.initializeWalkthroughs(), walkthroughsInitialized = true);
                } else {
                    n$.Debug.Framework.error("View type is not specified, or view type mismatch.");
                }
            };
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.StartTransaction",
        function() {
            n$.AsyncRequestHandlers.StartTransaction = function(req) {
                n$.Workflow.transactionTemp = {};
                n$.State.clearState();
                n$.State.transaction.no = req.TransactionNo;
                n$.State.transaction.register = req.Content.register;
                n$.State.transaction.salesPerson = req.Content.salesPerson;
            };
        })
    .depend("FrontEndAsync", "Workflow");
;
n$.addModule("FrontEndAsync.Workflow",
        function() {
            n$.AsyncRequestHandlers.Workflow = function(req) {
                var workflow = w$.getById(req.WorkflowId);
                var workflowStep = workflow ? workflow[req.StepName] : undefined;

                if (req.Content.explicit === true) {
                    setTimeout(function() {
                        if (!workflow && req.Content.nested)
                            return;
                        w$.nest(workflow, req);
                    });
                    return;
                };

                if (!workflow || !workflowStep) {
                    n$.Debug.Workflow.error("A workflow step " +
                        req.WorkflowName +
                        "." +
                        req.StepName +
                        " was requested, but this " +
                        (workflow && !workflowStep
                            ? "workflow step does not exist in the specified workflow."
                            : "workflow is not currently running."),
                        true);
                    return;
                };

                if (workflow._backEndId && workflow._backEndId !== req.BackEndId) {
                    n$.Debug.Workflow.error("Unexpected workflow step invoked. BackEndId mismatch at " +
                        req.WorkflowName +
                        "." +
                        req.StepName +
                        " (stored: " +
                        workflow._backEndId +
                        ", received: " +
                        req.BackEndId +
                        ")");
                    n$.Events.AbortAllWorkflows.raise([],
                        function() {
                            workflow._abortWorkflow();
                            n$.Workflow.abortAll();
                        });
                    return;
                };

                workflow.continueAtStep = workflowStep;
            };
            n$.AsyncRequestHandlers.Workflow.immediate = true;
        })
    .depend("FrontEndAsync");
;
n$.addModule("FrontEndAsync.WorkflowCallCompleted",
    function () {
        function parametersToObj(params) {
            var result = {};
            for (var p in params) {
                if (params.hasOwnProperty(p)) {
                    if (typeof params[p] === "object" && params[p] instanceof Number) {
                        var val = params[p].valueOf();
                        for (var v in params[p]) {
                            if (params[p].hasOwnProperty(v)) {
                                if (params[p][v] === val) {
                                    result[p] = v;
                                }
                            };
                        }
                    } else
                        result[p] = params[p];
                };
            };
            return result;
        };

        n$.AsyncRequestHandlers.WorkflowCallCompleted = function (req) {
            var content = req.Content._trace
                ? {
                    duration: req.Content._trace.durationBefore
                        ? {
                            before: req.Content._trace.durationBefore
                        }
                        : {
                            all: req.Content._trace.durationAll,
                            action: req.Content._trace.durationAction,
                            data: req.Content._trace.durationData,
                            overhead: req.Content._trace.durationOverhead
                        },
                    raw: req.Content._trace
                }
                : {};

            if (!req.Success) {
                content.error = {
                    silent: !req.ThrowError,
                    message: req.ErrorMessage
                };
            };

            if (req.Content.workflowEngine === "2.0") {
                content.id = req.WorkflowId;
                content.actionId = req.ActionId;
                content.context = req.Content.context || {};
                if (req.Content.hasOwnProperty("workflowResponse"))
                    content.workflowResponse = req.Content.workflowResponse;
                if (req.Content.hasOwnProperty("queuedWorkflows"))
                    content.queuedWorkflows = req.Content.queuedWorkflows;
                n$.Workflow20.callCompleted(content);
                return;
            }
            var workflow = w$.getById(req.WorkflowId, true);

            if (workflow) {
                content.workflow = {
                    id: workflow.workflowId,
                    name: workflow.name,
                    step: req.Content._trace && req.Content._trace.durationBefore
                        ? "OnBeforeWorkflow"
                        : (workflow.thisStep && workflow.thisStep instanceof n$.Workflow.Task
                            ? workflow.thisStep.name
                            : ""),
                    parameters: workflow.parameters ? parametersToObj(workflow.parameters) : {}
                };
            };

            n$.Debug.Workflow.logJson({ event: "WorkflowCallCompleted", data: content });

            if (!req.Success) {
                n$.Debug.Workflow.warning("C/AL error: " + req.ErrorMessage);
                if (req.ThrowError && req.ErrorMessage) {
                    n$.Popup
                        .dialog({ style: n$.Enums.DialogStyle.Error, title: "Error", caption: req.ErrorMessage });
                };
                workflow && workflow.fail(req.ActionId);
                return;
            };

            if (!workflow && req.WorkflowId === 0 && req.ActionId === 0)
                return;

            workflow.receiveComplete(req.ActionId);
        };
        n$.AsyncRequestHandlers.WorkflowCallCompleted.immediate = true;
        n$.AsyncRequestHandlers.WorkflowCallCompleted.notrace = true;
    })
    .depend("FrontEndAsync");

n$.addModule("Controls", function() {;
n$.Controls.ControlBehavior = {
    Tag: "np-base",
    HtmlTag: "div",
    CanChangeStyle: true,
    CanClick: false,
    CanEnable: false,
    CanHaveCaption: false,
    CanResize: false,
    CaptionWithoutSpan: false,
    Formattable: false,
    HasValue: false,
    HasFontSize: false,
    HasFontStyle: false,
    IsJqueryUiControl: false,
    PropagateParentId: false
};

n$.Controls.BaseControl = function (behavior) {
    this.__behavior = $.extend({}, n$.Controls.ControlBehavior, behavior);
    this.__alignment = n$.Enums.Alignment.None;
    this.__fontSize = undefined;
    this.__fontStyle = undefined;
    this.__enabled = true;
    this.__caption = this.__behavior.CanHaveCaption ? this.__behavior.Tag : undefined;
    this.__value = null;
    this.__textAlign = n$.Enums.TextAlign.None;
    this.__visible = true;
    this.__initialized = false;

    this.bindings = [];

    // Overridable behavior functions
    this.getValue = function() {
        return this.__value;
    };
    this.setValue = function(val) {
        this.__value = val;
    };
    this.enableControl = function(enabled) {
        $(this.html).setClass(n$.Css.Control.Disabled, !enabled);
    };

    // Events
    this.__eventClicked = $.Event("clicked");
    this.__eventParentChanged = $.Event("parentChanged");
    this.__eventEnabledChanged = $.Event("enabledChanged");

    this.__getParams = function (par)
    {
        return par || {};
    }
    this.__copyProperties = function (from, to) {
        for (var name in from) {
            to[name] = from[name];
        };
        return to;
    };

    // Methods
    this.initialize = function (par, additionalObject) {
        par = this.__getParams(par);
        if (additionalObject) {
            this.__copyProperties(additionalObject, par);
        };

        // Behavior overrides
        if (par.overrideCanClick && typeof par.overrideCanClick == "boolean") { this.__behavior.CanClick = par.overrideCanClick; };

        this.__controls = [];

        this.html = par.html ? par.html : $("<" + this.__behavior.HtmlTag + "/>");
        if (this.__behavior.isWysiwyg) {
            this.html[0].n$ = {
                control: this,
                par: par
            };
        };
        this.__dataSource && this.setDataSource(this.__dataSource);
        this.parent = par.parent !== undefined ? par.parent : null;
        this.id = par.id ? par.id : $(this.html).attr("id");
        $(this.html).removeAttr("np-control");
        if (!par.isCustomHtml) {
            this.html.empty();
        };

        if (par.hasOwnProperty("format") && this.__behavior.Formattable) { this.format = par.format; };
        if (par.hasOwnProperty("caption") && this.__behavior.CanHaveCaption) { this.caption = par.caption; };
        if (par.hasOwnProperty("enabled") && this.__behavior.CanEnable) { this.enabled = par.enabled; };
        if (par.hasOwnProperty("value") && this.__behavior.HasValue) { this.value = par.value; };
        if (par.hasOwnProperty("alignment")) { this.alignment = par.alignment; };
        par.hasOwnProperty("textAlign") && (this.textAlign = par.textAlign);
        par.hasOwnProperty("flow") && (this.flow = par.flow);

        if (par.hasOwnProperty("style") && typeof par.style === "object") {
            for (var prop in par.style) {
                if (par.style.hasOwnProperty(prop)) {
                    this.css(prop, par.style[prop]);
                };
            };
        };

        if (this.__behavior.HasFontSize && !par.inheritFontSize) {
            this.fontSize = par.hasOwnProperty("fontSize") && par.fontSize !== undefined ? par.fontSize : n$.Enums.FontSize.Normal;
        };
        if (this.__behavior.HasFontStyle) {
            this.fontStyle = par.hasOwnProperty("fontStyle") ? par.fontStyle : [];
        };
        if (par.hasOwnProperty("class")) { this.addClass(par.class); };
        if (par.hasOwnProperty("width") && this.__behavior.CanResize) { this.width = par.width; };
        if (par.hasOwnProperty("height") && this.__behavior.CanResize) { this.height = par.height; };
        (par.hasOwnProperty("title")) && this.html.prop("title", par.title);
        (par.hasOwnProperty("visible")) && (this.visible = par.visible);
        if (par.hasOwnProperty("on")) {
            for (var propName in par.on) {
                if (par.on.hasOwnProperty(propName)) {
                    var event = par.on[propName];
                    this.on(propName, $.isFunction(event) ? event : event["function"], $.isFunction(event) ? undefined : event["onHtml"]);
                }
            }
        };

        this.attr("np-control", this.__behavior.Tag);

        this.__initialized = true;

        par.dataSource && this.setDataSource(par.dataSource);
        par.field && (this.__field = par.field);

        // Secure initialization
        this.html.length &&
            this.html[0].tagName.toLowerCase() === "input" &&
            $(this.html[0])
            .on({
                focus: function() {
                    n$.Capabilities.SecureInput.setSecure(!!par.secure);
                }
            });

        return this;
    };

    this.inputTextFromButton = function(me, btn, input, eventInputComplete, eventButtonClicked) {
        if (btn.resultButton) {
            switch (btn.type) {
            case n$.Enums.ButtonType.Ok:
                $(me).trigger(eventInputComplete);
                break;
            };
        } else {
            if (n$.Framework.Environment.Mobile()) {
                input.hasMobileInputStarted || (input.hasMobileInputStarted = true, input.value = "");
                input.value += btn.value;
                return;
            };

            var active = document.activeElement;
            if (active && active !== input.html[0])
                input.html[0].focus();

            var len = input.html[0].value.length;
            var start = input.html[0].selectionStart;
            var end = input.html[0].selectionEnd;
            var val = input.html[0].value.substring(0, start)
                .concat(btn.value, input.html[0].value.substring(end, len));
            input.html[0].value = val;
            input.html.selectRange(start + btn.value.length);

            active && active.focus();
        };
        $(me).trigger(eventButtonClicked, btn);
    };

    this.setProperty = function(property, value) {
        this[property] = value;
        return this;
    };

    this.attr = function(attribute, value) {
        this.html.attr(attribute, value);
        return this;
    };

    this.emptyChildren = function () {
        if (this.html) {
            this.html.empty();
        };
        this.__controls = [];
    };
    
    this.on = function (eventId, func, onHtml) {
        if (onHtml) {
            $(this.eventControl.html).on(eventId, func);
        } else {
            $(this.eventControl).on(eventId, func);
        };
        
        return this;
    };

    this.onHtml = function(eventId, func) {
        return this.on(eventId, func, true);
    };

    this.hide = function() {
        this.html.hide();
        return this;
    }
    this.show = function() {
        this.html.show();
        return this;
    }

    this.__newId = function () {
        var c = 0;
        if (n$.Controls.BaseControl.IdCounter[this.__behavior.Tag]) {
            c = n$.Controls.BaseControl.IdCounter[this.__behavior.Tag];
        };
        n$.Controls.BaseControl.IdCounter[this.__behavior.Tag] = c + 1;
        return ((this.parent && this.__behavior.PropagateParentId) ? this.parent.id + "_" : "") + this.__behavior.Tag + n$.Controls.BaseControl.IdCounter[this.__behavior.Tag];
    };

    Object.defineProperty(this,
        "focusElement",
        {
            get: function () {
                return typeof this.getFocusElement === "function" ? this.getFocusElement() : this.html[0];
            }
        });
};

n$.Controls.BaseControl.IdCounter = {};

// Properties
(function() {
    Object.defineProperty(n$.Controls.BaseControl.prototype,
        "alignment",
        {
            get: function() {
                return this.__alignment;
            },
            set: function(val) {
                if (typeof val == "string") {
                    val = n$.Enums.Alignment.Parse(val);
                };
                if (this.__alignment !== val) {
                    $(this.html).setClass(this.__alignment.class, false);
                    this.__alignment = val;
                    $(this.html).setClass(this.__alignment.class, true);
                };
            }
        });

    Object.defineProperty(n$.Controls.BaseControl.prototype,
        "caption",
        {
            get: function() {
                return !!this.__behavior.CanHaveCaption === true ? this.__caption : undefined;
            },
            set: function(val) {
                if ((typeof val === "string") && val.indexOf("\\") >= 0) {
                    val = val.replace(new RegExp("\\\\", "g"), "<br>");
                };
                if (typeof val === "string" && /^l\$\./gi.test(val)) {
                    val = l$[val.substring(3)];
                    var rxStart = /^\&lt\;/i;
                    var rxEnd = /\&gt\;$/i;
                    if (typeof val === "string" && rxStart.test(val) && rxEnd.test(val)) {
                        val = val.replace(rxStart, "");
                        val = val.replace(rxEnd, "");
                        this.addClass("non-translated");
                        $(this.html).attr("title", "No translation provided");
                    };
                };
                if (this.__behavior.CanHaveCaption === true) {
                    if (this.__behavior.Formattable &&
                        this.__format &&
                        this.__format.format &&
                        typeof this.__format.format === "function") {
                        val = this.__format.format(val);
                    };
                    this.__caption = val;
                    if (this.__behavior.CaptionWithoutSpan) {
                        this.html.html(this.__caption);
                    } else {
                        if (!this.__captionSpan) {
                            this.__captionSpan = $("<span class=\"np-caption\">");
                            this.html.append(this.__captionSpan);
                        };
                        this.__captionSpan.html(typeof this.captionOverride === "function" ? this.captionOverride(this.__caption) : this.__caption);
                    };
                };
            }
        });

    Object.defineProperty(n$.Controls.BaseControl.prototype,
        "class",
        {
            get: function() {
                return this.__html.attr("class");
            },
            set: function(val) {
                if (this.__behavior.CanChangeStyle) {
                    if (!this.__html.hasClass(val)) {
                        this.__html.addClass(val);
                    };
                };
            }
        });

    Object.defineProperty(n$.Controls.BaseControl.prototype,
        "enabled",
        {
            get: function() {
                return !!this.__behavior.CanEnable === true ? this.__enabled : undefined;
            },
            set: function(val) {
                if (this.__enabled != val && this.__behavior.CanEnable == true) {
                    this.__enabled = val;
                    this.enableControl(this.__enabled);
                    $(this).trigger(this.__eventEnabledChanged, val);
                };
                $.each(this.__controls,
                    function(i, ctrl) {
                        ctrl.enabled = val;
                    });
            }
        });

    Object.defineProperty(n$.Controls.BaseControl.prototype,
        "eventControl",
        {
            get: function() {
                return this;
            }
        });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "flow", {
        get: function () {
            return this.__flow || (this.parent ? this.parent.flow : "horizontal");
        },
        set: function (value) {
            this.__flow = value;
            this.addClass("flow-" + value);
        }
    })

    Object.defineProperty(n$.Controls.BaseControl.prototype, "fontSize", {
        get: function() {
            return this.__behavior.HasFontSize === true ? this.__fontSize : undefined;
        },
        set: function(val) {
            if (typeof val == "string") {
                val = n$.Enums.FontSize.Parse(val);
            };
            if (this.__fontSize != val && this.__behavior.HasFontSize == true) {
                if (this.__fontSize !== undefined) {
                    $(this.html).setClass(this.__fontSize.class, false);
                };
                this.__fontSize = val;
                $(this.html).setClass(this.__fontSize.class, true);
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "fontStyle", {
        get: function() {
            return this.__behavior.HasFontStyle == true ? this.__fontStyle : undefined;
        },
        set: function(v) {
            var me = this;

            function setSingleValue(val, switchOn) {
                if (typeof val == "string") {
                    val = n$.Enums.FontStyle.Parse(val);
                };
                if (val !== undefined && val != null) {
                    $(me.html).setClass(val.class, switchOn);
                };
            };

            if (this.__behavior.HasFontStyle == true) {
                if (this.__fontStyle !== undefined && $.isArray(this.__fontStyle)) {
                    $.each(this.__fontStyle, function(index, value) {
                        setSingleValue(value, false);
                    });
                }

                v = v || [];
                if (!$.isArray(v)) {
                    v = [v];
                };
                this.__fontStyle = v;
                $.each(v, function(index, value) {
                    setSingleValue(value, true);
                });
            }
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "format", {
        get: function() {
            return this.__behavior.Formattable ? this.__format : undefined;
        },
        set: function(val) {
            if (this.__behavior.Formattable && val) {
                this.__format = n$.Enums.NumberFormat.Parse(val);
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "height", {
        get: function() {
            return this.__height;
        },
        set: function(val) {
            if (this.__behavior.CanResize == true && val) {
                this.__height = val;
                this.__html.css({
                    height: val
                });
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "html", {
        get: function() {
            return this.__html;
        },
        set: function(val) {
            this.__html = $(val);
            if (!this.__html.attr("id")) {
                this.__html.attr({ "id": this.__id });
            };
            this.__html.addClass(this.__behavior.Tag);
            if (this.__behavior.CanClick === false) {
                this.__html.off("click");
                this.__html.on("click", function(event) {
                    if (event.target === event.currentTarget) {
                        if (this.overrideClickBehavior)
                            return;

                        event.preventDefault();
                        event.stopImmediatePropagation();
                    };
                });
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "id", {
        get: function() {
            return this.__id;
        },
        set: function(val) {
            this.__id = val ? val.replace(/\s/g, "") : this.__newId();
            if (!this.__html)
                return;

            this.__html.attr({ "id": this.__id });
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "parent", {
        get: function() {
            return this.__parent;
        },
        set: function(val) {
            var parent;
            if (this.__parent) {
                parent = this.__parent.html ? this.__parent.html : this.__parent;
                var index = this.__parent.__controls.indexOf(this);
                if (index >= 0) {
                    this.__parent.__controls.splice(index, 1);
                };
                $(parent).remove("#" + this.id);
            };

            this.__parent = val;

            if (this.__parent && this.html) {
                parent = this.__parent.html ? this.__parent.html : this.__parent;
                $(parent).append(this.html);
            };
            if (this.__parent && this.__parent.__controls) {
                this.__parent.__controls.push(this);
            };
            !this.__dataSource && this.__parent && this.__parent.__dataSource && this.setDataSource(this.__parent.__dataSource);
            $(this).trigger(this.__eventParentChanged, val);
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "textAlign", {
        get: function() {
            return this.__textAlign;
        },
        set: function(val) {
            if (typeof val == "string") {
                val = n$.Enums.Alignment.Parse(val);
            };
            if (this.__textAlign != val) {
                $(this.html).setClass(this.__textAlign.class, false);
                this.__textAlign = val;
                $(this.html).setClass(this.__textAlign.class, true);
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "value", {
        get: function() {
            if (!this.__behavior.HasValue) {
                return undefined;
            };
            return this.getValue();
        },
        set: function(val) {
            if (!this.__behavior.HasValue) {
                return;
            };
            if (this.__behavior.Formattable && this.__format && this.__format.format && typeof this.__format.format === "function") {
                val = this.__format.format(val);
            };
            this.setValue(val);
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "visible", {
        get: function() {
            return this.__visible;
        },
        set: function(val) {
            if (this.__visible != val) {
                this.__visible = val;
                if (this.__visible) {
                    this.html.show();
                } else {
                    this.html.hide();
                };
            };
            if (this.__textAlign != val) {
                $(this.html).setClass(this.__textAlign.class, false);
                this.__textAlign = val;
                $(this.html).setClass(this.__textAlign.class, true);
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "width", {
        get: function() {
            return this.__width;
        },
        set: function(val) {
            if (this.__behavior.CanResize == true && val) {
                this.__width = val;
                this.__html.css({
                    width: val
                });
            };
        }
    });

    Object.defineProperty(n$.Controls.BaseControl.prototype, "wrapChildrenInLayout", {
        get: function () {
            var override = this.overrideWrapChildrenInLayout;
            return typeof override === "function" ? override() : true;
        }
    });
})();

// Methods
(function() {
    n$.Controls.BaseControl.prototype.append = function () {
        var me = this;
        var args = arguments.length === 1 && arguments[0] && arguments[0].constructor && arguments[0].constructor === Array ? arguments[0] : arguments;
        $.each(args, function (i, arg) {
            if (arg !== null && arg !== undefined) {
                arg.parent = me;
            }
        });
        return this;
    };

    n$.Controls.BaseControl.prototype.assignTo = function (obj, field) {
        obj[field] = this;
        return this;
    };

    n$.Controls.BaseControl.prototype.isValidDataSource = function () {
        return this.dataSource && this.dataSource instanceof n$.Data.DataSource;
    };

    n$.Controls.BaseControl.prototype.setDataSource = function (source) {
        var me = this;
        me.__dataSource = source;
        if (source) {
            if (!me.binder) {
                me.binder = new n$.Data.DataBinder({});
                me.bindings = me.bindings || [];
            };
            me.__field && me.bindings.push({ target: me, property: "value", field: me.__field });

            function reportBindingError(binding) {
                var target = binding.target.html && binding.target.html.length && binding.target.html[0],
                    msg = "Binding unsuccessful for target [" +
                        binding.target.id +
                        "]" +
                        (binding.target.parent
                            ? " of parent [" + binding.target.parent.id + "]"
                            : "") +
                        ": unknown field [" +
                        binding.field +
                        "]";

                n$.Debug.DataBinding.warning(msg);
                binding.target[binding.property] &&
                (
                    binding.target[binding.property] = "#ERROR",
                    binding.target.html.addClass("np-underline"),
                    target.overrideClickBehavior = true,
                    target.addEventListener("click",
                        function() {
                            n$.Popup.dialog({
                                caption: msg,
                                title: "Data binding issue",
                                style: n$.Enums.DialogStyle.Error
                            });
                        }));
            };

            setTimeout(function () {
                if (me.binder instanceof n$.Data.DataBinder) {
                    var bind = me.binder.bind;
                    me.binder.bind = function (source) {
                        me.bindings.forEach(function (binding) {
                            var field = source.getField(binding.field);
                            field
                                ? field.bind(binding.target, binding.property)
                                : reportBindingError(binding);
                        });
                        typeof bind === "function" && bind.call(me, source);
                    };
                    n$.State.dataStore.bind(me, source);
                };
            });
        };
    };

    n$.Controls.BaseControl.prototype.dispose = function () {
        var me = this;
        me.disposed = true;
        me.binder instanceof n$.Data.DataBinder && (delete me.binder);
        n$.State.dataStore.unbind(me);
        me.__controls.forEach(function (c) {
            c.dispose();
        });
    };

    n$.Controls.BaseControl.prototype.css = function (style, value) {
        if (this.__behavior.CanChangeStyle === true) {
            this.__html.css(style, value);
        };
    };

    n$.Controls.BaseControl.prototype.addClass = function (newClass) {
        if (this.__behavior.CanChangeStyle === true) {
            this.__html.addClass(newClass);
        };
        return this;
    };

    n$.Controls.BaseControl.prototype.removeClass = function (newClass) {
        if (this.__behavior.CanChangeStyle === true) {
            this.__html.removeClass(newClass);
        };
        return this;
    };

    n$.Controls.BaseControl.prototype.style = function (style) {
        if (this.__behavior.CanChangeStyle === true) {
            this.__html.attr("style", (this.__html.attr("style") || "") + style);
        };
        return this;
    };

    n$.Controls.BaseControl.prototype.select = function () {
        this.html.select();
        return this;
    };

    n$.Controls.BaseControl.prototype.selectAll = function() {
        this.html.selectRange(0, this.value.length);
    };

    n$.Controls.BaseControl.prototype.bindToState = function (name) {
        n$.State.bind(this, name);
        return this;
    };

    n$.Controls.BaseControl.prototype.isInDom = function() {
        if (this.html) {
            var root = this.html.parents("html")[0];
            return !!(root && root === document.documentElement);
        };
        return false;
    };
})();

;

//**************************************************************************************
//
//                                    Button Control
//
//**************************************************************************************

n$.Controls.Button = function (par) {
    /// <param name="par">{ html, parent, button }</param>

    n$.Controls.BaseControl.call(this,
        {
            Tag: "np-button",
            CanClick: true,
            CanEnable: true,
            CanHaveCaption: true,
            CanResize: true,
            HasValue: true,
            HasFontSize: true,
            HasFontStyle: true,

            isWysiwyg: true
        });

    var me = this, btnClass = (par.button && par.button.class) || "";
    this.private = {};
    this.prefix = {
        backgroundColor: "np-button-color-"
    };

    var eventClicked = $.Event("clicked");

    par =
        this.__getParams(
            par); // TODO: this should be a part of the initialization, up in the n$.Controls.BaseControl.call call
    if (par.button && par.button.action && par.button.action.Content) {
        par.button.action.Content.dataSource && (me.__dataSource = par.button.action.Content.dataSource);
        par.button.action.Content.Blocking && (btnClass += " np-blockingui");
    };

    par.button &&
        typeof par.button.onclick === "string" &&
        n$.UI.viewFunctions &&
        typeof n$.UI.viewFunctions[par.button.onclick] === "function" &&
        (par.button.onclick = n$.UI.viewFunctions[par.button.onclick]);

    var defaults = (par.default && typeof par.default === "object" && par.default) ||
        (par.button && par.button.default && typeof par.button.default === "object" && par.button.default);

    if (defaults && defaults.button && typeof defaults.button === "object") {
        if (defaults.button.class && typeof defaults.button.class === "string")
            btnClass += " " + defaults.button.class;
    };

    par.html = $(par.button.url ? "<a target='_top' href='" + par.button.url + "'>" : "<div/>")
        .attr({ "class": btnClass });

    function invokeClick() {
        if (!me.__enabled)
            return;

        $(me).trigger(eventClicked, me);

        var button = par.button;
        par.secure ||
            n$.Debug.UI.logPos({
                event: "Button.Clicked",
                data: {
                    caption: me.caption || (button && button.caption) || "<unknown>",
                    action: button && button.action
                        ? {
                            type: button.action.Type,
                            code: button.action.Type === "Workflow"
                                ? button.action.Workflow.Name
                                : button.action.Code
                        }
                        : "<unknown>"
                }
            });
        me._clicked(me.button);
        typeof par.onclick === "function" && par.onclick();
    };

    par.button.url || par.html.on("click", invokeClick);

    this.click = function () {
        $(me.html).click();
    };

    function addClickClass(u) {
        u
            ? me.enabled && $(me.html).addClass("active").mouseleave(function () { addClickClass(false); })
            : $(me.html).removeClass("active");
    };

    $(me.html).mousedown(function () { addClickClass(true); });
    $(me.html).mouseup(function () { addClickClass(false); });

    // n$.Controls.BaseControl initialization
    this.initialize(par, par.button);

    // "Private" members
    this.__showBehavior = "";

    // Properties
    me.setBackgroundImage = function (img) {
        me.html.removeClass("image-below");
        me.html.removeClass("image-above");
        me.html.removeClass("has-text-overlay");
        me.html.css("background", "");
        if (img) {
            me.html.css(
                "background",
                "url(\"" + img + "\") no-repeat 0 0 / 100% auto");
            par.button.content.CaptionPosition
                ? me.html.addClass(par.button.content.CaptionPosition === 1 ? "image-below" : "image-above")
                : par.button.caption && me.html.addClass("has-text-overlay");
        };
    };
    par.button &&
        par.button.content &&
        par.button.content.BackgroundImageUrl &&
        me.setBackgroundImage(par.button.content.BackgroundImageUrl);

    var icon;
    Object.defineProperty(me,
        "icon",
        {
            get: function () {
                return par.button.iconClass;
            },
            set: function (val) {
                if ((val === par.button.iconClass && icon) || (!val && !par.button.iconClass && !icon))
                    return;

                if (!icon) {
                    (me.html.prepend(icon = $("<span>").addClass("np-icon " +
                        par.button.iconClass +
                        " " +
                        (par.button.iconSize ? par.button.iconSize : "np-icon-size-32"))),
                        me.html.addClass("has-icon"));
                } else {
                    icon.removeClass(par.button.iconClass);
                };
                par.button.iconClass = val || "";

                if (par.button.iconClass) {
                    icon.addClass(par.button.iconClass);
                } else {
                    icon.empty();
                    icon.remove();
                    icon = null;
                }
            }
        });
    par.button.iconClass && (me.icon = par.button.iconClass);

    this.button = par.button;
    this.button.redirect = par.button.redirect;
    /* Stripping away any HTML (temporarily allowing it again, until a better solution is found
    par.button && par.button.caption && typeof par.button.caption === "string" &&
        (par.button.caption = par.button.caption.replace(/<(?:[^>=]|='[^']*'|="[^"]*"|=[^'"][^\s>]*)*>/gi, ""));
    */
    this.captionOverride = function (c) {
        return c && ("<span class=\"inner-content\">" + c + "</span>");
    };
    this.caption = par.button.hasOwnProperty("caption")
        ? par.button.caption
        : par.button.hasOwnProperty("value") && typeof par.button.value == "string"
            ? par.button.value
            : "";
    this.value = par.button.value;
    this.resultButton = false;
    if (par.button.type !== undefined) {
        this.type = n$.Enums.ButtonType.Parse(par.button.type);
        this.caption = l$.hasOwnProperty(par.button.type.caption)
            ? n$.Localization.Captions[par.button.type.caption]
            : par.button.type.caption;
        this.value = par.button.type;
        this.resultButton = true;
    } else {
        this.type = n$.Enums.ButtonType.Unspecified;
    };

    if (par.button) {
        var npact, nppar;
        if (par.button.action) {
            npact = "button_action_";
            switch (par.button.action.Type) {
                case "Menu":
                    npact += "menu_" + (par.button.action.MenuId || (par.button.caption || (par.button.iconClass || "")));
                    break;
                case "Workflow":
                    npact += "workflow_" + par.button.action.Workflow.Name;
                    break;
                case "Customer":
                    npact += "customer_" + par.button.action.Code;
                    break;
                case "Item":
                    npact += "item_" + par.button.action.Code;
                    break;
                case "Payment":
                    npact += "payment_" + par.button.action.Code;
                    break;
            };
        } else {
            if (par.button.type) {
                npact = "button_type_" + par.button.type.name;
            } else {
                if (par.button.value) {
                    npact = "button_value_" + (par.button.value || (par.button.caption || ""))
                } else {
                    npact = "button_caption_" + (par.button.caption || "");
                };
            };
        };
        if (par.button.action && par.button.action.Parameters) {
            for (var p in par.button.action.Parameters) {
                if (p.substring(0, 7) !== "_option" && par.button.action.Parameters.hasOwnProperty(p)) {
                    nppar = p + "=" + par.button.action.Parameters[p] + ";";
                };
            };
        };
        npact && (this.attr("np-action", npact));
        nppar && this.attr("np-params", nppar);
    };

    this.backgroundColor = par.button.backgroundColor || "default";
    this.color = par.button.color || "";

    if (par.button.showBehavior !== undefined) {
        this.showBehavior = n$.Enums.ShowBehavior.Parse(par.button.showBehavior);
    };

    if (par.flexwidth) {
        var s = par.flexwidth;
        me.style("flex: 1 1 " +
            s +
            "%; -webkit-box-flex: 1;-webkit-flex: 1 1 " +
            s +
            "%;-ms-flex: 1 1 " +
            s +
            "%;flex: 1 1 " +
            s +
            "%;width: calc(" +
            s +
            "% - 0.3em)");
    };

    $("span", me.html).mousedown(function () { addClickClass(true); });
    $("span", me.html).mouseup(function () { addClickClass(false); });

    // Data binding
    function initializeCustomJavaScript(button) {
        if (button.action &&
            button.action.Content &&
            button.action.Content.CustomJavaScript &&
            button.action.Content.CustomJavaScript.enable) {
            me.behavior = me.behavior || {};
            me.behavior.enable =
                eval(
                    "(function() { var data = me.modules.data, param = button.action.Parameters, parameters = param, view = n$.View.viewState; return function(row) { " +
                    button.action.Content.CustomJavaScript.enable +
                    "}; })()");
        }
    };

    this.autoEnable = par.autoEnable;
    this.enablable = true;
    !(par.action && par.action.Content && par.action.Content.DataBinding === true && par.autoEnable)
        ? (this.binder = null)
        : (
            this.enabled = false,
            this.modules = {},
            n$.Workflow.initializeDataModule(this.modules, "data", this.__dataSource),
            initializeCustomJavaScript(par.button)
        );

    var caption = me.caption;
    var re = /{{(\$?[\w\.]*)}}/g;
    re.exec(caption) &&
        me.captionBind(function (row) {
            me.caption = caption.replace(re,
                function (match, id, pos, str) {
                    if (row.position) {
                        var isTotal = typeof id === "string" && id.length && id[0] === "$";
                        var field = isTotal ? id.substring(1) : id;
                        var fld = isTotal ? row.dataSource.private.totals[field] : row.getField(field);
                        var val = fld ? fld.value : "";
                        return val;
                    };
                    return "";
                });
        });
    caption && typeof caption === "string" && (me.caption = caption.replace(re, ""));

    // Tooltip
    (function () {
        var timeout,
            shown,
            tooltip,
            tooltipText,
            tooltipShowTimeout = 1000,
            tooltipHideTimeout = 6000;

        function showTooltip() {
            if (!me.isInDom()) {
                requestHideTooltip();
                return;
            };

            shown = true;
            timeout = 0;
            tooltip = n$.UI.showTooltip(me.html, tooltipText);
            setTimeout(hideTooltip, tooltipHideTimeout);
        };

        function hideTooltip() {
            if (!shown)
                return;
            tooltip.subtleFadeOut();
            shown = false;
        };

        function requestHideTooltip() {
            timeout && (clearTimeout(timeout), timeout = 0);
            hideTooltip();
        };

        function requestShowTooltip() {
            timeout = setTimeout(showTooltip, tooltipShowTimeout);
        };

        var events = {
            mouseenter: requestShowTooltip,
            mouseleave: requestHideTooltip,
            click: requestHideTooltip,
            remove: requestHideTooltip
        };

        me.setTooltip = function (val) {
            tooltipText = val;
            $(me.html).off(events);
            val && $(me.html).on(events);
        };
    })();
    par.button &&
        par.button.tooltip &&
        me.setTooltip(par.button.tooltip);

    // Handling invalid action
    // TODO: add condition & par.action.Content...
    if (par.action &&
        par.action.Content &&
        par.action.Content &&
        par.action.Content.error &&
        !n$.Framework.Environment.Mobile()) {
        function getSeverityText(sev) {
            // TODO: localize severity texts
            if (sev === 1)
                return "This is a serious issue and clicking this button will most likely cause unexpected behavior, data corruption or loss. This button has been disabled for your safety." +
                    "<br><br>" +
                    "Would you like to enable this button, despite all the risks?";

            if (sev <= 5)
                return "This may not be a serious issue, but clicking this button may still cause unexpected behavior, data corruption or loss.";

            if (sev <= 10)
                return "This is unlikely to cause any issues, but still you should not click this button before you verify the situation with the support.";

            if (sev <= 100)
                return "Since clicking this button will most likely cause no action in the back end, the button was disabled.";

            return "";
        };

        setTimeout(function () {
            var severity = par.action.Content.errorSeverity;
            var msg = par.action.Content.error;

            n$.Debug.UI.warning("Invalid configuration detected: " +
                msg +
                "\nSeverity: " +
                severity);

            var icon = severity === 1 ? "stop" : severity < 8 ? "warn" : severity > 10 ? "quest" : "info";
            me.enabled = severity <= 10;
            if (severity === 1)
                me.enablable = false;

            var clickable = $("<div class=\"warning\"><img src=\"" +
                Microsoft.Dynamics.NAV.GetImageResource("icon-" + icon + ".png") +
                "\"></div>");
            me.html.prepend(clickable);

            clickable.on({
                click: function (e) {
                    // TODO: localize caption!
                    n$.Popup.dialog({
                        caption: msg + "<br><br>" + getSeverityText(severity),
                        title: "Menu button configuration issue",
                        style: severity === 1 ? n$.Enums.DialogStyle.Confirm : n$.Enums.DialogStyle.Error,
                        callback: function (result) {
                            if (result === n$.Enums.ButtonType.Yes) {
                                severity = 2;
                                me.enablable = true;
                                me.dataSource.position = me.dataSource.position;
                            };
                        }
                    });
                    e.stopImmediatePropagation();
                },
                "mousedown touchbegin": function (e) {
                    e.stopImmediatePropagation();
                },
                "mouseup touchend":
                    function (e) {
                        e.stopImmediatePropagation();
                    }
            });
        });
    }
};

n$.inherit(n$.Controls.Button, n$.Controls.BaseControl);

n$.Controls.Button.prototype.binder = new n$.Data.DataBinder({
    position: function (row) {
        var me = this;

        me.captionBinders &&
            me.captionBinders.forEach(function (f) {
                f.call(me, row);
            });

        if (!me.autoEnable)
            return;

        if (!me.enablable) {
            me.enabled = false;
            return;
        };

        me.behavior && typeof me.behavior.enable === "function"
            ? me.enabled = row.position && this.behavior.enable(row)
            : (row.position
                ? (me.enabled || (me.enabled = true))
                : (me.enabled && (me.enabled = false)));
    }
});

n$.Controls.Button.prototype.captionBind = function (binder) {
    this.captionBinders = this.captionBinders || [];
    if (typeof binder === "function")
        this.captionBinders.push(binder);
    this.binder || (this.binder = n$.Controls.Button.prototype.binder);
};

Object.defineProperty(n$.Controls.Button.prototype,
    "backgroundColor",
    {
        get: function () {
            return this.private.backgroundColor || "";
        },
        set: function (val) {
            if (this.private.backgroundColor !== val) {
                $(this.html).setClass(this.prefix.backgroundColor + this.private.backgroundColor, false);
                this.private.backgroundColor = val.toLowerCase();
                $(this.html).setClass(this.prefix.backgroundColor + this.private.backgroundColor, true);
            };
        }
    });

Object.defineProperty(n$.Controls.Button.prototype,
    "color",
    {
        get: function () {
            return this.private.color || "";
        },
        set: function (val) {
            if (this.private.color !== val) {
                this.private.color = val;
                $(this.html).css("color", this.private.color || "");
            };
        }
    });

Object.defineProperty(n$.Controls.Button.prototype,
    "showBehavior",
    {
        get: function () {
            return this.__showBehavior;
        },
        set: function (val) {
            this.__showBehavior !== val &&
                ($(this
                    .html)
                    .setClass(this.__showBehavior.class, false), this
                        .__showBehavior = val, $(this.html).setClass(this.__showBehavior.class, true));
        }
    });

Object.defineProperty(n$.Controls.Button.prototype,
    "parentGrid",
    {
        get: function () {
            if (this.parent instanceof n$.Controls.ButtonGrid.Row)
                return this.parent.parent;
            return "";
        }
    });

n$.Controls.Button.prototype._clicked = function (button) {
    var me = this;

    function executeClick() {
        if (!button || !button.action)
            return;
        var dataSourceParam = { dataSource: me.__dataSource };
        button.action.Content &&
            button.action.Content.dataSource &&
            (dataSourceParam.dataSource = button.action.Content.dataSource);

        function workflowCompletionCallback() {
            n$.Capabilities.KeyboardBindings.actionActive(false);
            setTimeout(function () {
                typeof me._awaitWorkflowCompleted === "function" &&
                    me._awaitWorkflowCompleted();
                me._awaitWorkflowCompleted && delete me._awaitWorkflowCompleted;
            });
        };

        if (!me.action) {
            var constructor = n$.Workflow.ActionHandler[button.action.Type];
            if (typeof constructor === "function") {
                // ReSharper disable once InconsistentNaming
                var action = new constructor(button);
                action.source = me;
                action.grid = me.parentGrid;
                action.cache
                    ? (me.action = action)
                    : (
                        n$.Capabilities.KeyboardBindings.actionActive(true),
                        action.execute(dataSourceParam, workflowCompletionCallback)
                    );
            } else {
                n$.Debug.Popup.error("An unsupported button action type: " +
                    button.action.Type,
                    true);
            }
        };
        me.action && typeof me.action.execute === "function" &&
            (
                n$.Capabilities.KeyboardBindings.actionActive(true),
                me.action.execute(dataSourceParam, workflowCompletionCallback)
            );
    };

    button && button.content && button.content.SecureMethod
        ? n$.Security.evaluateMethod(button.content.SecureMethod, button, executeClick)
        : executeClick();
};

;n$.Controls.ButtonGrid = {};



//**************************************************************************************
//
//                                      Button Grid Control
//
//**************************************************************************************

n$.Controls.ButtonGrid.Grid = function(par) {
    /// <param name="par">{ html, parent, rows, oneRow }</param>

    var me = this;

    n$.Controls.BaseControl.call(me,
        {
            Tag: "np-buttongrid",
            CanEnable: true,
            CanResize: true,

            isWysiwyg: true
        });
    par = me.__getParams(par);
    me.eventSource = par.thisGridControl || me;

    // n$.Controls.BaseControl initialization
    me.initialize(par);
    me.secure = !!par.secure;

    me.layout = par;

    // The grid creation logic is in the setter of this property
    par.rows.fontSize = par.fontSize;
    me.oneRow = par.oneRow === true;
    me.skipUndefined = par.skipUndefined === true;

    if (par.rows && typeof par.rows === "object" && par.default && typeof par.default === "object")
        par.rows.default = par.default;

    me.grid = par.rows;
    me.invokeClicked = function (button) {
        $(me.eventSource).trigger("clicked", button);
    };
};

n$.Controls.ButtonGrid.Grid.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.ButtonGrid.Grid.prototype.constructor = n$.Controls.ButtonGrid.Grid;

Object.defineProperty(n$.Controls.ButtonGrid.Grid.prototype, "grid", {
    get: function () {
        return this.rows;
    },
    set: function (val) {
        this.gridRows = [];
        this.rows = val;

        var me = this;
        this.html.empty();

        function calculateHeights() {
            if (me.rows) {
                var allFactors = 0;
                $.each(me.rows, function (i, row) {
                    var maxFactor = row.heightFactor || 1;
                    $.each(row, function(b, button) {
                        var thisFactor = button.heightFactor || 0;
                        if (thisFactor > maxFactor) {
                            maxFactor = thisFactor;
                        };
                    });
                    allFactors += maxFactor;
                    row.heightFactor = maxFactor;
                });
                $.each(me.gridRows, function(r, row) {
                    var s = 100 * (row.row.heightFactor / allFactors);
                    row.style("flex: 1 1 " + s + "%; -webkit-box-flex: 1;-webkit-flex: 1 1 " + s + "%;-ms-flex: 1 1 " + s + "%;flex: 1 1 " + s + "%;");
                });
            };
        }

        if (this.rows) {
            if (this.oneRow && n$.Window.IsMobile()) {
                var oneRow = [];
                $.each(this.rows, function (r, row) { $.each(row, function (b, button) { oneRow.push(button); }); });
                this.rows = [oneRow];
                this.html.addClass("one-row");
            };
            $.each(this.rows, function (r, row) {
                if (val.default && typeof val.default === "object")
                    row.default = val.default;

                me.gridRows.push(new n$.Controls.ButtonGrid.Row({ parent: me, row: row, fontSize: val.fontSize, secure: me.secure }).on("buttonClicked", function (event, button) {
                    $(me).trigger("buttonClicked", [button]);
                }));
            });

            calculateHeights();
        };;
    }
});

//**************************************************************************************
//
//                                   Button Grid Row Control
//
//**************************************************************************************

n$.Controls.ButtonGrid.Row = function(par) {
    /// <param name="par">{ parent, row }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-buttongridrow", PropagateParentId: true, CanResize: true });

    par = this.__getParams(par);
    par.html = null;

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    var eventButtonClicked = $.Event("buttonClicked");

    this.row = par.row;

    var maxWidth = 0;
    par.row.forEach(function(b) { maxWidth += b.widthFactor || 1; });

    var me = this;
    $.each(par.row,
        function (i, button) {
            if (par.row.default && typeof par.row.default === "object") {
                button.default = par.row.default;
                if (button.button && typeof button.button.default === "object")
                    button.button.default = button.default;
            };

            if (me.parent.skipUndefined && (button.caption === undefined) && (button.action === undefined) && !button.enabled)
                return;

            button.heightFactor = me.row.heightFactor || 1;
            if (button.clicked === undefined) {
                button.clicked = function(event, btn) {
                    $(me).trigger(eventButtonClicked, btn);
                    me.parent.invokeClicked(btn);
                };
            } else {
                var clicked = button.clicked;
                button.clicked = function(event, btn) {
                    clicked(btn);
                    $(me).trigger(eventButtonClicked, btn);
                    me.parent.invokeClicked(btn);
                };
            };
            new n$.Controls.Button({
                parent: me,
                button: button,
                fontSize: par.fontSize,
                secure: par.secure,
                flexwidth: (100 * (button.widthFactor || 1)) / maxWidth
            }).on("clicked", button.clicked);
        });
};

n$.Controls.ButtonGrid.Row.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.ButtonGrid.Row.prototype.constructor = n$.Controls.ButtonGrid.Row;

;

//**************************************************************************************
//
//                                    Container Control
//
//**************************************************************************************

n$.Controls.Container = function (par) {
    /// <param name="par">{ containerType, parent }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-container", CanHaveCaption: true, CanChangeStyle: true, CanResize: true, HasFontSize: true });

    par = this.__getParams(par);
    par.html = par.html && par.html instanceof HTMLElement ? par.html : $(par.containerType ? par.containerType.tag : "<div/>");
    par.flow || (par.flow = "horizontal");

    // n$.Controls.BaseControl initialization
    this.initialize(par);
    this.type = par.containerType;
};

n$.Controls.Container.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.Container.prototype.constructor = n$.Controls.Container;

;

// TODO: all access to dataSource property should go through functions that return boolean indicating success and log problem to console

//**************************************************************************************
//
//                                 DataCaption Control
//
//**************************************************************************************

n$.Controls.DataCaption = function (par) {
    /// <param name="par">{ caption, value, parent }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-datacaption", CanHaveValue: true, CanEnable: true, Formattable: true, CanClick: true, HasFontSize: true });

    par = this.__getParams(par);
    par.html = null;

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    this.__dataCaption = null;
    this.__dataValue = null;

    this.__npIsAppending = true;
    this.append(
        new n$.Controls.Label({ caption: par.caption, "class": "caption", overrideCanClick: true, inheritFontSize: true }).assignTo(this, "__dataCaption"),
        new n$.Controls.Label({ caption: par.value, "class": "value", overrideCanClick: true, inheritFontSize: true }).assignTo(this, "__dataValue"));
    this.__npIsAppending = false;
    if (par.hasOwnProperty("skipIf")) {
        this.skipIf = {
            value: par.skipIf,
            numeric: typeof par.skipIf === "number"
        };
        this.css("display", "none");
    };
};

n$.Controls.DataCaption.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.DataCaption.prototype.constructor = n$.Controls.DataCaption;

Object.defineProperty(n$.Controls.DataCaption.prototype, "caption", {
    get: function () {
        return this.__dataCaption.caption;
    },
    set: function (val) {
        if (val != null) {
            this.__dataCaption.caption = val;
        }
    }
});

Object.defineProperty(n$.Controls.DataCaption.prototype, "value", {
    get: function () {
        return this.__dataValue.caption;
    },
    set: function (val) {
        if (val != null) {
            this.__dataValue.caption = val;
            if (this.skipIf) {
                var skipIf = val === this.skipIf.value;
                if (!skipIf && this.skipIf.numeric) {
                    var v = n$.NewEnums.DataType.behavior[n$.NewEnums.DataType.Decimal].parse(val);
                    if (v === this.skipIf.value) {
                        skipIf = true;
                    };
                };
                if (skipIf)
                    this.css("display", "none");
                else
                    this.css("display", "flex");
            }
        }
    }
});



//**************************************************************************************
//
//                               DataCaptionBox Control
//
//**************************************************************************************

n$.Controls.DataCaptionBox = function (par) {
    /// <param name="par">{ parent, captions | rows, caption, value }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-datacaptionbox", CanEnable: true, CanResize: true, HasFontSize: true });

    par = this.__getParams(par);
    par.html = null;

    // n$.Controls.BaseControl initialization
    this.initialize(par);
    this.initializeCaptions(par);

    par.binding && this.setupBindings(par.binding, par);
};

n$.Controls.DataCaptionBox.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.DataCaptionBox.prototype.constructor = n$.Controls.DataCaptionBox;

n$.Controls.DataCaptionBox.prototype.initializeCaptions = function (par) {
    if (par && par.binding && par.binding.captionSet && !par.binding.captionSet.title)
        return;

    this.__labelCaption = new n$.Controls.DataCaption({
        "class": "np-datacaptionbox-title",
        caption: this.caption,
        value: this.value,
        fontSize: n$.Enums.FontSize.Medium
    });
    this.append(this.__labelCaption);
};

n$.Controls.DataCaptionBox.prototype.setupBindings = function(binding, par) {
    binding.dataSource && n$.State.dataStore.bind(this, binding.dataSource);
    binding.captionSet && this.bindCaptions(binding.captionSet);
    if (binding.fallback) {
        par = $.extend({}, par);
        par.hasOwnProperty("fallback") && delete par.fallback;
        par.binding = binding.fallback;
        var fallback = new n$.Controls.DataCaptionBox(par);
        this.fallback = [];
        var me = this;
        fallback.__controls.forEach(function (control) {
            me.fallback.push(control);
        });
        me.fallback.forEach(function(control) {
            control.visible = false;
            control.isFallback = true;
            me.append(control);
        });
        this.fallback.source = binding.fallback.dataSource;
    };
};

n$.Controls.DataCaptionBox.prototype.bindCaptions = function(captions) {
    this.captions = captions;

    if (captions.title) {
        captions.title.field && this.isValidDataSource() && this.dataSource.getField(captions.title.field).bind(this, captions.title.caption ? "value" : "caption");
        captions.title.caption && (this.caption = captions.title.caption);
    };

    var addCaption = function(row, parent, cls) {
        var columnCaption = row.field && this.isValidDataSource() ? this.dataSource.getColumnById(row.field).caption : row.caption || "";
        var obj = { caption: row.caption || columnCaption, value: "" };
        if (row.hasOwnProperty("skipIf")) obj.skipIf = row.skipIf;
        var caption = new n$.Controls.DataCaption(obj);
        cls && (caption.class = cls);
        parent.append(caption);
        this.isValidDataSource() && row.field
            ? this.dataSource.getField(row.field).bind(caption, "value")
            : row.total && this.dataSource.getTotal(row.total).bind(caption, "value");
    }.bind(this);

    captions.rows && typeof captions.rows.forEach === "function" &&
        captions.rows.forEach(function (row) {
            if (typeof row.left === "object" && typeof row.right === "object") {
                var parent = new n$.Controls.Html({ "class": "left-right" + ( row.class ? " " + row.class : "") });
                addCaption(row.left, parent, "left");
                addCaption(row.right, parent, "right");
                this.append(parent);
            } else {
                addCaption(row, this);
            };
        }.bind(this));
};

n$.Controls.DataCaptionBox.prototype.binder = new n$.Data.DataBinder({
    position: function (row) {
        (function (show) {
            this.__controls.forEach(function (control) {
                !control.isFallback && (control.visible = show);
            });
            this.fallback &&
                this.fallback.forEach(function (control) {
                    control.visible = !show;
                });
        }).call(this, row.position === null ? !this.fallback || row.dataSource === this.fallback.source : !this.fallback || row.dataSource !== this.fallback.source);
    }
});

Object.defineProperty(n$.Controls.DataCaptionBox.prototype, "caption", {
    get: function () {
        return this.__caption;
    },
    set: function (val) {
        if (val == null)
            return;

        this.__caption = val;
        if (this.__labelCaption) {
            this.__labelCaption.caption = val;
        };
    }
});

Object.defineProperty(n$.Controls.DataCaptionBox.prototype, "value", {
    get: function () {
        return this.__value;
    },
    set: function (val) {
        if (val == null)
            return;

        this.__value = val;
        if (this.__labelCaption) {
            this.__labelCaption.value = val;
        };
    }
});

n$.Controls.DataCaptionBox.prototype.setRows = function(captions) {
    if (captions) {
        if (this.__rowCount && this.__rowCount > 0) {
            for (var i = 0; i < this.__rowCount; i++) {
                delete this["dataCaption" + i];
                if (i < captions.length) {
                    if (captions[i].caption == null) captions[i].caption = this.__captions[i].caption;
                    if (captions[i].value == null) captions[i].value = this.__captions[i].value;
                };
            };
        };
        this.__captions = captions;
        this.emptyChildren();
        this.__rowCount = captions.length;
        var me = this;
        me.__npIsAppending = true;
        this.__insertLabelCaption();
        $.each(captions, function(index, caption) {
            me.append(
                new n$.Controls.DataCaption({
                    caption: caption.caption,
                    value: caption.value,
                    "class": "sale-item-infobox"
                }).assignTo(this, "dataCaption" + index));
        });
        me.__npIsAppending = false;
        this.__bindEvents();
    };
    return this;
};

;

//**************************************************************************************
//
//                                 DataEntryPad Control
//
//**************************************************************************************

n$.Controls.DataEntryPad = function(par) {
    /// <param name="par">{ html, parent, masked, type }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-dataentrypad", CanResize: true, HasValue: true });

    par = this.__getParams(par);

    // Value property override functions
    this.getValue = function() {
        return this.__numpadInput.value;
    };
    this.setValue = function(val) {
        this.__numpadInput.value = val;
    };

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    // Events
    var eventInputComplete = $.Event("inputComplete");
    var eventButtonClicked = $.Event("buttonClicked");
    var eventInput = $.Event("input");
    var eventCancelled = $.Event("cancelled");

    var me = this;

    function eraseInput() {
        me.value = "";
        $(me).trigger(eventInput);
    }

    // Subcontrols
    this.__numpadInput = null;
    this.append(
        new n$.Controls.Container({ "class": "entry-data" }).append(
            new n$.Controls.TextBox({
                type: par.masked === true ? "password" : "text",
                fontSize: n$.Enums.FontSize.Semilarge,
                value: par.text,
                on: {
                    inputComplete: function() {
                        $(me).trigger(eventInputComplete);
                    },
                    inputCancelled: function() {
                        $(me).trigger(eventCancelled);
                    },
                    input: function() {
                        $(me).trigger(eventInput);
                    }
                }
            }).assignTo(me, "__numpadInput"),
            new n$.Controls.Button({
                html: $("<span/>"),
                button: {
                    caption: l$.Login_Clear,
                    backgroundColor: "Gray"
                },
                on: {
                    clicked: function() {
                        eraseInput();
                    }
                }
            })
        ),
        new n$.Controls.NumpadFull({ fontSize: n$.Enums.FontSize.Semilarge, secure: par.secure }).on("buttonClicked", function(event, btn) {
            me.inputTextFromButton(me, btn, me.__numpadInput, eventInputComplete, eventButtonClicked);
            $(me).trigger(eventInput);
        })
    );

    this.getCalculatedValue = function() {
        return n$.NewEnums.NumpadType.behavior[par.type].calculate(me.value);
    };

    this.alarmInvalidValue = function() {
        me.__numpadInput.html.effect("shake", { direction: "up", times: 3, distance: 3 }, 300);
        me.__numpadInput.html.addClass("np-error");
    };

    this.removeInvalidValueAlarm = function () {
        me.__numpadInput.html.removeClass("np-error");
    };
};

n$.Controls.DataEntryPad.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.DataEntryPad.prototype.constructor = n$.Controls.DataEntryPad;


;

//**************************************************************************************
//
//                                   DatePicker Control
//
//**************************************************************************************

n$.Controls.DatePicker = function(par) {
    /// <param name="par">{ parent, options }</param>

    n$.Controls.BaseControl.call(this,
        {
            Tag: "np-datepicker",
            CanHaveCaption: false,
            CaptionWithoutSpan: false,
            Formattable: false,
            CanResize: false,
            HasValue: true
        });

    par = this.__getParams(par);
    par.isCustomHtml = false;

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    function dateStrToDate(str) {
        if (!str)
            return new Date();

        if (typeof str === "object" && str instanceof Date)
            return str;

        if (typeof str !== "string")
            return new Date();

        str = str.replace(/\-/g, "");
        var y = str.substr(0, 4),
            m = str.substr(4, 2) - 1,
            d = str.substr(6, 2);

        var date = new Date(y, m, d);

        // Coercion is intended here! Do not "optimize" by replacing == with ===
        // ReSharper disable CoercedEqualsUsing
        return (date.getFullYear() == y && date.getMonth() == m && date.getDate() == d) ? date : new Date();
        // ReSharper restore CoercedEqualsUsing
    };

    if (par.date)
        par.date = dateStrToDate(par.date);

    // http://t1m0n.name/air-datepicker/docs/
    var dp = this.html.datepicker({ language: "en" }).data("datepicker");
    dp.selectDate(par.date || new Date());

    this.getValue = function() {
        return dp && dp.selectedDates && (dp.selectedDates.length > 0 ? dp.selectedDates[0] : Date.now());
    };
    this.setValue = function(val) {
        if (val instanceof Date)
            dp.date = val;
    };
};

n$.Controls.DatePicker.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.DatePicker.prototype.constructor = n$.Controls.DatePicker;

;

//**************************************************************************************
//
//                                     Grid Cell Control
//
//**************************************************************************************

n$.Controls.GridCell = function (par) {
    /// <param name="par">{ caption, parent, format, checkbox, row, field }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-grid-cell", HtmlTag: "td", CanHaveCaption: true, CaptionWithoutSpan: true, Formattable: true, CanClick: true });

    par = this.__getParams(par);
    par.html = null;

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    if (par.format) { this.format = par.format; };

    this.__checkbox = null;
    this.__row = par.row;
    this.__field = par.field;
    var me = this;

    if (par.checkbox !== true) {
        this.caption = par.caption;
    } else {
        this.html.empty();
        this.__checkbox = $("<input type='checkbox'>");
        this.html.append(this.__checkbox);
        if (par.row[par.field] === true) {
            this.__checkbox.prop("checked", true);
        };
        this.__checkbox.on("click", function (event) {
            me.__row[me.__field] = !me.__row[me.__field];
            me.__checkbox.prop("checked", me.__row[me.__field]);
            event.__mySource = me;
        });
    }
};

n$.Controls.GridCell.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.GridCell.prototype.constructor = n$.Controls.GridCell;

//**************************************************************************************
//
//                                        Grid Control
//
//**************************************************************************************

n$.Controls.Grid = function(par) {
    /// <param name="par">{ html, parent, columns, rows }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-grid", CanEnable: true, CanResize: true, HasFontSize: true });

    par = this.__getParams(par);

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    this.__columns = [];
    this.__lastRows = [];
    this.tableCtrl = null;
    this.tableParent = null;
    this.__lastTr = 0;
    this.__id = n$.Controls.Grid.lastId++;
    this.options = par.options;
    this.forceColumns = par.columns;

    this.append(
        new n$.Controls.Container({ "class": "np-grid-table np-grid-table-head", fontSize: par.fontSize }).append(
            new n$.Controls.Html({ html: "<table><thead id='np-head" + this.__id + "'/></table>" })),
        new n$.Controls.Container({ "class": "np-grid-table np-grid-table-body", fontSize: par.fontSize })
        .assignTo(this, "tableParent")
        .append(
            new n$.Controls.Html({ html: "<table><tbody id='np-body" + this.__id + "'/></table>" }).assignTo(this,
                "tableCtrl")));

    var datasrc = n$.State.dataStore.getSource(par.dataSource);
    par.totals &&
        par.totals.forEach(function (total) {
            var totid = "subtotal_" + total.total, totctrl;
            this.append(
                totctrl = this.subtotal = new n$.Controls.Html({
                    html: "<div class='subtotal'></div>",
                    caption: total.caption,
                    fontSize: par.fontSize
                })
                .append(new n$.Controls.Html({ html: "<span>", id: "grid-subtotal", height: "40px" })
                    .assignTo(this, totid))
            );
            if (datasrc) {
                var tot = datasrc.getTotal(total.total);
                tot && tot.bind(this[totid], "caption", function (val) {
                    if (val < 0)
                        totctrl.addClass("negative");
                    else
                        totctrl.removeClass("negative");
                });
            };
        }.bind(this));
    this.table = this.tableCtrl.html;
    this.tableBody = $("tbody", this.table);

    var me = this, selecting, selectedRows = [];
    this.__rowIndex = {};

    this.currentRow = null;

    this.upRow = function() {
        var prev = me.currentRow[0].previousSibling;
        prev && prev.click();
    };
    this.downRow = function() {
        var next = me.currentRow[0].nextSibling;
        next && next.click();
    };
    this.getSelectedRows = function() {
        return selectedRows;
    };

    function scrollIntoView(tr) {
        var pos = tr.position(), up = pos.top < tr.height() + 4, down = pos.top > me.tableParent.html.height();
        if (!(up || down))
            return;
        tr[0].scrollIntoView(up);
        document.body.scrollIntoView(false);
    };

    function includeColumn(col, widthObj) {
        if (!par.columns || par.columns.source !== "json")
            return col.visible;

        var include = false;
        par.columns.forEach(function (column) {
            if (include)
                return;

            var left = typeof col === "string" || typeof col === "number"
                ? col + ""
                : ((col instanceof n$.Data.DataColumn) || col.fieldId ? col.fieldId + "" : "");

            var right = typeof column === "string" || typeof column === "number"
                ? column + ""
                : ((column instanceof n$.Data.DataColumn) || column.fieldId ? column.fieldId + "" : "");

            if (left === right) {
                include = true;
                if (typeof column === "object" && column.fieldId && column.width) {
                    widthObj.width = column.width;
                    widthObj.caption = column.caption;
                };
            };
        });

        return include;
    };

    var totalWidth = 0;
    var widths = {};
    datasrc.columns.forEach(function (column) {
        var widthObj = { width: column.width };
        if (includeColumn(column, widthObj)) {
            totalWidth += widthObj.width;
        };
    });

    par.columns &&
        par.columns.forEach(function (column) {
            column &&
                typeof column === "object" &&
                column.width &&
                typeof column.width === "number" &&
                column.fieldId &&
                (widths[column.fieldId + ""] = column.width);
        });

    this.binder = new n$.Data.DataBinder({
        bind: function(source) {
            var head = $("thead#np-head" + me.__id);
            head.empty();

            me.binder.source = source;
            source.columns.forEach(function (column) {
                var widthObj = { width: column.width };
                if (!includeColumn(column, widthObj))
                    return;

                var w = ((widthObj.width / totalWidth) * 100) + "%";
                head.append($("<th>").addClass(n$.Css.TextAlign.Center).css("width", w).append(widthObj.caption || column.caption));
            }.bind(this));
        },
        insert: function(row) {
            var body = $("tbody#np-body" + me.__id);

            var binder = me.binder;
            var tr = $("<tr>").click(function () {
                if (par.options && par.options.doNotSyncPosition) {
                    binder.position(this.__row);
                    if (par.options.withCheckboxes)
                        tr.toggleCheckbox();
                    return;
                };

                selecting = true;
                    this.__row.dataSource.position = this.__row.position;
                $(me).trigger("selected");
                selecting = false;
            });
            tr.length && (tr[0].__row = row);

            row.dataSource.columns.forEach(function (column) {
                var widthObj = { width: column.width };
                if (!includeColumn(column, widthObj))
                    return;

                var field = row.getField(column.fieldId);
                var label = new n$.Controls.GridCell({
                    caption: field ? field.value : "#ERROR",
                    textAlign: n$.NewEnums.DataType.behavior[column.dataType].textAlign
                });
                tr.append(label.html.css("width", ((widthObj.width / totalWidth) * 100) + "%"));
                me.__rowIndex[row.position] = tr;
                field && field.bind(label, "caption");
            });

            if (par.options && par.options.withCheckboxes) {
                var td = $(tr.find("td")[0]);
                var checked = false;
                var checkbox;

                function check(c) {
                    if (c) {
                        selectedRows.push(tr[0].__row);
                        return;
                    };
                    var indicesToRemove = [];
                    for (var i = 0; i < selectedRows.length; i++) {
                        if (selectedRows[i] === tr[0].__row)
                            indicesToRemove.push(i);
                    };
                    indicesToRemove.forEach(function(index) {
                        selectedRows.splice(index, 1);
                    });
                };

                td.prepend(checkbox = $("<input type=\"checkbox\">"));
                tr.toggleCheckbox = function() {
                    checked = !checked;
                    checkbox.prop("checked", checked);
                    check(checked);
                };
                if (par.options.checkedByDefault) {
                    checked = true;
                    checkbox.prop("checked", true);
                    if (selectedRows.indexOf(tr[0].__row) < 0)
                        selectedRows.push(tr[0].__row);
                };
            };

            body.append(tr);
            $(me).trigger("rowrendered", { row: row, tr: tr });
            $(me).trigger("sourceupdated", me.binder.source);
        },
        "delete": function(row) {
            me.__rowIndex[row.position].remove();
            delete me.__rowIndex[row.position];

            $(me).trigger("sourceupdated", me.binder.source);
        },
        update: function(row) {
            $(me).trigger("rowrendered", { row: row, tr: me.__rowIndex[row.position] });
            $(me).trigger("sourceupdated", me.binder.source);
        },
        position: function(row) {
            if (!row.position)
                return;

            var tr = me.__rowIndex[row.position];
            tr &&
            (me.html.find("tr").removeClass("np-tr-highlight"), tr.addClass("np-tr-highlight"), tr[0] &&
                setTimeout(function () { scrollIntoView(tr) }));
            me.currentRow = tr;
        }
    });

    var data = par.dataSource instanceof n$.Data.DataSource
        ? par.dataSource
        : (typeof par.dataSource === "string"
            ? n$.State.dataStore.getSource(par.dataSource)
            : null);

    me.rebindAllData = function () {
        setTimeout(function() {
            if (!data)
                return;

            me.binder.bind.call(me, data);
            data.private.rows.forEach(function(row) {
                me.binder.insert.call(me, row);
            });
        });
    };

    me.rebindAllData();
};

n$.Controls.Grid.options = {
    ReverseOrder: false
};
n$.Controls.Grid.lastId = 0;

n$.Controls.Grid.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.Grid.prototype.constructor = n$.Controls.Grid;

Object.defineProperty(n$.Controls.Grid.prototype, "rows", {
    get: function () {
        return this.dataSource;
    },
    set: function (val) {
        this.bind(val);
    }
});

;

//**************************************************************************************
//
//                                      Html Control
//
//**************************************************************************************

n$.Controls.Html = function (par) {
    /// <param name="par">{ html, parent }</param>

    n$.Controls.BaseControl.call(this, { Tag: "np-html", CanHaveCaption: true, CaptionWithoutSpan: true, Formattable: true, CanResize: true, HasFontSize: true });

    par = this.__getParams(par);
    par.isCustomHtml = true;

    // n$.Controls.BaseControl initialization
    this.initialize(par);
};

n$.Controls.Html.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.Html.prototype.constructor = n$.Controls.Html;

;

//**************************************************************************************
//
//                                      Image Control
//
//**************************************************************************************

n$.Controls.Image = function (par) {
    /// <param name="par">{ src, parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-image" });

    par = this.__getParams(par);
    par.html = $("<div>");

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    this.img = null;
    this.append(new n$.Controls.Html({ html: "<img/>" }).assignTo(this, "img"));

    var img = new Image();
    img.onload = function () {
        par.src && (this.src = par.src);
        this.alternativeSrc && (this.src = this.alternativeSrc);
        this.attr("max-width", par.width || img.width);
        this.attr("max-height", par.height || img.height);
        par.alt && this.attr("alt", par.alt);
        par.title && this.attr("title", par.title);
    }.bind(this);
    img.src = par.src;
};

n$.Controls.Image.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.Image.prototype.constructor = n$.Controls.Image;

Object.defineProperty(n$.Controls.Image.prototype, "src", {
    get: function () {
        return this.img.attr("src");
    },
    set: function (val) {
        this.img.attr("src", val);
    }
});

;

//**************************************************************************************
//
//                                      Input Control
//
//**************************************************************************************

n$.Controls.Input = function (par) {
    /// <param name="par">{ caption, parent, format }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-input", CanHaveCaption: true, Formattable: true, HasFontSize: true, HasFontStyle: true, CanEnable: true });

    par = this.__getParams(par);
    par.html = null;

    var me = this;
    me.ctrlLabel = null;
    me.ctrlText = null;
    var content = [new n$.Controls.Html({ html: "<label/>" }).assignTo(me, "ctrlLabel")];
    if ($.isArray(par.field) && par.field.length) {
        me.ctrlTexts = [];
        for (var i = 0; i < par.field.length; i++) {
            var ctrl = new n$.Controls.TextBox({ field: par.field[i], secure: par.secure });
            content.push(ctrl);
            me.ctrlTexts.push(ctrl);
        };
        me.ctrlText = me.ctrlTexts[0];
        delete par.field;
    } else {
        content.push(new n$.Controls.TextBox().assignTo(me, "ctrlText"));
        $(ctrlText.html).on("mouseup",
            function() {
                debugger;
                // TODO: this should fire "input" event on this control
            });
    };

    me.ctrlText.inputFilter = true;
    me.ctrlLabel.html.attr("for", me.ctrlText.id);

    if (!par.hasOwnProperty("caption") || (par.caption === undefined)) {
        par.caption = "";
    };

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    setTimeout(function() {
        me.append(content);
    });

    me.getFocusElement = function() {
        return me.ctrlText.html[0];
    };
};

n$.inherit(n$.Controls.Input, n$.Controls.BaseControl);
n$.directProperty(n$.Controls.Input.prototype, "caption", function() { return this.ctrlLabel; });
n$.directProperty(n$.Controls.Input.prototype, "value", function () { return this.ctrlText; });

Object.defineProperty(n$.Controls.Input.prototype, "enabled", {
    get: function() {
        return this.ctrlText.enabled;
    },
    set: function(value) {
        this.ctrlTexts ? this.ctrlTexts.forEach(function(c) { c.enabled = value; }) : this.ctrlText.enabled = value;
    }
});

;

//**************************************************************************************
//
//                                      Input Control
//
//**************************************************************************************

n$.Controls.InputWithCaption = function (par) {
    /// <param name="par">{ caption, parent, format }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-input-with-caption", CanHaveCaption: true, Formattable: true, HasFontSize: true, HasFontStyle: true, CanEnable: true });

    var me = this;
    
    var eventInputComplete = $.Event("inputComplete");

    par = this.__getParams(par);
    par.html = null;

    if (!par.hasOwnProperty("caption") || (par.caption === undefined)) {
        par.caption = "";
    };

    this.ctrlLabel = new n$.Controls.Label({ caption: l$.Sale_SalesPersonCode });
    this.ctrlText = new n$.Controls.TextBox({
        fontSize: "Medium",
        type: par.inputType || "text",
        secure: par.secure,
        inputFilter: par.inputFilter,
        on: {
            inputComplete: function(event) {
                $(me).trigger(eventInputComplete);
            }
        }
    });
    par.showErase === false && this.ctrlText.css("margin-right", 0);

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    function eraseInput() {
        me.value = "";
    };

    this.append(
        this.ctrlLabel,
        new n$.Controls.Container({ "class": "np-inputholder" }).append(
            this.ctrlText,
            par.showErase === false ? void (0) :
            new n$.Controls.Button(
                {
                    html: $("<span/>"),
                    parent: this,
                    "class": "np-erase",
                    button: {
                        caption: l$.Login_Clear,
                        backgroundColor: "Gray",
                        fontSize: n$.Enums.FontSize.Medium
                    },
                    on: {
                        clicked: function() {
                            eraseInput();
                        }
                    }
                }
            )
        )
    );
    this.getFocusElement = function () {
        return this.ctrlText.html[0];
    };
};

n$.inherit(n$.Controls.InputWithCaption, n$.Controls.BaseControl);
n$.directProperty(n$.Controls.InputWithCaption.prototype, "caption", function () { return this.ctrlLabel; });
n$.directProperty(n$.Controls.InputWithCaption.prototype, "value", function () { return this.ctrlText; });
n$.directProperty(n$.Controls.InputWithCaption.prototype, "eventControl", function() { return this.ctrlText; });

Object.defineProperty(n$.Controls.InputWithCaption.prototype, "enabled", {
    get: function () {
        return this.ctrlText.enabled;
    },
    set: function (value) {
        this.ctrlTexts ? this.ctrlTexts.forEach(function (c) { c.enabled = value; }) : this.ctrlText.enabled = value;
    }
});

;

//**************************************************************************************
//
//                                      Label Control
//
//**************************************************************************************

n$.Controls.Label = function (par) {
    /// <param name="par">{ caption, parent, format }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-label", CanHaveCaption: true, Formattable: true, HasFontSize: true, HasFontStyle: true });

    par = this.__getParams(par);
    par.html = null;

    if (!par.hasOwnProperty("caption") || (par.caption === undefined)) {
        par.caption = "";
    }

    // n$.Controls.BaseControl initialization
    this.initialize(par);
};

n$.Controls.Label.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.Label.prototype.constructor = n$.Controls.Label;

;

//**************************************************************************************
//
//                                   LastSaleBox Control
//
//**************************************************************************************

n$.Controls.LastSaleBox = function(par) {
    /// <param name="par">{ html, parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-lastsalebox", CanResize: true });;

    par = this.__getParams(par);

    // Own properties
    this.Data = {
        Head: { caption: {}, value: {} },
        Payment: { caption: {}, value: {} },
        SaleLCY: { caption: {}, value: {} },
        Return: { caption: {}, value: {} },
        Footer: {
            Sale: { caption: {}, value: {} },
            Register: { caption: {}, value: {} }
        },
    };

    // n$.Controls.BaseControl initialization
    this.initialize(par);
    var me = this;

    // Subcontrols
    this.append(
        new n$.Controls.Html({ html: "<div/>", "class": "grid-head" }).append(
            new n$.Controls.Html({ html: "<span/>", "class": "left", caption: l$.Sale_LastSale }).assignTo(me.Data.Head, "caption"),
            new n$.Controls.Html({ html: "<span/>", "class": "right" }).assignTo(me.Data.Head, "value")
        ),
        new n$.Controls.Html({ html: "<div/>", "class": "total" }).append(
            new n$.Controls.Html({ html: "<span/>", "class": "left", caption: l$.Sale_PaymentAmount }).assignTo(me.Data.Payment, "caption"),
            new n$.Controls.Html({ html: "<span/>", "class": "right" }).assignTo(me.Data.Payment, "value")
        ),
        new n$.Controls.Html({ html: "<div/>", "class": "sale" }).append(
            new n$.Controls.Html({ html: "<span/>", "class": "left", caption: l$.Sale_PaymentTotal }).assignTo(me.Data.SaleLCY, "caption"),
            new n$.Controls.Html({ html: "<span/>", "class": "right" }).assignTo(me.Data.SaleLCY, "value")
        ),
        new n$.Controls.Html({ html: "<div/>", "class": "balance" }).append(
            new n$.Controls.Html({ html: "<span/>", "class": "left", caption: l$.Sale_ReturnAmount }).assignTo(me.Data.Return, "caption"),
            new n$.Controls.Html({ html: "<span/>", "class": "right" }).assignTo(me.Data.Return, "value")
        ),
        new n$.Controls.Html({ html: "<div/>", "class": "grid-footer" }).append(
            new n$.Controls.Html({ html: "<span/>", "class": "left" }).append(
                new n$.Controls.Html({ html: "<span/>", caption: l$.Sale_ReceiptNo }).assignTo(me.Data.Footer.Sale, "caption"),
                new n$.Controls.Html({ html: "<span/>" }).assignTo(me.Data.Footer.Sale, "value")
            ),
            new n$.Controls.Html({ html: "<span/>", "class": "right" }).append(
                new n$.Controls.Html({ html: "<span/>", caption: l$.Sale_RegisterNo }).assignTo(me.Data.Footer.Register, "caption"),
                new n$.Controls.Html({ html: "<span/>" }).assignTo(me.Data.Footer.Register, "value")
            )
        )
    );
};

n$.Controls.LastSaleBox.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.LastSaleBox.prototype.constructor = n$.Controls.LastSaleBox;

;

//**************************************************************************************
//
//                                    LoginPad Control
//
//**************************************************************************************

n$.Controls.LoginPad = function(par) {
    /// <param name="par">{ html, parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-loginpad", CanResize: true, HasValue: true });

    par = this.__getParams(par);

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    // Events
    var eventInputComplete = $.Event("inputComplete");
    var eventButtonClicked = $.Event("buttonClicked");

    var me = this;

    // Subcontrols
    this.ctrlInput = null;
    this.append(
        new n$.Controls.InputWithCaption({
            caption: l$.Sale_SalesPersonCode,
            inputType: "password",
            on: {
                inputComplete: function(event) {
                    $(me).trigger(eventInputComplete);
                }
            }
        }).assignTo(this, "ctrlInput"),
        new n$.Controls.NumpadSimple({ fontSize: n$.Enums.FontSize.Semilarge, secure: true }).on("buttonClicked",
            function(event, btn) {
                me.inputTextFromButton(me, btn, me.ctrlInput.ctrlText, eventInputComplete, eventButtonClicked);
            })
    );

    // Value property override functions
    this.getValue = function() {
        return this.ctrlInput.value;
    };
    this.setValue = function(val) {
        this.ctrlInput.value = val;
    };

    this.getFocusElement = function() {
        return this.ctrlInput.focusElement;
    };
};

n$.Controls.LoginPad.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.LoginPad.prototype.constructor = n$.Controls.LoginPad;

;

//**************************************************************************************
//
//                                    NumPadFull Control
//
//**************************************************************************************

n$.Controls.NumpadFull = function(par) {
    /// <param name="par">{ html, parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-numpadfull", CanEnable: true, CanResize: true, HasFontSize: true, HasFontStyle: true });

    par = this.__getParams(par);

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    // Events
    var eventButtonClicked = $.Event("buttonClicked");

    // Constructor logic
    var me = this;
    this.grid = new n$.Controls.ButtonGrid.Grid({
        parent: this,
        fontSize: par.hasOwnProperty("fontSize") ? par.fontSize : undefined,
        secure: par.secure,
        rows: [
            [{ value: "7" }, { value: "8" }, { value: "9" }, { value: "+", backgroundColor: "gray" }],
            [{ value: "4" }, { value: "5" }, { value: "6" }, { value: "-", backgroundColor: "gray" }],
            [{ value: "1" }, { value: "2" }, { value: "3" }, { value: "x", backgroundColor: "gray" }],
            [{ value: "0" }, { value: "00" }, { value: n$.State.format.number.NumberDecimalSeparator }, { value: "/", backgroundColor: "gray" }]
        ]
    }).on("buttonClicked", function(event, button) {
        $(me).trigger(eventButtonClicked, button);
    });
};

n$.Controls.NumpadFull.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.NumpadFull.prototype.constructor = n$.Controls.NumpadFull;

;

//**************************************************************************************
//
//                                  NumPadSimple Control
//
//**************************************************************************************

n$.Controls.NumpadSimple = function (par) {
    /// <param name="par">{ html, parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-numpadsimple", CanEnable: true, CanResize: true, HasFontSize: true, HasFontStyle: true });

    par = this.__getParams(par);

    // n$.Controls.BaseControl initialization
    this.initialize(par);

    // Events
    var eventButtonClicked = $.Event("buttonClicked");

    // Constructor logic
    var me = this;
    this.grid = new n$.Controls.ButtonGrid.Grid(
        {
            parent: this,
            fontSize: par.hasOwnProperty("fontSize") ? par.fontSize : undefined,
            secure: par.secure,
            rows: [
                [{ value: "7" }, { value: "8" }, { value: "9" }],
                [{ value: "4" }, { value: "5" }, { value: "6" }],
                [{ value: "1" }, { value: "2" }, { value: "3" }],
                [{ value: n$.State.format.number.NumberDecimalSeparator }, { value: "0" }, { type: n$.Enums.ButtonType.Ok, backgroundColor: "Green", fontStyle: n$.Enums.FontStyle.Uppercase }]
            ]
        }
    ).on("buttonClicked", function(event, button) {
        $(me).trigger(eventButtonClicked, button);
    });
};

n$.Controls.NumpadSimple.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.NumpadSimple.prototype.constructor = n$.Controls.NumpadSimple;

;
n$.Controls.StatusBar = function (par) {
    n$.Controls.BaseControl.call(this, { Tag: "np-view-statusbar", CanEnable: true, CanResize: true });

    this.initialize(par);

    this.addClass("statusbar");
    this.bindings = [];

    par.sections && this.buildSections(this, par.sections, par);
};
n$.Controls.StatusBar.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.StatusBar.prototype.constructor = n$.Controls.StatusBar;

n$.Controls.StatusBar.prototype.binder = new n$.Data.DataBinder({

});

n$.Controls.StatusBar.prototype.buildSections = function (parent, sections, base) {
    var me = this;

    var components = {
        timer: (function() {
            return function(section, ctrl) {
                var refresh = ((typeof section.refresh === "number" && section.refresh) || 60) * 1000;
                var format = section.format || (n$.State.format && n$.State.format.date.ShortTimePattern) || "hh:mm";
                format = format.replace("tt", "A").replace("t", "a");

                function showTime() {
                    ctrl.caption = moment(new Date()).format(format);
                };

                setInterval(showTime, refresh);
                showTime();
            };
        })()
    };

    sections &&
        sections.forEach(function(section) {
            var def = { html: "<span/>", id: section.id };
            if (!section.sections)
                def.fontSize = section.fontSize || base.fontSize || "normal";

            var ctrl = new n$.Controls.Html(def);
            parent.append(ctrl);

            if (section.component) {
                if (!components[section.component] || typeof components[section.component] !== "function") {
                    n$.Debug.UI.warning("Unsupported statusbar section component type specified: " + section.component);
                    return;
                }
                components[section.component](section, ctrl);
            } else {
                section.caption && !section.option && (ctrl.caption = section.caption);
                section.type === "group" && section.sections && this.buildSections(ctrl, section.sections, base);
                section.field && me.bindings.push({ target: ctrl, property: "caption", field: section.field });
                section.option && (ctrl.caption = n$.State.options[section.option]);
            }
            section.width && (ctrl.width = section.width);
            section.class && (ctrl.addClass(section.class));
        }.bind(this));
};

;

//**************************************************************************************
//
//                                      TextBox Control
//
//**************************************************************************************

n$.Controls.TextBox = function(par) {
    /// <param name="par">{ parent, type }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-textbox", CanClick: true, CanEnable: true, Formattable: true, HasValue: true, HasFontSize: true, HasFontStyle: true });

    var me = this;
    me.inputFilter = par.inputFilter;
    var eventInput = $.Event("input");

    par = this.__getParams(par);
    par.secure = par.secure || par.type.toLowerCase() === "password";

    function triggerInput() {
        me.__enabled && $(me).trigger(eventInput, me);
        me.inputFilter && n$.InputFilter.runFilters(me);
    };

    var escClearingValue = false;
    par.html = $("<input type=\"" + (par.type || "text") + "\" autocomplete=\"off\">")
        .on({
            input: triggerInput,
            mouseup: function() {
                if (!me.value)
                    return;
                var oldValue = me.value;
                setTimeout(function () {
                    me.value !== oldValue && $(me).trigger(eventInput, me);
                });
            },
            keypress:
                function(e) {
                    switch (e.which) {
                    case 13:
                        me.value &&
                        (e.stopImmediatePropagation(), e.stopPropagation(), (e._handled = true),
                            !me.filteredInputActive
                                ? $(me).trigger("inputComplete")
                                : ($(me).trigger("filteredInputComplete", me.value), me.value = ""));
                        break;
                    case 27:
                        escClearingValue && (me.value = "", triggerInput(), e.stopImmediatePropagation(), $(me).trigger("inputCancelled"));
                        escClearingValue = false;
                        break;
                    }
                },
            keydown: function(e) {
                if (e.which === 27) {
                    if (me.value) {
                        escClearingValue = true;
                    };
                };
            }
        });

    // Override functions
    this.getValue = function() {
        return this.__html.val();
    };
    this.setValue = function(val) {
        this.__html.val(val);
    };
    this.enableControl = function(enabled) {
        $(this.html).prop("disabled", !enabled);
    };

    var filteredInputActive = false;
    Object.defineProperty(this,
        "filteredInputActive",
        {
            get: function() {
                return filteredInputActive;
            },
            set: function(value) {
                filteredInputActive = value;
                value
                    ? me.html.addClass("np-filteredinputactive")
                    : me.html.removeClass("np-filteredinputactive");
            }
        });

    // n$.Controls.BaseControl initialization
    this.initialize(par);
};

n$.Controls.TextBox.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.TextBox.prototype.constructor = n$.Controls.TextBox;

;

//**************************************************************************************
//
//                                    View Control
//
//**************************************************************************************

n$.Controls.ViewContainer = function (par, layout) {
    /// <param name="par">{ parent }</param>
    n$.Controls.BaseControl.call(this, { Tag: "np-view", CanResize: true });

    par = $.extend(par, layout);
    par = this.__getParams(par);
    par.html = null;

    // n$.Controls.BaseControl initialization
    this.initialize(par);
};

n$.Controls.ViewContainer.prototype = Object.create(n$.Controls.BaseControl.prototype);
n$.Controls.ViewContainer.prototype.constructor = n$.Controls.ViewContainer;
}).depend("Data");
n$.addModule("Views", function() {;
(function () {
    var view = {};
    Object.defineProperty(n$.View,
        "viewState",
        {
            get: function() {
                return view;
            },
            configurable: false
        });
    n$.View.viewState = view;

    n$.View.BaseView = function(par) {
        n$.Debug.UI.log("Constructing view: " +
            ((par.type && par.type.name) || ((par.layout && par.layout.tag) || "[BaseView]")));

        var test = {
            active: false,
            start: function(tests, active) {
                if (!test.active)
                    return;
                debugger;
                // This debugger statement is intentional, and it only stops when there are active tests available in the current view.
                // To see which tests are available, inpect the Methods block of tests argument, it contains all of the test methods available.
                // To run a specific test, add a watch line with tests["method name"]() or tests.methodName(). Don't worry, it will execute
                // only once, not on each breakpoint.
            },
            methods: {}
        };
        this.registerTest = function(name, func) {
            if (test.methods[name] || typeof func !== "function")
                return;
            test.active = true;

            var executed;
            test.methods[name] = function () {
                if (executed)
                    return;
                executed = true;
                func();
            };
        };
        setTimeout(function() {
            test.start(test.methods, test.active);
        }, 2000);

        if (!par.type)
            throw new Error("View does not specify type. Details: " + JSON.stringify(par));

        var viewType = par.type.name.toLowerCase();
        if (!view.hasOwnProperty(viewType))
            Object.defineProperty(view,
                viewType,
                {
                    get: function() {
                        return n$.UI.currentView.type === par.type;
                    }
                });
        this.controls = {};
        this.dataSources = par.dataSources;
        this.lockable = true;

        this.type = par.type;

        if (par.layout) {
            if (par.layout.deviceType) {
                switch (par.layout.deviceType) {
                case "mobile":
                    if (!n$.Window.IsMobile())
                        par.layout = null;
                    break;
                case "desktop":
                    if (n$.Window.IsMobile())
                        par.layout = null;
                    break;
                };
            } else {
                if (n$.Window.IsMobile()) {
                    if (par.layout.viewMobile && typeof par.layout.viewMobile === "object")
                        par.layout = par.layout.viewMobile;
                } else {
                    if (par.layout.viewDesktop && typeof par.layout.viewDesktop === "object")
                        par.layout = par.layout.viewDesktop;
                };
            };
        };

        var defaults = null;
        if (par.layout && typeof par.layout === "object" && par.layout.merge && par.layout) {
            defaults = par.layout.default || {};
            par.layout = null;
        };
        (par.layout && typeof par.layout === "object" && typeof par.layout.content === "object") ||
            (par.layout = typeof this.defaultLayout === "function" ? this.defaultLayout() : this.defaultLayout);
        if (defaults)
            par.layout.default = defaults;
        par.layout && typeof par.layout === "object" && (this.tag = par.layout.tag, this.ui = par.layout);
    };

    n$.View.BaseView.prototype.activate = function(parent) {
        if (typeof parent === "function") {
            $(this).on("activated", parent);
            return;
        };

        this.parent && this.parent.empty();
        this.parent = parent;
        this.parent.empty();
        this.parent.append(`
            <input type="text" id="username" autoComplete="username" style="width: 0; height: 0; opacity: 0; position: absolute; left: 0; top: 0"/>
            <input type="password" id="password" autoComplete="current-password" style="width: 0; height: 0; opacity: 0; position: absolute; left: 0; top: 0"/>
        `);
        this.ui instanceof n$.Controls.BaseControl && parent.append(this.ui.html);

        $(this).trigger("activated");
        $(n$.UI).trigger("viewActivated", this);

        n$.State.resetTimeout(this.lockable);
    };

    n$.View.BaseView.prototype.deactivate = function(func) {
        if (typeof func === "function") {
            $(this).on("deactivated", func);
            return;
        };

        $(this).trigger("deactivated");
    };

    n$.View.BaseView.prototype.defaultLayout = {
        tag: "undefined",
        content: { type: "label", caption: l$.Global_UnknownView }
    };

    n$.View.BaseView.prototype.lock = function () {
        if (!this.lockable)
            return;

        var lock = new n$.Workflow.ActionHandler.Lock();
        if (lock.unknownWorkflow)
            return;

        lock.execute();
    }

    Object.defineProperty(n$.View.BaseView.prototype,
        "ui",
        {
            get: function() {
                return this.__ui;
            },
            set: function(val) {
                var me = this;
                var defaults = val.default;

                var forceWrap = {
                    captionbox: true,
                    grid: true,
                    menu: true,
                    lastsale: true,
                    loginpad: true,
                    logo: true
                };
                var control = {
                    button: function(layout) {
                        return new n$.Controls.Button({ button: layout });
                    },
                    captionbox: function(layout) {
                        return new n$.Controls.DataCaptionBox(layout);
                    },
                    grid: function(layout) {
                        var dataSource = me.dataSources[layout.dataSource];
                        if (!dataSource || !dataSource.columns) {
                            n$.Debug.UI.warning("Unknown data source specified: " + layout.dataSource);
                            return null;
                        };
                        if (layout.columns && !layout.columns.source)
                            layout.columns.source = "json";

                        if (layout.dataSource) {
                            if (!layout.columns) {
                                layout.columns = me.dataSources[layout.dataSource].columns;
                                layout.columns.source = "datasource";
                            };
                        };

                        return new n$.Controls.Grid(layout);
                    },
                    input: function(layout) {
                        return new n$.Controls.Input(layout);
                    },
                    label: function(layout) {
                        return new n$.Controls.Label(layout);
                    },
                    lastsale: function(layout) {
                        return new n$.Controls.LastSaleBox(layout);
                    },
                    loginpad: function() {
                        return new n$.Controls.LoginPad({
                            //alignment: n$.Enums.Alignment.Right
                        });
                    },
                    logo: function () {
                        var logo = new n$.Controls.Image({
                            src: n$.UI.images.logo,
                            alt: n$.Version.product,
                            title: n$.Version.product
                        });
                        n$.UI.logos = n$.UI.logos || [];
                        n$.UI.logos.push(logo);
                        return logo;
                    },
                    menu: function (layout) {
                        var l = $.extend({}, layout);
                        l.rows = new n$.Menu({ id: layout.source, columns: layout.columns, rows: layout.rows })
                            .rows;
                        return new n$.Controls.ButtonGrid.Grid(l);
                    },
                    panel: function(layout) {
                        var ctrl;
                        var panel = new n$.Controls.Container(layout).addClass("panel")
                            .append(
                                new n$.Controls.Label({ caption: layout.label, "class": "panelcaption" }),
                                ctrl = new n$.Controls.Container({ "class": "datapanel" })
                            );
                        panel.ctrl = ctrl;
                        return panel;
                    },
                    text: function(layout) {
                        return layout.bigCaption === true
                            ? new n$.Controls.InputWithCaption(layout)
                            : n$.Controls.TextBox(layout);
                    }
                };

                function applyAttributes(target, tag, parent) {
                    target.npui || (target.npui = {});

                    if (tag.base) {
                        var grow = tag.hasOwnProperty("grow") ? tag.grow : "1";
                        var shrink = tag.hasOwnProperty("shrink") ? tag.shrink : "1";
                        var base = grow === "1" && shrink === "1" ? "auto" : tag.base;
                        target.css("flex", grow + " " + shrink + " " + base);
                        target.npui.base = base;

                        var flow = undefined;
                        while (!flow && parent)
                            flow = parent.flow;
                        flow = flow || "vertical";
                        var prop = flow === "vertical" ? "height" : "width";
                        target.css(prop, tag.base);
                        target.npui[prop] = tag.base;
                    };
                    tag.class && (target.addClass(tag.class));

                    function pureCss(attributes) {
                        var attrArr = $.isArray(attributes) ? attributes : [attributes];
                        attrArr.forEach(function(attr) {
                            tag[attr] && (target.css(attr, tag[attr]), target.npui[attr] = tag[attr]);
                        });
                    };

                    pureCss(["margin", "margin-top", "margin-bottom", "margin-left", "margin-right"]);
                };

                function getControl(layout, wrap) {
                    forceWrap[layout.type] === true && (wrap = true);
                    var wrapper, ctrl = control[layout.type](layout);
                    return wrap
                        ? (wrapper = new n$.Controls.Html({ "class": "np-layout" }), wrapper
                            .append(wrapper.ctrl = ctrl))
                        : ctrl;
                };

                function buildUi(layout, parent, wrap, dataSource) {
                    if (!layout)
                        return null;

                    if (defaults)
                        layout.default = defaults;

                    dataSource && !layout.dataSource && (layout.dataSource = dataSource);
                    var result = typeof control[layout.type] === "function"
                        ? getControl(layout, wrap)
                        : parent
                        ? new n$.Controls.Container(layout)
                        : new n$.Controls.ViewContainer({ "class": "np-view-" + me.tag + (layout.statusBar ? " with-statusbar" : "") }, layout);

                    if (result) {
                        wrap && result.addClass("np-layout");

                        var resultControl = result.ctrl || result;
                        layout.control && (me.controls[layout.control] = resultControl);
                        wrap = wrap && resultControl.wrapChildrenInLayout;

                        layout.content
                            ? (
                                (
                                    $.isArray(layout.content)
                                        ? $.each(layout.content,
                                            function(i, e) {
                                                resultControl
                                                    .append(buildUi(e, resultControl, wrap, layout.dataSource));
                                            })
                                        : resultControl
                                        .append(buildUi(layout.content, resultControl, wrap, layout.dataSource))
                                )
                            )
                            : (result.parent = parent);
                        applyAttributes(result, layout, parent);
                    } else {
                        n$.Debug.UI.warning("Unknown UI element or unsuccessful creation of a known element: " +
                            layout.type);
                    };

                    return result;
                };

                me.__ui = new n$.Controls.Container({ "class": "np-page", flow: "vertical" }).append(
                    buildUi(val, me.__ui, true),
                    val.statusBar ? new n$.Controls.StatusBar(val.statusBar) : undefined
                );
            }
        });
})();
;

n$.View.Locked = function(par) {
    par.tag = "locked";
    n$.View.BaseView.call(this, par);

    var me = this;
    me.lockable = false;
    me.activate(function () {
        me.controls.loginpad
            .on("inputComplete",
                function() {
                    n$.Events.Unlock.raise({ type: "SalespersonCode", password: this.value });
                });
        n$.Focus.request(me.controls.loginpad);
    });

    me.deactivate(function() {
        n$.Focus.release(me.controls.loginpad);
    });
};

n$.View.Locked.prototype = Object.create(n$.View.BaseView.prototype);
n$.View.Locked.prototype.constructor = n$.View.Locked;

n$.View.Locked.prototype.defaultLayout =
{
    tag: "locked",
    flow: "vertical",
    margin: "8% 38%",
    content:
    [
        {
            base: "10%",
            grow: 0,
            shrink: 0,
            type: "label",
            "class": "caption",
            caption: "This register is locked."
        },
        {
            content: {
                base: "85%",
                grow: 1,
                shrink: 1,
                type: "loginpad",
                control: "loginpad"
            }
        }
    ]
};
;

n$.View.Login = function (par) {
    n$.View.BaseView.call(this, par);

    var me = this;
    me.lockable = false;
    me.activate(function() {
        n$.Capabilities.Events.activeSale(false);
        me.controls.loginpad &&
            me.controls.loginpad instanceof n$.Controls.LoginPad &&
            (
                me.controls.loginpad
                    .on("inputComplete",
                        function() {
                            n$.Events.Login.raise(
                                {
                                    type: "SalespersonCode",
                                    password: this.value
                                },
                                function() {
                                    me.controls.loginpad.value = "";
                                });
                        }),
                n$.Focus.request(me.controls.loginpad));
    });

    me.deactivate(function () {
        n$.Focus.release(me.controls.loginpad);
    });
};

n$.View.Login.prototype = Object.create(n$.View.BaseView.prototype);
n$.View.Login.constructor = n$.View.Login;

n$.View.Login.prototype.defaultLayout =
    n$.Window.IsMobile()
    ? {
        tag: "login",
        flow: "vertical",
        content: [
            { type: "logo", "class": "logo" },
            { type: "loginpad", "class": "loginpad", control: "loginpad" },
            {
                "class": "menu",
                content: { type: "menu", source: "MLOGIN", columns: 2, rows: 1 }
            },
            {
                type: "captionbox",
                "class": "info",
                binding: {
                    dataSource: "BUILTIN_SALE",
                    captionSet: {
                        rows: [
                            { caption: "l$.Sale_RegisterNo", field: "1" }
                        ]
                    }
                }
            }
        ]
    }
    : {
        tag: "login",
        flow: "vertical",
        margin: "10% 15%",
        content: [
            {
                "class": "top",
                base: "75%",
                flow: "horizontal",
                content: [
                    {
                        "class": "left",
                        flow: "vertical",
                        base: "60%",
                        content: [
                            {
                                width: "100%",
                                type: "logo"
                            },
                            {
                                type: "captionbox",
                                "class": "lastsale",
                                fontSize: "medium",
                                selfAlign: "center",
                                binding: {
                                    dataSource: "BUILTIN_SALE",
                                    captionSet: {
                                        title: { caption: "l$.Sale_LastSale", field: "LastSaleDate" },
                                        rows: [
                                            { caption: "l$.Sale_PaymentAmount", field: "LastSalePaid" },
                                            { caption: "l$.Sale_PaymentTotal", field: "LastSaleTotal" },
                                            { caption: "l$.Sale_ReturnAmount", field: "LastSaleChange" },
                                            {
                                                "class": "lastline",
                                                left: {
                                                    caption: "l$.Sale_ReceiptNo",
                                                    field: "LastSaleNo"
                                                },
                                                right: {
                                                    caption: "l$.Sale_RegisterNo",
                                                    field: "1"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "class": "right",
                        width: "40%",
                        content: { type: "loginpad", control: "loginpad" }
                    }
                ]
            },
            {
                "class": "bottom",
                content: { type: "menu", source: "LOGIN", columns: 2, rows: 1, width: "350px", height: "80px" }
            }
        ]
    };
;
n$.View.Payment = function (par) {
    var me = this;
    n$.UI.viewFunctions = n$.UI.viewFunctionsPayment;
    n$.View.BaseView.call(me, par);

    me.activate(function () {

        me.controls.totalBox.onHtml("keyup",
            function(e) {
                if (e.which === 38) {
                    me.controls.dataGrid.upRow();
                    return;
                };
                if (e.which === 40) {
                    me.controls.dataGrid.downRow();
                    return;
                };
            });
        n$.Focus.request(me.controls.totalBox);
    });

    me.deactivate(function () {
        n$.Focus.release(me.controls.totalBox);
    });
};

n$.View.Payment.prototype = Object.create(n$.View.BaseView.prototype);
n$.View.Payment.prototype.constructor = n$.View.Payment;

(function() {
    var panes = {
        none: 0,
        items: 1,
        more: 2
    };

    var shown = panes.none;

    function toggleItems() {
        if (shown === panes.more)
            toggleMore();

        shown = !shown * panes.items;

        var items = $(".np-view-payment .np-layout.items-menu");
        items.css("flex-basis", shown === panes.items ? "55vh" : "0em")
            .toggleClass("more-margin");
        $(".np-view-payment .np-layout.togglable")
            .css("flex-basis", shown === panes.items ? "0em" : "11.4em");
    };

    function toggleMore() {
        if (shown === panes.items)
            toggleItems();

        shown = !shown * panes.more;

        var items = $(".np-view-payment .np-layout.more-menu");
        items.css("flex-basis", shown === panes.more ? "25vh" : "0em")
            .toggleClass("more-margin");
        $(".np-view-payment .np-layout.togglable")
            .css("flex-basis", shown === panes.more ? "0em" : "11.4em");
    };

    n$.UI.viewFunctionsPayment = {
        "toggleItems": toggleItems,
        "toggleMore": toggleMore
    };

    n$.View.Payment.prototype.defaultLayout =
        // Mobile content
        n$.Window.IsMobile()
        ? {
            tag: "payment",
            flow: "vertical",
            content:
            [
                {
                    flow: "vertical",
                    content: [
                        {
                            type: "grid",
                            id: "paymentLines",
                            fontSize: "normal",
                            dataSource: "BUILTIN_PAYMENTLINE",

                            totals: [
                                {
                                    caption: "l$.Sale_SubTotal",
                                    total: "Subtotal"
                                }
                            ],

                            control: "dataGrid"
                        },
                        {
                            "class": "togglable",
                            flow: "vertical",
                            content: [
                                {
                                    type: "text",
                                    caption: "l$.Sale_PaymentAmount",
                                    id: "TotalText",
                                    showErase: false,
                                    control: "totalBox",
                                    bigCaption: true
                                },
                                {
                                    "class": "top",
                                    type: "menu",
                                    source: "MPAYMENT-TOP",
                                    columns: 4,
                                    rows: 1,
                                    base: "5em",
                                    id: "buttongrid-functions-top",
                                    dataSource: "BUILTIN_PAYMENTLINE",
                                    skipUndefined: true
                                }
                            ]
                        },
                        {
                            "class": "more-menu",
                            type: "menu",
                            source: "MPAYMENT-BOTTOM",
                            columns: 3,
                            rows: 2,
                            id: "buttongrid-functions-more-menu",
                            dataSource: "BUILTIN_PAYMENTLINE"
                        },
                        {
                            "class": "items-menu",
                            type: "menu",
                            source: "MPAYMENT-LEFT",
                            columns: 4,
                            rows: 4,
                            id: "buttongrid-functions-items-menu",
                            dataSource: "BUILTIN_PAYMENTLINE"
                        },
                        {
                            base: "4em",
                            height: "4em",
                            "class": "bottom-menu",
                            content: [
                                {
                                    type: "button",
                                    caption: "l$.CaptionTablet_ButtonPaymentMethods",
                                    onclick: toggleItems
                                },
                                {
                                    type: "button",
                                    caption: "l$.CaptionTablet_ButtonMore",
                                    onclick: toggleMore
                                }
                            ]
                        }
                    ]
                }
            ]
        }

        // Non-mobile content
        : {
            tag: "payment",
            flow: "horizontal",
            content: [
                {
                    alignment: "left",
                    base: "60%",
                    grow: 0,
                    shrink: 1,
                    width: "60%",
                    flow: "vertical",
                    content: [
                        {
                            type: "grid",
                            id: "paymentLines",
                            fontSize: "normal",
                            dataSource: "BUILTIN_PAYMENTLINE",
                            base: "45%",

                            totals: [
                                {
                                    caption: "l$.Sale_SubTotal",
                                    total: "Subtotal"
                                }
                            ],

                            control: "dataGrid"
                        },
                        {
                            type: "menu",
                            source: "PAYMENT-LEFT",
                            columns: 5,
                            rows: 5,
                            base: "55%",
                            "margin-top": 0,
                            dataSource: "BUILTIN_PAYMENTLINE"
                        }
                    ]
                },
                {
                    flow: "vertical",
                    base: "40%",
                    grow: 0,
                    shrink: 0,
                    width: "calc(40% - 1.5em)",
                                        content: [
                        {
                            type: "text",
                            caption: "l$.Sale_PaymentAmount",
                            id: "TotalText",
                            showErase: false,
                            base: "4em",
                            grow: "0",
                            control: "totalBox",
                            bigCaption: true,
                            inputFilter: true
                        },
                        {
                            type: "menu",
                            source: "PAYMENT-TOP",
                            columns: 3,
                            rows: 2,
                            id: "buttongrid-functions-top",
                            dataSource: "BUILTIN_PAYMENTLINE",
                            base: "25%"
                        },
                        {
                            type: "captionbox",
                            fontSize: "medium",
                            base: "25%",
                            binding: {
                                dataSource: "BUILTIN_PAYMENTLINE",
                                captionSet: {
                                    title: { caption: "l$.Payment_PaymentInfo" },
                                    rows: [
                                        { caption: "l$.Payment_SaleLCY", total: "SaleAmount" },
                                        { caption: "l$.Payment_Paid", total: "PaidAmount" },
                                        { caption: "l$.Payment_Balance", total: "ReturnAmount" }
                                    ]
                                }
                            }
                        },
                        {
                            type: "menu",
                            base: "44%",
                            source: "PAYMENT-BOTTOM",
                            columns: 3,
                            rows: [1, 1, 2],
                            id: "buttongrid-functions-bottom",
                            dataSource: "BUILTIN_PAYMENTLINE"
                        }
                    ]
                }
            ],
            statusBar: {
                dataSource: "BUILTIN_SALE",
                sections: [
                    { field: "CompanyName", width: "20%" },
                    { field: "4", width: "15%" },
                    {
                        type: "group",
                        width: "5%",
                        sections: [
                            { caption: "l$.Sale_RegisterNo", "class": "strong" },
                            { field: "1" }
                        ]
                    },
                    { field: "7", width: "10%" },
                    {
                        type: "group",
                        "class": "group right",
                        sections: [
                            { caption: "l$.Sale_ReceiptNo", "class": "strong" },
                            { field: "2" }
                        ]
                    },
                    {
                        type: "group",
                        "class": "group right",
                        sections: [
                            { caption: "l$.Sale_LastSale", "class": "strong" },
                            { field: "LastSaleNo" }
                        ]
                    },
                    {
                        width: "5%",
                        option: "nprVersion"
                    },
                { id: "walkthrough" }
                ]
            }
        };
})();
;
n$.View.Sale = function (par) {
    var me = this;
    n$.UI.viewFunctions = n$.UI.viewFunctionsSale;
    n$.View.BaseView.call(me, par);

    me.activate(function () {
        me.controls.dataGrid &&
            (
                $(me.controls.dataGrid).on("sourceupdated",
                    function (event, source) {
                        var wasActiveSale = me.activeSale;
                        me.activeSale = !!(source && source.private.rows && source.private.rows.length);
                        wasActiveSale !== me.activeSale &&
                            n$.Capabilities.Events.activeSale(me.activeSale);
                    }),
                $(me.controls.dataGrid)
                    .on("rowrendered",
                        function (e, data) {
                            var field = data.row.getField(12);
                            field &&
                                (field.rawValue < 0
                                    ? data.tr.addClass("negative-row")
                                    : data.tr.removeClass("negative-row"));

                            var color = data.row.getField("LineFormat.Color");
                            color && color.value
                                ? data.tr.css("color", color.value)
                                : data.tr.css("color", "");

                            var weight = data.row.getField("LineFormat.Weight");
                            weight && weight.value
                                ? data.tr.css("font-weight", weight.value)
                                : data.tr.css("font-weight", "");

                            var style = data.row.getField("LineFormat.Style");
                            style && style.value
                                ? data.tr.css("font-style", style.value)
                                : data.tr.css("font-style", "");
                        })
            );

        var pendingEanEvents = [];
        var sending = false;

        function shiftAndProcess() {
            var value = pendingEanEvents.shift();
            sendEventToNav(value);
        };

        function sendEventToNav(value) {
            sending = true;
            n$.Debug.UI.logPos({
                event: "SaleView.EanBox",
                data: value
            });
            n$.Events.TextEnter.raise({
                id: "EanBox",
                value: value,
                data: n$.State.dataStore instanceof n$.Data.DataStore && n$.State.dataStore.getState()
            }, function () {
                sending = false;
                if (pendingEanEvents.length) {
                    shiftAndProcess();
                    return;
                }
                n$.State.options.doNotClearTextBox && (me.controls.eanBox.value = value);
            });
        };


        function inputComplete() {
            var value = me.controls.eanBox && me.controls.eanBox.value;
            me.controls.eanBox.value = "";

            pendingEanEvents.length || sending
                ? pendingEanEvents.push(value)
                : sendEventToNav(value);
        };

        me.controls.eanBox
            .bindToState("EanBox")
            .on("inputComplete", inputComplete)
            .onHtml("keyup",
                function (e) {
                    if (me.controls.eanBox.ctrlText.filteredInputActive)
                        return;

                    if (e.which === 38) {
                        me.controls.dataGrid.upRow();
                        return;
                    };
                    if (e.which === 40) {
                        me.controls.dataGrid.downRow();
                        return;
                    };
                });
        n$.Focus.request(me.controls.eanBox);
    });

    me.deactivate(function () {
        n$.Focus.release(me.controls.eanBox);
    });
};

n$.View.Sale.prototype = Object.create(n$.View.BaseView.prototype);
n$.View.Sale.prototype.constructor = n$.View.Sale;

(function () {
    var panes = {
        none: 0,
        items: 1,
        more: 2
    };

    var shown = panes.none;

    function toggleItems() {
        if (shown === panes.more)
            toggleMore();

        shown = !shown * panes.items;

        var items = $(".np-view-sale .np-layout.items-menu");
        items.css("flex-basis", shown === panes.items ? "55vh" : "0em")
            .toggleClass("more-margin");
        $(".np-view-sale .np-layout.togglable")
            .css("flex-basis", shown === panes.items ? "0em" : "11.4em");
    };

    function toggleMore() {
        if (shown === panes.items)
            toggleItems();

        shown = !shown * panes.more;

        var items = $(".np-view-sale .np-layout.more-menu");
        items.css("flex-basis", shown === panes.more ? "40vh" : "0em")
            .toggleClass("more-margin");
        $(".np-view-sale .np-layout.togglable")
            .css("flex-basis", shown === panes.more ? "0em" : "11.4em");
    };

    n$.UI.viewFunctionsSale = {
        "toggleItems": toggleItems,
        "toggleMore": toggleMore
    };

    n$.View.Sale.prototype.defaultLayout =

        // Mobile content
        n$.Window.IsMobile()
            ? {
                tag: "sale",
                flow: "vertical",
                content:
                    [
                        {
                            flow: "vertical",
                            content: [
                                {
                                    type: "grid",
                                    id: "salesLines",
                                    fontSize: "normal",
                                    dataSource: "BUILTIN_SALELINE",

                                    totals: [
                                        {
                                            caption: "l$.Sale_SubTotal",
                                            total: "TotalAmount"
                                        }
                                    ],

                                    control: "dataGrid"
                                },
                                {
                                    "class": "togglable",
                                    flow: "vertical",
                                    content: [
                                        {
                                            type: "text",
                                            caption: "l$.Sale_EANHeader",
                                            id: "EanBoxText",
                                            showErase: false,
                                            control: "eanBox",
                                            bigCaption: true
                                        },
                                        {
                                            "class": "top",
                                            type: "menu",
                                            source: "MSALE-TOP",
                                            columns: 4,
                                            rows: 1,
                                            base: "5em",
                                            id: "buttongrid-functions-top",
                                            dataSource: "BUILTIN_SALELINE",
                                            skipUndefined: true
                                        }
                                    ]
                                },
                                {
                                    "class": "more-menu",
                                    type: "menu",
                                    source: "MSALE-BOTTOM",
                                    columns: 3,
                                    rows: [1, 1, 2],
                                    id: "buttongrid-functions-more-menu",
                                    dataSource: "BUILTIN_SALELINE"
                                },
                                {
                                    "class": "items-menu",
                                    type: "menu",
                                    source: "MSALE-LEFT",
                                    columns: 4,
                                    rows: 4,
                                    id: "buttongrid-functions-items-menu",
                                    dataSource: "BUILTIN_SALELINE"
                                },
                                {
                                    base: "4em",
                                    height: "4em",
                                    "class": "bottom-menu",
                                    content: [
                                        {
                                            type: "button",
                                            caption: "l$.CaptionTablet_ButtonItems",
                                            onclick: toggleItems
                                        },
                                        {
                                            type: "button",
                                            caption: "l$.CaptionTablet_ButtonMore",
                                            onclick: toggleMore
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
            }

            // Non-mobile content
            : {
                tag: "sale",
                flow: "horizontal",
                content: [
                    {
                        alignment: "left",
                        base: "60%",
                        grow: 0,
                        shrink: 1,
                        width: "60%",
                        flow: "vertical",
                        content: [
                            {
                                type: "grid",
                                id: "salesLines",
                                fontSize: "normal",
                                dataSource: "BUILTIN_SALELINE",
                                base: "45%",

                                totals: [
                                    {
                                        caption: "l$.Sale_SubTotal",
                                        total: "TotalAmount"
                                    }
                                ],

                                control: "dataGrid"
                            },
                            {
                                type: "menu",
                                source: "SALE-LEFT",
                                columns: 5,
                                rows: 5,
                                base: "55%",
                                "margin-top": 0,
                                dataSource: "BUILTIN_SALELINE"
                            }
                        ]
                    },
                    {
                        flow: "vertical",
                        base: "40%",
                        grow: 0,
                        shrink: 0,
                        width: "calc(40% - 1.5em)",
                        content: [
                            {
                                type: "text",
                                caption: "l$.Sale_EANHeader",
                                id: "EanBoxText",
                                showErase: false,
                                base: "4em",
                                grow: "0",
                                control: "eanBox",
                                bigCaption: true,
                                inputFilter: true
                            },
                            {
                                type: "menu",
                                source: "SALE-TOP",
                                columns: 3,
                                rows: 2,
                                id: "buttongrid-functions-top",
                                dataSource: "BUILTIN_SALELINE",
                                base: "25%"
                            },
                            {
                                type: "captionbox",
                                fontSize: "medium",
                                base: "25%",
                                binding: {
                                    dataSource: "BUILTIN_SALELINE",
                                    captionSet: {
                                        title: { field: "10" },
                                        rows: [
                                            { field: "6" },
                                            { field: "15" }
                                        ]
                                    },

                                    fallback: {
                                        dataSource: "BUILTIN_SALE",
                                        captionSet: {
                                            title: { caption: "l$.Sale_LastSale" },
                                            rows: [
                                                { caption: "l$.LastSale_Total", field: "LastSaleTotal" },
                                                { caption: "l$.LastSale_Paid", field: "LastSalePaid" },
                                                { caption: "l$.LastSale_Change", field: "LastSaleChange" }
                                            ]
                                        }
                                    }
                                }
                            },
                            {
                                type: "menu",
                                base: "44%",
                                source: "SALE-BOTTOM",
                                columns: 3,
                                rows: [1, 1, 2],
                                id: "buttongrid-functions-bottom",
                                dataSource: "BUILTIN_SALELINE"
                            }
                        ]
                    }
                ],
                statusBar: {
                    dataSource: "BUILTIN_SALE",

                    sections: [
                        { field: "CompanyName", width: "20%" },
                        { field: "4", width: "15%" },
                        {
                            type: "group",
                            width: "5%",
                            sections: [
                                { caption: "l$.Sale_RegisterNo", "class": "strong" },
                                { field: "1" }
                            ]
                        },
                        { field: "7", width: "10%" },
                        {
                            type: "group",
                            "class": "group right",
                            sections: [
                                { caption: "l$.Sale_ReceiptNo", "class": "strong" },
                                { field: "2" }
                            ]
                        },
                        {
                            type: "group",
                            "class": "group right",
                            sections: [
                                { caption: "l$.Sale_LastSale", "class": "strong" },
                                { field: "LastSaleNo" }
                            ]
                        },
                        {
                            width: "5%",
                            option: "nprVersion"
                        },
                        { id: "walkthrough" }
                    ]
                }
            };
})();}).depend("Controls");
;
$(document)
    .ready(function() {
        n$.NAV = Microsoft.Dynamics.NAV.GetEnvironment();
        n$.NAV.Url = window.top.location.href.match(/http(s?)\:\/\/.*?\/.*?\//)[0];

        n$.awaitInit(function() {
            n$.initialize();

            n$.ready.finalize(function() {
                setTimeout(function() {
                    n$.Events.FrameworkReady.raise(function() {
                        n$.Debug.Framework.log("Completed JavaScript framework initialization.");
                        n$.ready();

                        var result = {
                            hardware: "",
                            session: "",
                            host: ""
                        };
                        var defaultId = "WebBrowser;;";
                        var idPromise = n$.Capabilities.Events.getFrontEndId() || Promise.resolve(defaultId);
                        idPromise.then(id => {
                            id = ((id || defaultId) + ";;").split(";");
                            result.hardware = id[0];
                            id.length >= 1 && (result.session = id[1]);
                            id.length >= 2 && (result.host = id[2]);
                            n$.Events.FrontEndId.raise(result);
                        });
                    });
                });
            });
        });
    });

if (!window.top.window.$_np_retail_version)
    window.top.NaviPartner = n$; // Fallback for older versions of Major Tom

window.top.NaviPartnerTranscendence = n$;
