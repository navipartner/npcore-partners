# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  simpleTypes: ./types-simple.yml
  compositeTypes: ./types-composite.yml  
  globalApiTypes: ./../global-api-types.yml

service:
  display-name: Reservations
  auth: true
  base-path: /ticket
  endpoints:

    createReservation:
      docs: 
        Initiates a new reservation for tickets. 
        Clients use this endpoint to provisionally hold tickets by specifying the desired items, 
        quantities, and any specific admissions or schedules. 
        Returns a token representing the reservation, along with its expiration time, 
        allowing clients to manage or confirm the reservation before it expires.
      method: POST
      path: /reservation
      request:
        name: createReservation 
        body: CreateReservationRequest
      response: 
        type: GetReservationDetails
      examples:
        # Success response
          - name: ExampleCreateReservation1
            path-parameters:
              tenant: $globalApiTypes.tenant.Exampletenant
              environment: $globalApiTypes.environment.ExampleenvironmentProduction
              company: $globalApiTypes.Company.ExampleCompanyCronus
            request:
               reserve:
                - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                  quantity: 2
                  content:
                    - admissionCode: CASTLE
                      scheduleNumber: 452
            response:
              body:
                token: $simpleTypes.Token.ExampleToken
                expiresAt: $simpleTypes.ExpiresAt.ExampleExpiresAt
                reservationStatus: registered
                reservations:
                  - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                    quantity: 2
                    ticket: $ReservationTicketDetails.ExampleTicketUnconfirmed
                    content:
                      - admissionDetails: $compositeTypes.AdmissionDetails.ExampleAdmissionCastle
                        scheduleDetails: $compositeTypes.ScheduleDetails.ExampleMorning

    updateReservation:
      docs: 
        Modifies an existing reservation identified by a token. 
        This endpoint replaces the current reservation details with new ones provided in the request, such as changing quantities or items. 
        Useful for adjusting reservations before confirmation, ensuring that held tickets are updated and previous allocations are released.
      method: PUT
      path: /reservation/{token}
      path-parameters:
        token: simpleTypes.Token
      request:
        name: updateReservation 
        body: CreateReservationRequest
      response: GetReservationDetails
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          request:
              reserve:
               - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                 quantity: 3
                 content:
                 - admissionCode: CASTLE
                   scheduleNumber: 452
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              expiresAt: $simpleTypes.ExpiresAt.ExampleExpiresAt
              reservationStatus: registered
              reservations:
                - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                  quantity: 3
                  ticket: $ReservationTicketDetails.ExampleTicketUnconfirmed
                  content:
                  - admissionDetails: $compositeTypes.AdmissionDetails.ExampleAdmissionCastle
                    scheduleDetails: $compositeTypes.ScheduleDetails.ExampleMorning

    cancelReservation:
      docs: 
        Cancels an existing registered reservation using its token. 
        This endpoint releases the held tickets back into the system, making them available for other customers. 
        Note that confirmed reservations cannot be canceled using this endpoint; they must be revoked through a different process.
      method: POST
      path: /reservation/{token}/cancel
      path-parameters:
        token: simpleTypes.Token
      request: 
        name: cancelReservation
      response: ReservationActionResponse
      examples:
        # Success response
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              reservationStatus: canceled

    preConfirmReservation:
      docs: 
        Extends the lifespan of a provisional reservation identified by a token. 
        Clients use this endpoint to keep the reservation active for a longer period before confirming it, 
        preventing the tickets from expiring and being released back into the system.      
        This action is typically taken when you want to extend the reservation's lifespan just before starting the payment process.
      method: POST
      path: /reservation/{token}/pre-confirm
      path-parameters:
        token: simpleTypes.Token
      request: 
        name: preConfirmReservation
      response: ReservationActionResponse
      examples:
        # Success response
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              expiresAt: $simpleTypes.ExpiresAt.ExampleExpiresAt
              reservationStatus: registered

    confirmReservation:
      docs: 
        Finalizes a provisional reservation, turning it into a confirmed booking. 
        This endpoint requires the reservation token and may include additional customer information such as ticket holder details and payment reference. 
        Upon successful confirmation, the reservation status is updated, and ticket numbers are assigned.
      method: POST
      path: /reservation/{token}/confirm
      path-parameters:
        token: simpleTypes.Token
      request:
        name: confirmReservation 
        body: ConfirmReservationRequest
      response: GetReservationDetails
      examples:
        # Success response
        - name: ExampleConfirmReservation1
          path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          request:
            ticketHolder: John Doe
            notificationAddress: john.doe@acme.com
            paymentReference: PAY123456
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              reservationStatus: confirmed
              reservations:
                - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                  quantity: 2
                  ticket: $ReservationTicketDetails.ExampleTicketConfirmed
                  content:
                  - admissionDetails: $compositeTypes.AdmissionDetails.ExampleAdmissionCastle
                    scheduleDetails: $compositeTypes.ScheduleDetails.ExampleMorning

    getReservation:
      docs: 
        Retrieves the current details of an existing reservation using its token. 
        This endpoint allows clients to check the status, contents, and expiration time of a reservation, whether it's registered or confirmed.        
      method: GET
      path: /reservation/{token}
      path-parameters:
        token: simpleTypes.Token
      request: 
        name: getReservation
      response: GetReservationDetails
      examples:
        # Success response
        - name: "Status Registered"
          path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              expiresAt: $simpleTypes.ExpiresAt.ExampleExpiresAt
              reservationStatus: registered
              reservations:
                - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                  quantity: 2
                  ticket: $ReservationTicketDetails.ExampleTicketUnconfirmed
                  content:
                    - admissionDetails: $compositeTypes.AdmissionDetails.ExampleAdmissionCastle
                      scheduleDetails: $compositeTypes.ScheduleDetails.ExampleMorning
        - name: "Status Confirmed"
          path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          response:
            body:
              token: $simpleTypes.Token.ExampleToken
              reservationStatus: confirmed
              reservations:
                - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
                  quantity: 2
                  ticket: $ReservationTicketDetails.ExampleTicketConfirmed
                  content:
                    - admissionDetails: $compositeTypes.AdmissionDetails.ExampleAdmissionCastle
                      scheduleDetails: $compositeTypes.ScheduleDetails.ExampleMorning

    getTickets:
      docs: 
        Obtains the detailed ticket information for a confirmed reservation identified by its token. 
        Clients use this endpoint to retrieve ticket details such as ticket numbers, validity periods, and any other pertinent information needed for ticket delivery or display.
      display-name: Get Tickets
      method: GET
      path: /reservation/{token}/tickets
      path-parameters:
        token: simpleTypes.Token
      request: 
        name: getTickets
        query-parameters:
          storeCode: optional<simpleTypes.StoreCode>
      response: list<compositeTypes.TicketDetails>
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            token: $simpleTypes.Token.ExampleToken
          query-parameters:
            storeCode: $simpleTypes.StoreCode.ExampleStoreCode
          response:
            body: 
            - $compositeTypes.TicketDetails.ExampleTicket1

types:
  ## Complex types
  ## Top Level Request types
  CreateReservationRequest:
    docs:
      Used when initiating a new reservation for tickets. 
      Contains a list of items (reserve) that the customer wants to reserve, 
      specifying the ticket item numbers, quantities, and any additional content like admissions and schedules.
    properties:
      reserve: list<CreateReservationItemRequest>
  
  ConfirmReservationRequest:
    docs:
      Submitted when confirming a reservation, finalizing the ticket purchase. 
      May include customer details such as ticketHolder name, 
      notificationAddress for sending tickets or notifications, 
      and a paymentReference to link the reservation to a payment transaction.
    properties:
      ticketHolder: optional<simpleTypes.TicketHolder>
      notificationAddress: optional<simpleTypes.NotificationAddress>
      paymentReference: optional<simpleTypes.PaymentReference>

  ## Nested Request types
  CreateReservationItemRequest:
    docs:
      Represents an individual ticket item within a reservation request. 
      Includes the itemNumber, the desired quantity of tickets, and optional content detailing 
      specific admissions or schedules associated with the ticket.
    properties:
      itemNumber: simpleTypes.ItemNumber
      quantity: simpleTypes.NumberOfTickets
      content: optional<list<compositeTypes.TicketContentRequest>>

 
  ## Response types
  ## Top Level Response types
  GetReservationDetails:
    docs:
      Returned in response to reservation-related operations to provide the current state of the reservation. 
      Includes the token identifying the reservation, its expiresAt timestamp, 
      reservationStatus, and a list of reserved items (reservations) with their details.
    properties:
      token: simpleTypes.Token
      expiresAt: optional<simpleTypes.ExpiresAt>
      reservationStatus: simpleTypes.ReservationStatus
      reservations: optional<list<ReservationItemDetails>>
  
  ReservationActionResponse:
    docs:
      Provides a simplified response after performing actions like canceling or pre-confirming a reservation. 
      Includes the updated reservationStatus and optionally the new expiresAt time if the reservation's lifespan was extended.
    properties:
      token: simpleTypes.Token
      expiresAt: optional<simpleTypes.ExpiresAt>
      reservationStatus: simpleTypes.ReservationStatus

  ## Nested Response types
  ReservationItemDetails:
    docs: 
      Contains detailed information about a specific item in a reservation. 
      Includes the itemNumber, quantity reserved, associated ticket details, and a list of content items specifying admissions or other components included with the ticket.
    properties:
      itemNumber: simpleTypes.ItemNumber
      quantity: simpleTypes.NumberOfTickets
      ticket: ReservationTicketDetails
      content: list<TicketContentDetails>

  TicketContentDetails:
    docs: 
      Provides details about the admissions or content associated with a reserved ticket item. 
      Contains admissionDetails that specify the particular admissions, schedules, 
      and any relevant information for each component of the ticket.
    properties:
      admissionDetails: compositeTypes.AdmissionDetails
      scheduleDetails: compositeTypes.ScheduleDetails
    
  AdmissionDetailsFull:
    docs:
      Extends AdmissionDetails with additional information specific to reservations, such as the reschedulePolicy. 
      Offers comprehensive details about an admission, including policies affecting changes after reservation.
    extends: compositeTypes.AdmissionDetails
    properties:
      reschedulePolicy: string

  ReservationTicketDetails:
    docs: 
      Offers detailed ticket information within a reservation, 
      including ticketNumbers if confirmed, validity periods (validFrom, validUntil), 
      pricing details, and optional customer information like pinCode and ticketHolder name. 
      Used to inform customers about their tickets and any actions they can perform.
    properties:
      ticketNumbers: optional<list<compositeTypes.TicketNumbers>>
      validFrom: datetime
      validUntil: datetime
      pinCode: optional<simpleTypes.PinCode>
      unitPrice: double
      unitPriceInclVat: double
      currencyCode: string
      ticketHolder: optional<string>
    examples: 
      - name: ExampleTicketConfirmed
        value:
          ticketNumbers: 
            - ticketId: $simpleTypes.TicketId.ExampleTicket1
              ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
            - ticketId: $simpleTypes.TicketId.ExampleTicket2
              ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket2
          validFrom: 2024-10-15T00:00:00Z
          validUntil: 2024-10-15T23:59:59Z
          pinCode: 12-34
          unitPrice: 80.00
          unitPriceInclVat: 100.00
          currencyCode: DKK
          ticketHolder: John Doe
      - name: ExampleTicketUnconfirmed
        value:
          validFrom: 2024-10-15T00:00:00Z
          validUntil: 2024-10-15T23:59:59Z
          unitPrice: 80.00
          unitPriceInclVat: 100.00
          currencyCode: DKK