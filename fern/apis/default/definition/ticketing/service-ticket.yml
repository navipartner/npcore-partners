  # yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  simpleTypes: ./types-simple.yml
  compositeTypes: ./types-composite.yml  
  globalApiTypes: ./../global-api-types.yml

service:
  display-name: Tickets
  auth: false
  base-path: /ticket
  endpoints:

    getTicket:
      docs: 
        Retrieves detailed information about a specific ticket using its unique ticket id. 
        Clients use this endpoint to obtain ticket details such as validity periods, admissions, and any associated information after a reservation has been confirmed.
      display-name: Get Ticket
      method: GET
      path: /{ticketId}
      request: 
        name: getTicket
        query-parameters:
          storeCode: optional<simpleTypes.StoreCode>
      path-parameters:
        ticketId: simpleTypes.TicketId
      response: compositeTypes.TicketDetails
      examples:
          - name: ExampleGetTicket
            path-parameters:
              tenant: $globalApiTypes.tenant.Exampletenant
              environment: $globalApiTypes.environment.ExampleenvironmentProduction
              company: $globalApiTypes.Company.ExampleCompanyCronus
              ticketId: $simpleTypes.TicketId.ExampleTicket1
            query-parameters:
              storeCode: $simpleTypes.StoreCode.ExampleStoreCode
            response:
              body: $compositeTypes.TicketDetails.ExampleTicket1

    findTicket:
      docs: 
        Retrieves ticket id about a specific ticket using its unique external ticket number for further processing.
      display-name: Find Ticket
      method: GET
      path: ''
      request: 
        name: findTicket
        query-parameters:
          externalNumber: optional<simpleTypes.TicketExternalNumber>
      response: list<FindTicketResponse>
      examples:
          - name: ExampleFindTicket
            path-parameters:
              tenant: $globalApiTypes.tenant.Exampletenant
              environment: $globalApiTypes.environment.ExampleenvironmentProduction
              company: $globalApiTypes.Company.ExampleCompanyCronus
            query-parameters:
              externalNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
            response:
              body: 
                - ticketId: $simpleTypes.TicketId.ExampleTicket1
              
    requestRevokeTicket:
      docs: 
        Initiates a revoke request for a ticket identified by its ticket id. 
        This first step validates that the ticket is eligible for revocation and provides a revokeId to be used in the subsequent confirmation step. 
        It also returns the possible refund amount based on the ticket's conditions. 
        This pre-validation is useful for assessing revocation eligibility and potential refunds before the final confirmation.
      method: POST
      path: /{ticketId}/requestRevoke
      path-parameters:
        ticketId: simpleTypes.TicketId
      request: 
        name: revokeTicket
        body: RevokeTicketRequest
      response: RevokeTicketResponse
      examples:
         - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
           request:
            pinCode: $simpleTypes.PinCode.ExamplePinCode
           response: 
            body:
              revokeId: $simpleTypes.Token.ExampleRevokeId
              quantityToRevoke: 1
              unitAmount: 10.00
            
    confirmRevokeTicket:
      docs: 
        Confirms and executes the revocation of a ticket using the revokeId obtained from Request Revoke Ticket. 
        This step finalizes the cancellation, making the ticket invalid for entry or use and releasing any associated resources. 
        It may include additional customer details such as the ticketHolder name, notificationAddress for sending tickets or notifications, 
        and a paymentReference to link the reservation to a payment transaction.
      method: POST
      path: /{ticketId}/confirmRevoke
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: confirmRevoke
        body: ConfirmRevokeTicketRequest
      response: ConfirmRevokeTicketResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          request:
            revokeId: $simpleTypes.Token.ExampleRevokeId
            ticketHolder: $simpleTypes.TicketHolder.ExampleTicketHolder
            notificationAddress: $simpleTypes.NotificationAddress.ExampleEmail
            paymentReference: "R-1234"
          response:
            body:
              revokeId: $simpleTypes.Token.ExampleRevokeId
              status: "revoked"

    confirmPrint:
      docs: 
        Confirms the printing of a ticket using the ticketId. Increases the print count and sets the printedAt field to the current time.
      method: POST
      path: /{ticketId}/confirmPrint
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: confirmPrint
        body: ConfirmPrintRequest
      response: ConfirmPrintResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          request:
            printCount: $simpleTypes.PrintCount.ExamplePrintCount
          response:
            body:
              printCount: $simpleTypes.PrintCountResponse.ExamplePrintCount
              printedAt: $simpleTypes.PrintedAt.ExamplePrintedAt

    clearConfirmPrint:
      docs: 
        Clears the printedAt field of a ticket using the ticketId.
      method: POST
      path: /{ticketId}/clearConfirmPrint
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: clearConfirmPrint
      response: ClearConfirmPrintResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          response:
            body:
              printCount: $simpleTypes.PrintCountResponse.ExamplePrintCount

    validateArrival:
      docs: 
        Validates a ticket for arrival at a specific admission point, marking the ticket as admitted. 
        This endpoint is typically used at entry points (e.g., gates or doors) to verify the ticket's validity and record the customer's arrival. 
        Optional parameters like admissionCode and scannerStation provide context for the validation.
      method: POST
      path: /{ticketId}/validateArrival
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: validateArrival
        body: optional<ValidateTicketsRequest> 
      response: AdmittedResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          request:
            admissionCode: $simpleTypes.AdmissionCode.ExampleAdmissionCastle
            scannerStation: $simpleTypes.ScannerStation.ExampleScannerStationEntrance
          response:
            body:
              ticketId: $simpleTypes.TicketId.ExampleTicket1
              ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
              admitted: true

    validateDeparture:
      docs:
        Validates a ticket for departure from an admission, marking the ticket as departed. 
        Used when tracking both entry and exit of customers, this endpoint helps manage capacities and ensures that the ticket is correctly processed upon leaving. 
        Similar to arrival validation, it can include admissionCode and scannerStation.
      method: POST
      path: /{ticketId}/validateDeparture
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: validateDeparture  
        body: optional<ValidateTicketsRequest>
      response: DepartedResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          request:
            admissionCode: $simpleTypes.AdmissionCode.ExampleAdmissionCastle
            scannerStation: $simpleTypes.ScannerStation.ExampleScannerStationExit
          response:
            body:
              ticketId: $simpleTypes.TicketId.ExampleTicket1
              ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
              departed: true

    #
    # This endpoint is intended to be used for creating a simple ticket reservation for a member guest and register arrival in one step.
    # 
    # validateMemberGuestArrival:
    #   docs: 
    #     Validates the arrival of a member using their member card number, possibly creating a reservation on-the-fly if necessary. 
    #     This endpoint is used when members, such as season pass holders or VIPs, arrive at an admission point without a prior reservation. 
    #     It ensures that their access is recorded and any tickets are generated accordingly.
    #   method: POST
    #   path: /ticket/{memberCardNumber}/validateMemberArrival
    #   path-parameters:
    #     memberNumber: simpleTypes.MemberNumber
    #   request:
    #     name: validateMemberArrival 
    #     body: CreateMemberReservationRequest
    #   response: list<compositeTypes.TicketDetails>
    #   examples:
    #     - path-parameters:
    #         saasguid: $globalApiTypes.SaasGuid.ExampleSaasGuid
    #         saasenv: $globalApiTypes.SaasEnv.ExampleSaasEnvProduction
    #         company: $globalApiTypes.Company.ExampleCompanyCronus
    #         memberNumber: $simpleTypes.MemberNumber.ExampleMemberNumber
    #       request:
    #         reserve:
    #           - itemNumber: $simpleTypes.ItemNumber.ExampleItemNumber
    #             quantity: 1
    #             #content:
    #             #  - admissionCode: $AdmissionCode.ExampleAdmissionCastle
    #             #    scheduleId: $ScheduleId.ExampleMorningId
    #       response:
    #         body: 
    #           - $compositeTypes.TicketDetails.ExampleTicketMember

    sendToWallet:
      display-name: Send to Wallet
      docs: 
        Sends a confirmed ticket as an e-ticket ("apple" wallet) to the customer's email address or phone number specified in the request. 
        This endpoint facilitates electronic delivery of tickets, allowing customers to receive and present their tickets digitally. 
        Useful for post-purchase communications and ensuring customers have access to their tickets.
      method: POST
      path: /{ticketId}/sendToWallet
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: sendToWallet 
        body: SendTicketRequest
      response: TicketSentResponse
      examples:
        - path-parameters:
            tenant: $globalApiTypes.tenant.Exampletenant
            environment: $globalApiTypes.environment.ExampleenvironmentProduction
            company: $globalApiTypes.Company.ExampleCompanyCronus
            ticketId: $simpleTypes.TicketId.ExampleTicket1
          request:
            notificationAddress: $simpleTypes.NotificationAddress.ExampleEmail
          response:
            body:
              ticketId: $simpleTypes.TicketId.ExampleTicket1
              ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
              ticketSent: true

    exchangeForCoupon:
      display-name: Exchange For Coupon
      docs: 
        Exchanges a ticket for a coupon, which can be used for discounts on future purchases. 
        This endpoint is used when a customer opts to convert their ticket into a coupon, providing multiple value retention options.
        The ticket is validated, and a coupon is issued, providing value retention for the customer.
      method: POST
      path: /{ticketId}/exchangeForCoupon
      path-parameters:
        ticketId: simpleTypes.TicketId
      request:
        name: exchangeForCoupon 
        body: GetTicketCouponRequest
      response: TicketCouponResponse
      examples:
          - path-parameters:
              tenant: $globalApiTypes.tenant.Exampletenant
              environment: $globalApiTypes.environment.ExampleenvironmentProduction
              company: $globalApiTypes.Company.ExampleCompanyCronus
              ticketId: $simpleTypes.TicketId.ExampleTicket1
            request:
              couponType : "DISCOUNT10"
            response:
              body:
                couponId: $simpleTypes.CouponId.ExampleCouponId
                couponNumber: $simpleTypes.CouponNumber.ExampleCouponNumber

      ## TODO for version 2
      # GetTicketChangeRequest
      # ConfirmTicketChangeRequest
      # OfflineTicketValidationRequest
      # GetTicketPrintUrl 

types:
  ## Top-Level Type Definitions
  GetTicketsRequest:
    docs: Request to get ticket details
    properties:
      ticketNumber: simpleTypes.TicketExternalNumber

  FindTicketResponse:
    docs: Response to a find ticket request
    properties:
      ticketId: simpleTypes.TicketId

  RevokeTicketRequest:
    docs: Request to revoke a ticket
    properties:
      pinCode: simpleTypes.PinCode
    examples:
      - name: ExampleRevokeTicket
        value:
          pinCode: $simpleTypes.PinCode.ExamplePinCode

  RevokeTicketResponse:
    properties:
      revokeId: simpleTypes.Token
      quantityToRevoke: simpleTypes.NumberOfTickets
      unitAmount: simpleTypes.UnitPrice

  ConfirmRevokeTicketRequest:
    docs: 
      Submitted when confirming a ticket revocation, finalizing the cancellation
      May include customer details such as ticketHolder name, 
      notificationAddress for sending tickets or notifications, 
      and a paymentReference to link the reservation to a payment transaction.
    properties:
      revokeId: simpleTypes.Token
      ticketHolder: optional<simpleTypes.TicketHolder>
      notificationAddress: optional<simpleTypes.NotificationAddress>
      paymentReference: optional<simpleTypes.PaymentReference>

  ConfirmRevokeTicketResponse:
    properties:
      revokeId: simpleTypes.Token
      status: string

  ValidateTicketsRequest:
    docs: Request to validate a ticket
    properties:
      admissionCode: optional<simpleTypes.AdmissionCode>
      scannerStation: optional<string>
    examples:
      - name: ExampleValidateArrival
        value:
          admissionCode: $simpleTypes.AdmissionCode.ExampleAdmissionCastle
          scannerStation: $simpleTypes.ScannerStation.ExampleScannerStationEntrance
      - name: ExampleValidateDeparture
        value:
          admissionCode: $simpleTypes.AdmissionCode.ExampleAdmissionCastle
          scannerStation: $simpleTypes.ScannerStation.ExampleScannerStationExit

  SendTicketRequest:
    docs: Request to send a ticket as an e-ticket
    properties:
      notificationAddress: simpleTypes.NotificationAddress
      
  CreateMemberReservationRequest:
    docs: Request to validate a member arrival
    properties:
      reserve: list<CreateMemberReservationItemRequest>

  GetTicketCouponRequest:
    docs: Request to exchange a ticket for a coupon
    properties:
      couponType: optional<simpleTypes.CouponType>

  ## Complex Type Definitions
  TicketCouponResponse:
    properties:
      couponId: simpleTypes.CouponId
      couponNumber: simpleTypes.CouponNumber
      couponType: optional<simpleTypes.CouponType>

  CreateMemberReservationItemRequest:
    properties:
      itemNumber: simpleTypes.ItemNumber
      quantity: simpleTypes.NumberOfTickets
      content: optional<list<compositeTypes.TicketContentRequest>>

  ActionResponseSuccess:
      type: boolean
      docs: Indicates whether the action was successful

  ActionResponseCode:
      type: string
      docs: A code that identifies the reason of the action result

  ActionResponseMessage:
      type: string
      docs: A message that describes the result of the action 

  RevokedRequestResponse:
    properties:
      ticketNumber: simpleTypes.TicketExternalNumber
      revoked: ActionResponseSuccess
      code: optional<ActionResponseCode>
      message: optional<ActionResponseMessage>


  ConfirmPrintRequest:
    properties:
      printCount: simpleTypes.PrintCount
    examples:
      - name: ExampleConfirmPrint
        value:
          printCount: $simpleTypes.PrintCount.ExamplePrintCount

  ConfirmPrintResponse:
    properties:
      printCount: simpleTypes.PrintCountResponse
      printedAt: simpleTypes.PrintedAt
    examples:
      - name: ExampleConfirmPrint
        value:
          printCount: $simpleTypes.PrintCountResponse.ExamplePrintCount
          printedAt: $simpleTypes.PrintedAt.ExamplePrintedAt

  ClearConfirmPrintResponse:
    properties:
      printCount: simpleTypes.PrintCountResponse
    examples:
      - name: ExampleClearConfirmPrint
        value:
          printCount: $simpleTypes.PrintCountResponse.ExamplePrintCount

  AdmittedResponse:
    properties:
      ticketId: simpleTypes.TicketId
      ticketNumber: simpleTypes.TicketExternalNumber
      admitted: simpleTypes.Admitted
      code: optional<ActionResponseCode>
      message: optional<ActionResponseMessage>

  DepartedResponse:
    properties:
      ticketId: simpleTypes.TicketId
      ticketNumber: simpleTypes.TicketExternalNumber
      departed: simpleTypes.Departed
      code: optional<ActionResponseCode>
      message: optional<ActionResponseMessage>

  TicketSentResponse:
    properties:
      ticketId: simpleTypes.TicketId
      ticketNumber: simpleTypes.TicketExternalNumber
      ticketSent: simpleTypes.TicketSent
      code: optional<ActionResponseCode>
      message: optional<ActionResponseMessage>
    examples:
      - name: ExampleTicketSent
        value:
          ticketId: $simpleTypes.TicketId.ExampleTicket1
          ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
          ticketSent: true
      - name: ExampleTicketNotSent  
        value:
          ticketId: $simpleTypes.TicketId.ExampleTicket1
          ticketNumber: $simpleTypes.TicketExternalNumber.ExampleTicket1
          ticketSent: false
          code: "ticket_not_sent"
          message: "Ticket could not be sent as e-ticket."


